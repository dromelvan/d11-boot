openapi: 3.0.3
info:
  version: 2.0.0
  title: D11 API
  description: API for the D11 Spring Boot application
  license:
    name: MIT
servers:
  - url: http://localhost:8080


# Paths ----------------------------------------------------------------------------------------------------------------

paths:

  # Security -----------------------------------------------------------------------------------------------------------

  /v2/security/authenticate:
    post:
      tags:
        - security
      summary: Authenticate a user by username/password.
      operationId: authenticate
      requestBody:
        description: User authentication properties.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthenticationRequestBody"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationResponseBody"
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        500:
          $ref: '#/components/responses/InternalServerError'

  /v2/security/authorize:
    post:
      tags:
        - security
      summary: Authorize a user by refresh token.
      operationId: authorize
      parameters:
        - in: cookie
          name: refreshToken
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthorizationResponseBody"
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        500:
          $ref: '#/components/responses/InternalServerError'

  /v2/security/unauthorize:
    post:
      tags:
        - security
      summary: Unauthorize a user by invalidating the refresh token and removing the cookie.
      operationId: unauthorize
      parameters:
        - in: cookie
          name: refreshToken
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizationResponseBody"
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        500:
          $ref: '#/components/responses/InternalServerError'

  /v2/security/request-password-reset:
    post:
      tags:
        - security
      summary: Request a password reset for a user.
      operationId: requestPasswordReset
      requestBody:
        description: User request password reset properties.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RequestPasswordResetRequestBody"
      responses:
        200:
          description: OK
        400:
          $ref: '#/components/responses/BadRequest'
        500:
          $ref: '#/components/responses/InternalServerError'

  /v2/security/reset-password:
    post:
      tags:
        - security
      summary: Reset a password for a user.
      operationId: resetPassword
      requestBody:
        description: Reset user password properties.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ResetPasswordRequestBody"
      responses:
        200:
          description: OK
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        500:
          $ref: '#/components/responses/InternalServerError'

  # User ---------------------------------------------------------------------------------------------------------------

  /v2/users:
    post:
      tags:
        - user
      summary: Creates a user.
      operationId: createUser
      requestBody:
        description: User registration properties.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUserRequestBody"
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponseBody"
        400:
          $ref: '#/components/responses/BadRequest'
        409:
          $ref: '#/components/responses/Conflict'
        500:
          $ref: '#/components/responses/InternalServerError'

  /v2/users/{userId}:
    put:
      tags:
        - user
      summary: Updates a users password.
      security:
        - BearerAuth: [user]
      operationId: updateUser
      parameters:
        - name: userId
          in: path
          required: true
          description: Id of the user that will be updated.
          schema:
            type: integer
            format: int64
      requestBody:
        description: Update user password.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUserRequestBody"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponseBody"
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'

    delete:
      tags:
        - user
      summary: Deletes a user.
      security:
        - BearerAuth: [admin]
      operationId: deleteUser
      parameters:
        - name: userId
          in: path
          required: true
          description: Id of the user that will be deleted.
          schema:
            type: integer
            format: int64
      responses:
        204:
          description: No Content
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'

  # Countries ----------------------------------------------------------------------------------------------------------

  /v2/countries:
    get:
      tags:
        - country
      summary: Gets all countries.
      security: []
      operationId: getCountries
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CountriesResponseBody"
        500:
          $ref: '#/components/responses/InternalServerError'

  # Teams --------------------------------------------------------------------------------------------------------------

  /v2/teams:
    get:
      tags:
        - team
      summary: Gets all teams.
      security: []
      operationId: getTeams
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TeamsResponseBody"
        500:
          $ref: '#/components/responses/InternalServerError'

  /v2/teams/{teamId}:
    get:
      tags:
        - team
      summary: Get a team by id.
      security: []
      operationId: getTeamById
      parameters:
        - name: teamId
          in: path
          required: true
          description: Id of the team.
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TeamResponseBody"
        400:
          $ref: '#/components/responses/BadRequest'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'

  /v2/teams/{teamId}/matches:
    get:
      tags:
        - match
      summary: Get a matches by team id and season id.
      security: []
      operationId: getMatchesByTeamIdAndSeasonId
      parameters:
        - name: teamId
          in: path
          required: true
          description: Id of the team.
          schema:
            type: integer
            format: int64
        - in: query
          required: true
          name: seasonId
          schema:
            type: integer
            format: int64
          description: The season id.
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MatchesResponseBody"
        400:
          $ref: '#/components/responses/BadRequest'
        500:
          $ref: '#/components/responses/InternalServerError'

  /v2/teams/{teamId}/player-season-stats:
    get:
      tags:
        - playerSeasonStat
      summary: Get a player season stats by team id and season id.
      security: []
      operationId: getPlayerSeasonStatsByTeamIdAndSeasonId
      parameters:
        - name: teamId
          in: path
          required: true
          description: Id of the team.
          schema:
            type: integer
            format: int64
        - in: query
          required: true
          name: seasonId
          schema:
            type: integer
            format: int64
          description: The season id.
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlayerSeasonStatsResponseBody"
        400:
          $ref: '#/components/responses/BadRequest'
        500:
          $ref: '#/components/responses/InternalServerError'

  /v2/teams/{teamId}/team-season-stats:
    get:
      tags:
        - teamSeasonStat
      summary: Get team season stat by team id and season id.
      security: []
      operationId: getTeamSeasonStatByTeamIdAndSeasonId
      parameters:
        - name: teamId
          in: path
          required: true
          description: Id of the team.
          schema:
            type: integer
            format: int64
        - in: query
          required: true
          name: seasonId
          schema:
            type: integer
            format: int64
          description: The season id.
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TeamSeasonStatResponseBody"
        400:
          $ref: '#/components/responses/BadRequest'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'

  # D11Teams -----------------------------------------------------------------------------------------------------------

  /v2/d11-teams:
    get:
      tags:
        - d11Team
      summary: Gets all D11 teams.
      security: []
      operationId: getD11Teams
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/D11TeamsResponseBody"
        500:
          $ref: '#/components/responses/InternalServerError'

  /v2/d11-teams/{d11TeamId}:
    get:
      tags:
        - d11Team
      summary: Get a D11 team by id.
      security: []
      operationId: getD11TeamById
      parameters:
        - name: d11TeamId
          in: path
          required: true
          description: Id of the D11 team.
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/D11TeamResponseBody"
        400:
          $ref: '#/components/responses/BadRequest'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'

  /v2/d11-teams/{d11TeamId}/d11-matches:
    get:
      tags:
        - d11Match
      summary: Get D11 matches by D11 team id and season id.
      security: []
      operationId: getD11MatchesByD11TeamIdAndSeasonId
      parameters:
        - name: d11TeamId
          in: path
          required: true
          description: Id of the D11 team.
          schema:
            type: integer
            format: int64
        - in: query
          required: true
          name: seasonId
          schema:
            type: integer
            format: int64
          description: The season id.
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/D11MatchesResponseBody"
        400:
          $ref: '#/components/responses/BadRequest'
        500:
          $ref: '#/components/responses/InternalServerError'

  /v2/d11-teams/{d11TeamId}/player-season-stats:
    get:
      tags:
        - playerSeasonStat
      summary: Get a player season stats by D11 team id and season id.
      security: []
      operationId: getPlayerSeasonStatsByD11TeamIdAndSeasonId
      parameters:
        - name: d11TeamId
          in: path
          required: true
          description: Id of the D11 team.
          schema:
            type: integer
            format: int64
        - in: query
          required: true
          name: seasonId
          schema:
            type: integer
            format: int64
          description: The season id.
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlayerSeasonStatsResponseBody"
        400:
          $ref: '#/components/responses/BadRequest'
        500:
          $ref: '#/components/responses/InternalServerError'

  /v2/d11-teams/{d11TeamId}/d11-team-season-stats:
    get:
      tags:
        - d11TeamSeasonStat
      summary: Get D11 team season stat by D11 team id and season id.
      security: []
      operationId: getD11TeamSeasonStatByD11TeamIdAndSeasonId
      parameters:
        - name: d11TeamId
          in: path
          required: true
          description: Id of the D11 team.
          schema:
            type: integer
            format: int64
        - in: query
          required: true
          name: seasonId
          schema:
            type: integer
            format: int64
          description: The season id.
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/D11TeamSeasonStatResponseBody"
        400:
          $ref: '#/components/responses/BadRequest'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'

  # Players ------------------------------------------------------------------------------------------------------------

  /v2/players:
    post:
      tags:
        - player
      summary: Creates a player.
      security:
        - BearerAuth: [admin]
      operationId: createPlayer
      requestBody:
        description: New player properties.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PlayerInputRequestBody"
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlayerResponseBody"
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        500:
          $ref: '#/components/responses/InternalServerError'

  /v2/players/{playerId}:
    get:
      tags:
        - player
      summary: Get a player by id.
      security: []
      operationId: getPlayerById
      parameters:
        - name: playerId
          in: path
          required: true
          description: Id of the player.
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlayerResponseBody"
        400:
          $ref: '#/components/responses/BadRequest'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'

    put:
      tags:
        - player
      summary: Update a player.
      security:
        - BearerAuth: [admin]
      operationId: updatePlayer
      parameters:
        - name: playerId
          in: path
          required: true
          description: Id of the player that will be updated.
          schema:
            type: integer
            format: int64
      requestBody:
        description: The player that will be updated.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlayerInputRequestBody'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlayerResponseBody"
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /v2/players/{playerId}/player-match-stats:
    get:
      tags:
        - playerMatchStat
      summary: Get player match stats by player id and season id.
      security: []
      operationId: getPlayerMatchStatsByPlayerIdAndSeasonId
      parameters:
        - name: playerId
          in: path
          required: true
          description: Id of the player.
          schema:
            type: integer
            format: int64
        - in: query
          required: true
          name: seasonId
          schema:
            type: integer
            format: int64
          description: The season id.
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlayerMatchStatsResponseBody"
        400:
          $ref: '#/components/responses/BadRequest'
        500:
          $ref: '#/components/responses/InternalServerError'

  /v2/players/{playerId}/player-season-stats:
    get:
      tags:
        - playerSeasonStat
      summary: Get player season stats by player by id.
      security: []
      operationId: getPlayerSeasonStatsByPlayerId
      parameters:
        - name: playerId
          in: path
          required: true
          description: Id of the player.
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlayerSeasonStatsResponseBody"
        400:
          $ref: '#/components/responses/BadRequest'
        500:
          $ref: '#/components/responses/InternalServerError'

  /v2/players/{playerId}/transfers:
    get:
      tags:
        - transfer
      summary: Get transfers by player by id.
      security: []
      operationId: getTransfersByPlayerId
      parameters:
        - name: playerId
          in: path
          required: true
          description: Id of the player.
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransfersResponseBody"
        400:
          $ref: '#/components/responses/BadRequest'
        500:
          $ref: '#/components/responses/InternalServerError'

  /v2/players/search:
    get:
      tags:
        - player
      summary: Searches players by name.
      security: []
      operationId: searchPlayersByName
      parameters:
        - in: query
          required: true
          name: name
          schema:
            type: string
          description: The name.
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlayerSearchResultsResponseBody"
        500:
          $ref: '#/components/responses/InternalServerError'

  # Positions ----------------------------------------------------------------------------------------------------------

  /v2/positions:
    get:
      tags:
        - position
      summary: Gets all positions.
      security: []
      operationId: getPositions
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PositionsResponseBody"
        500:
          $ref: '#/components/responses/InternalServerError'

  # Season -------------------------------------------------------------------------------------------------------------

  /v2/seasons:
    get:
      tags:
        - season
      summary: Gets all seasons.
      security: []
      operationId: getSeasons
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SeasonsResponseBody"
        500:
          $ref: '#/components/responses/InternalServerError'

  /v2/seasons/{seasonId}:
    get:
      tags:
        - season
      summary: Get a season by id.
      security: []
      operationId: getSeasonById
      parameters:
        - name: seasonId
          in: path
          required: true
          description: Id of the season.
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SeasonResponseBody"
        400:
          $ref: '#/components/responses/BadRequest'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'

    put:
      tags:
        - season
      summary: Updates a season.
      security:
        - BearerAuth: [admin]
      operationId: updateSeason
      parameters:
        - name: seasonId
          in: path
          required: true
          description: Id of the season that will be updated.
          schema:
            type: integer
            format: int64
      requestBody:
        description: Update season properties.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateSeasonRequestBody"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SeasonResponseBody"
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'

  /v2/seasons/current:
    get:
      tags:
        - season
      summary: Gets the current season.
      security: []
      operationId: getCurrentSeason
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SeasonResponseBody"
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'

  # Match week ---------------------------------------------------------------------------------------------------------

  /v2/match-weeks:
    get:
      tags:
        - matchWeek
      summary: Gets all match weeks for a season.
      security: []
      operationId: getMatchWeeksBySeasonId
      parameters:
        - in: query
          required: true
          name: seasonId
          schema:
            type: integer
            format: int64
          description: The season id.
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MatchWeeksResponseBody"
        400:
          $ref: '#/components/responses/BadRequest'
        500:
          $ref: '#/components/responses/InternalServerError'

  /v2/match-weeks/{matchWeekId}:
    get:
      tags:
        - matchWeek
      summary: Get a match week by id.
      security: []
      operationId: getMatchWeekById
      parameters:
        - name: matchWeekId
          in: path
          required: true
          description: Id of the match week.
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MatchWeekResponseBody"
        400:
          $ref: '#/components/responses/BadRequest'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'

  /v2/match-weeks/current:
    get:
      tags:
        - matchWeek
      summary: Get the current match week.
      security: []
      operationId: getCurrentMatchWeek
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MatchWeekResponseBody"
        500:
          $ref: '#/components/responses/InternalServerError'

  # Match --------------------------------------------------------------------------------------------------------------

  /v2/matches:
    get:
      tags:
        - match
      summary: Get matches by match week id.
      security: []
      operationId: getMatchesByMatchWeekId
      parameters:
        - name: matchWeekId
          in: query
          required: true
          description: Id of the match week.
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MatchesResponseBody"
        400:
          $ref: '#/components/responses/BadRequest'
        500:
          $ref: '#/components/responses/InternalServerError'

  /v2/matches/{matchId}:
    get:
      tags:
        - match
      summary: Get a match by id.
      security: []
      operationId: getMatchById
      parameters:
        - name: matchId
          in: path
          required: true
          description: Id of the match.
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MatchResponseBody"
        400:
          $ref: '#/components/responses/BadRequest'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'

  /v2/matches/current:
    get:
      tags:
        - match
      summary: Get current matches.
      security: []
      operationId: getCurrentMatches
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MatchesResponseBody"
        500:
          $ref: '#/components/responses/InternalServerError'

  /v2/matches/{matchId}/player-match-stats:
    get:
      tags:
        - playerMatchStat
      summary: Get player match stats by match id.
      security: []
      operationId: getPlayerMatchStatsByMatchId
      parameters:
        - name: matchId
          in: path
          required: true
          description: Id of the match.
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlayerMatchStatsResponseBody"
        400:
          $ref: '#/components/responses/BadRequest'
        500:
          $ref: '#/components/responses/InternalServerError'

  # D11 match ----------------------------------------------------------------------------------------------------------

  /v2/d11-matches:
    get:
      tags:
        - d11Match
      summary: Get D11 matches by match week id.
      security: []
      operationId: getD11MatchesByMatchWeekId
      parameters:
        - name: matchWeekId
          in: query
          required: true
          description: Id of the match week.
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/D11MatchesResponseBody"
        400:
          $ref: '#/components/responses/BadRequest'
        500:
          $ref: '#/components/responses/InternalServerError'

  /v2/d11-matches/{d11MatchId}:
    get:
      tags:
        - d11Match
      summary: Get a D11 match by id.
      security: []
      operationId: getD11MatchById
      parameters:
        - name: d11MatchId
          in: path
          required: true
          description: Id of the D11 match.
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/D11MatchResponseBody"
        400:
          $ref: '#/components/responses/BadRequest'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'

  /v2/d11-matches/current:
    get:
      tags:
        - d11Match
      summary: Get current D11 matches.
      security: []
      operationId: getCurrentD11Matches
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/D11MatchesResponseBody"
        500:
          $ref: '#/components/responses/InternalServerError'

  /v2/d11-matches/{d11MatchId}/player-match-stats:
    get:
      tags:
        - playerMatchStat
      summary: Get player match stats by D11 match id.
      security: []
      operationId: getPlayerMatchStatsByD11MatchId
      parameters:
        - name: d11MatchId
          in: path
          required: true
          description: Id of the D11 match.
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlayerMatchStatsResponseBody"
        400:
          $ref: '#/components/responses/BadRequest'
        500:
          $ref: '#/components/responses/InternalServerError'

  # Player season stat ---------------------------------------------------------------------------------------------------

  /v2/player-season-stats:
    get:
      tags:
        - playerSeasonStat
      summary: Gets all player season stats for a season.
      security: [ ]
      operationId: getPlayerSeasonStatsBySeasonId
      parameters:
        - in: query
          required: true
          name: seasonId
          schema:
            type: integer
            format: int64
          description: The season id.
        - name: page
          in: query
          required: true
          description: Result page starting from 0.
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlayerSeasonStatsResponseBody"
        400:
          $ref: '#/components/responses/BadRequest'
        500:
          $ref: '#/components/responses/InternalServerError'

    post:
      tags:
        - playerSeasonStat
      summary: Creates a player season stat.
      security:
        - BearerAuth: [admin]
      operationId: createPlayerSeasonStat
      requestBody:
        description: New player season stat properties.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreatePlayerSeasonStatInputRequestBody"
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlayerSeasonStatResponseBody"
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        409:
          $ref: '#/components/responses/Conflict'
        500:
          $ref: '#/components/responses/InternalServerError'


  # Team season stat ---------------------------------------------------------------------------------------------------

  /v2/team-season-stats:
    get:
      tags:
        - teamSeasonStat
      summary: Gets all team season stats for a season.
      security: []
      operationId: getTeamSeasonStatsBySeasonId
      parameters:
        - in: query
          required: true
          name: seasonId
          schema:
            type: integer
            format: int64
          description: The season id.
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TeamSeasonStatsResponseBody"
        400:
          $ref: '#/components/responses/BadRequest'
        500:
          $ref: '#/components/responses/InternalServerError'

  # D11 team season stat -----------------------------------------------------------------------------------------------

  /v2/d11-team-season-stats:
    get:
      tags:
        - d11TeamSeasonStat
      summary: Gets all D11 team season stats for a season.
      security: []
      operationId: getD11TeamSeasonStatsBySeasonId
      parameters:
        - in: query
          required: true
          name: seasonId
          schema:
            type: integer
            format: int64
          description: The season id.
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/D11TeamSeasonStatsResponseBody"
        400:
          $ref: '#/components/responses/BadRequest'
        500:
          $ref: '#/components/responses/InternalServerError'

  # Transfer window-----------------------------------------------------------------------------------------------------

  /v2/transfer-windows:
    get:
      tags:
        - transferWindow
      summary: Get transfer windows by season id.
      security: []
      operationId: getTransferWindowsBySeasonId
      parameters:
        - name: seasonId
          in: query
          required: true
          description: Id of the season.
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransferWindowsResponseBody"
        400:
          $ref: '#/components/responses/BadRequest'
        500:
          $ref: '#/components/responses/InternalServerError'

    post:
      tags:
        - transferWindow
      summary: Creates a transfer window.
      security:
        - BearerAuth: [admin]
      operationId: createTransferWindow
      requestBody:
        description: New transfer window properties.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateTransferWindowRequestBody"
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransferWindowResponseBody"
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        409:
          $ref: '#/components/responses/Conflict'
        500:
          $ref: '#/components/responses/InternalServerError'

  /v2/transfer-windows/{transferWindowId}:
    get:
      tags:
        - transferWindow
      summary: Get a transfer window by id.
      security: []
      operationId: getTransferWindowById
      parameters:
        - name: transferWindowId
          in: path
          required: true
          description: Id of the transfer window.
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransferWindowResponseBody"
        400:
          $ref: '#/components/responses/BadRequest'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'

    delete:
      tags:
        - transferWindow
      summary: Deletes a transfer window.
      security:
        - BearerAuth: [admin]
      operationId: deleteTransferWindow
      parameters:
        - name: transferWindowId
          in: path
          required: true
          description: Id of the transfer window that will be deleted.
          schema:
            type: integer
            format: int64
      responses:
        204:
          description: No Content
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        409:
          $ref: '#/components/responses/Conflict'
        500:
          $ref: '#/components/responses/InternalServerError'

  /v2/transfer-windows/current:
    get:
      tags:
        - transferWindow
      summary: Gets the current transfer window.
      security: []
      operationId: getCurrentTransferWindow
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransferWindowResponseBody"
        500:
          $ref: '#/components/responses/InternalServerError'

  # Transfer day -------------------------------------------------------------------------------------------------------

  /v2/transfer-days:
    get:
      tags:
        - transferDay
      summary: Get transfer days by transfer window id.
      security: []
      operationId: getTransferDaysByTransferWindowId
      parameters:
        - name: transferWindowId
          in: query
          required: true
          description: Id of the transfer window.
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransferDaysResponseBody"
        400:
          $ref: '#/components/responses/BadRequest'
        500:
          $ref: '#/components/responses/InternalServerError'

  /v2/transfer-days/{transferDayId}:
    get:
      tags:
        - transferDay
      summary: Get a transfer day by id.
      security: []
      operationId: getTransferDayById
      parameters:
        - name: transferDayId
          in: path
          required: true
          description: Id of the transfer day.
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransferDayResponseBody"
        400:
          $ref: '#/components/responses/BadRequest'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'

  /v2/transfer-days/current:
    get:
      tags:
        - transferDay
      summary: Get the current transfer day.
      security: []
      operationId: getCurrentTransferDay
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransferDayResponseBody"
        500:
          $ref: '#/components/responses/InternalServerError'

  # Transfer listings --------------------------------------------------------------------------------------------------

  /v2/transfer-listings:
    get:
      tags:
        - transferListing
      summary: Get transfer listings by transfer day id.
      security: []
      operationId: getTransferListingsByTransferDayId
      parameters:
        - name: transferDayId
          in: query
          required: true
          description: Id of the transfer day.
          schema:
            type: integer
            format: int64
        - name: page
          in: query
          required: true
          description: Result page starting from 0.
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransferListingsResponseBody"
        400:
          $ref: '#/components/responses/BadRequest'
        500:
          $ref: '#/components/responses/InternalServerError'

  # Transfer bids ------------------------------------------------------------------------------------------------------

  /v2/transfer-bids:
    get:
      tags:
        - transferBid
      summary: Get transfer bids by transfer day id.
      security: []
      operationId: getTransferBidsByTransferDayId
      parameters:
        - name: transferDayId
          in: query
          required: true
          description: Id of the transfer day.
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransferBidsResponseBody"
        400:
          $ref: '#/components/responses/BadRequest'
        500:
          $ref: '#/components/responses/InternalServerError'

  # Transfers ----------------------------------------------------------------------------------------------------------

  /v2/transfers:
    get:
      tags:
        - transfer
      summary: Get transfers by transfer day id.
      security: []
      operationId: getTransfersByTransferDayId
      parameters:
        - name: transferDayId
          in: query
          required: true
          description: Id of the transfer day.
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransfersResponseBody"
        400:
          $ref: '#/components/responses/BadRequest'
        500:
          $ref: '#/components/responses/InternalServerError'

# Components -----------------------------------------------------------------------------------------------------------

components:

  # Responses ----------------------------------------------------------------------------------------------------------

  responses:

    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BadRequestResponseBody'

    Unauthorized:
      description: Unauthorized

    Forbidden:
      description: Forbidden

    NotFound:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotFoundResponseBody'

    Conflict:
      description: Conflict
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ConflictResponseBody'

    InternalServerError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InternalServerErrorResponseBody'

  # Schemas ------------------------------------------------------------------------------------------------------------

  schemas:

    # General request/response bodies ----------------------------------------------------------------------------------

    InternalServerErrorResponseBody:
      type: object
      required:
        - uuid
        - timestamp
        - status
        - error
        - message
        - path
      properties:
        uuid:
          type: string
          format: uuid
        timestamp:
          type: string
          format: date-time
          description: Date and time the error happened.
          example: "1970-01-01T00:00:00.000000"
        status:
          type: integer
          format: int32
        error:
          type: string
        message:
          type: string
        path:
          type: string

    BadRequestResponseBody:
      type: object
      required:
        - timestamp
        - error
        - method
        - path
        - validationErrors
      properties:
        timestamp:
          type: string
          format: date-time
          description: Date and time the error happened.
          example: "1970-01-01T00:00:00.000000"
        error:
          type: string
        method:
          type: string
        path:
          type: string
        validationErrors:
          type: array
          items:
            $ref: '#/components/schemas/ValidationError'

    ValidationError:
      type: object
      required:
        - property
        - error
      properties:
        property:
          type: string
        error:
          type: string

    NotFoundResponseBody:
      type: object
      required:
        - timestamp
        - error
        - resource
        - id
        - method
        - path
      properties:
        timestamp:
          type: string
          format: date-time
          description: Date and time the error happened.
          example: "1970-01-01T00:00:00.000000"
        error:
          type: string
        resource:
          type: string
        id:
          $ref: '#/components/schemas/Id'
        method:
          type: string
        path:
          type: string

    ConflictResponseBody:
      type: object
      required:
        - timestamp
        - error
        - message
        - method
        - path
      properties:
        timestamp:
          type: string
          format: date-time
          description: Date and time the error happened.
          example: "1970-01-01T00:00:00.000000"
        error:
          type: string
        message:
          type: string
        method:
          type: string
        path:
          type: string

    # Base DTOs --------------------------------------------------------------------------------------------------------

    Id:
      type: integer
      format: int64

    Status:
      type: string
      enum:
        - 'Pending'
        - 'Active'
        - 'Full Time'
        - 'Finished'
        - 'Postponed'

    Lineup:
      type: string
      enum:
        - 'DID_NOT_PARTICIPATE'
        - 'SUBSTITUTE'
        - 'STARTING_LINEUP'

    # Security ---------------------------------------------------------------------------------------------------------

    AuthenticationRequestBody:
      type: object
      required:
        - username
        - password
        - persistent
      properties:
        username:
          type: string
        password:
          type: string
        persistent:
          type: boolean
          default: false

    AuthenticationResponseBody:
      type: object
      required:
        - user
        - jwt
        - expiresAt
        - persistent
      properties:
        user:
          $ref: '#/components/schemas/User'
        jwt:
          type: string
        expiresAt:
          type: string
          format: date-time
        persistent:
          type: boolean

    AuthorizationResponseBody:
      required:
        - user
        - jwt
        - expiresAt
        - persistent
      properties:
        user:
          $ref: '#/components/schemas/User'
        jwt:
          type: string
        expiresAt:
          type: string
          format: date-time
        persistent:
          type: boolean

    UnauthorizationResponseBody:
      required:
        - loggedOut
      properties:
        loggedOut:
          type: boolean

    RequestPasswordResetRequestBody:
      required:
        - email
        - link
      properties:
        email:
          type: string
          format: email
        link:
          type: string

    ResetPasswordRequestBody:
      required:
        - email
        - password
        - resetPasswordToken
      properties:
        email:
          type: string
          format: email
        password:
          type: string
        resetPasswordToken:
          type: string
          format: uuid

    # User -------------------------------------------------------------------------------------------------------------

    User:
      type: object
      required:
        - name
        - administrator
      properties:
        name:
          type: string
        administrator:
          type: boolean

    CreateUserRequestBody:
      type: object
      required:
        - name
        - email
        - password
        - confirmPassword
      properties:
        name:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
        confirmPassword:
          type: string

    UpdateUserRequestBody:
      type: object
      required:
        - currentPassword
        - password
        - confirmPassword
      properties:
        currentPassword:
          type: string
        password:
          type: string
        confirmPassword:
          type: string

    UserResponseBody:
      type: object
      required:
        - user
      properties:
        user:
          $ref: '#/components/schemas/User'

    # Country ----------------------------------------------------------------------------------------------------------

    Country:
      type: object
      required:
        - id
        - name
        - iso
      properties:
        id:
          $ref: '#/components/schemas/Id'
        name:
          type: string
        iso:
          type: string
          pattern: ^[A-Z]{2}$

    CountriesResponseBody:
      type: object
      required:
        - countries
      properties:
        countries:
          type: array
          items:
            $ref: '#/components/schemas/Country'

    # Stadium ----------------------------------------------------------------------------------------------------------

    Stadium:
      type: object
      required:
        - id
        - name
        - city
        - capacity
        - opened
        - photoFileName
      properties:
        id:
          $ref: '#/components/schemas/Id'
        name:
          type: string
        city:
          type: string
        capacity:
          type: integer
          format: int32
        opened:
          type: integer
          format: int32
        photoFileName:
          type: string

    # Team -------------------------------------------------------------------------------------------------------------

    TeamBase:
      type: object
      required:
        - id
        - name
        - shortName
        - code
        - dummy
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        shortName:
          type: string
        code:
          type: string
        dummy:
          type: boolean
        photoFileName:
          type: string

    Team:
      type: object
      required:
        - id
        - whoscoredId
        - premierLeagueId
        - name
        - shortName
        - code
        - established
        - colour
        - dummy
        - url
      properties:
        id:
          $ref: '#/components/schemas/Id'
        whoscoredId:
          type: integer
          format: int32
        premierLeagueId:
          type: integer
          format: int32
        name:
          type: string
        shortName:
          type: string
        code:
          type: string
          pattern: ^[A-Z]{3}$
        established:
          type: integer
          format: int32
        color:
          type: string
        dummy:
          type: boolean
        photoFileName:
          type: string
        url:
          type: string

    TeamResponseBody:
      type: object
      required:
        - team
        - stadium
      properties:
        team:
          $ref: '#/components/schemas/Team'
        stadium:
          $ref: '#/components/schemas/Stadium'

    TeamsResponseBody:
      type: object
      required:
        - teams
      properties:
        teams:
          type: array
          items:
            $ref: '#/components/schemas/TeamBase'

    # D11Team ----------------------------------------------------------------------------------------------------------

    D11Team:
      type: object
      required:
        - id
        - name
        - shortName
        - code
        - dummy
        - photoFileName
      properties:
        id:
          $ref: '#/components/schemas/Id'
        name:
          type: string
        shortName:
          type: string
        code:
          type: string
          pattern: ^[A-Z]{3}$
        dummy:
          type: boolean
        photoFileName:
          type: string

    D11TeamResponseBody:
      type: object
      required:
        - d11Team
      properties:
        d11Team:
          $ref: '#/components/schemas/D11Team'

    D11TeamsResponseBody:
      type: object
      required:
        - d11Teams
      properties:
        d11Teams:
          type: array
          items:
            $ref: '#/components/schemas/D11Team'

    # D11 team ---------------------------------------------------------------------------------------------------------

    D11TeamBase:
      type: object
      required:
        - id
        - name
        - shortName
        - code
        - dummy
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        shortName:
          type: string
        code:
          type: string
        dummy:
          type: boolean
        photoFileName:
          type: string

    # Player -----------------------------------------------------------------------------------------------------------

    PlayerBase:
      type: object
      required:
        - id
        - firstName
        - lastName
        - name
        - shortName
        - parameterizedName
      properties:
        id:
          type: integer
          format: int64
        firstName:
          type: string
        lastName:
          type: string
        name:
          type: string
        shortName:
          type: string
        parameterizedName:
          type: string
        photoFileName:
          type: string

    Player:
      allOf:
        - $ref: '#/components/schemas/PlayerBase'
        - type: object
          required:
            - whoscoredId
            - premierLeagueId
            - dateOfBirth
            - height
            - verified
            - country
          properties:
            whoscoredId:
              type: integer
              format: int32
            premierLeagueId:
              type: integer
              format: int32
            fullName:
              type: string
            dateOfBirth:
              type: string
              format: date
            height:
              type: integer
              format: int32
            verified:
              type: boolean
            photoFileName:
              type: string
            country:
              $ref: '#/components/schemas/Country'

    PlayerInput:
      type: object
      required:
        - firstName
        - lastName
        - whoscoredId
        - premierLeagueId
        - fullName
        - dateOfBirth
        - height
        - verified
        - country
      properties:
        firstName:
          type: string
        lastName:
          type: string
        whoscoredId:
          type: integer
          format: int32
        premierLeagueId:
          type: integer
          format: int32
        fullName:
          type: string
        dateOfBirth:
          type: string
          format: date
        height:
          type: integer
          format: int32
        verified:
          type: boolean
        country:
          $ref: '#/components/schemas/Country'

    PlayerSearchResult:
      type: object
      required:
        - id
        - name
        - teamId
        - teamName
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        teamId:
          type: integer
          format: int64
        teamName:
          type: string

    PlayerRequestBody:
      type: object
      required:
        - player
      properties:
        player:
          $ref: '#/components/schemas/Player'

    PlayerInputRequestBody:
      type: object
      required:
        - player
      properties:
        player:
          $ref: '#/components/schemas/PlayerInput'

    PlayerResponseBody:
      type: object
      required:
        - player
      properties:
        player:
          $ref: '#/components/schemas/Player'

    PlayerSearchResultsResponseBody:
      type: object
      required:
        - players
      properties:
        players:
          type: array
          items:
            $ref: '#/components/schemas/PlayerSearchResult'

    # Position----------------------------------------------------------------------------------------------------------

    Position:
      type: object
      required:
        - id
        - name
        - code
        - maxCount
        - defender
        - sortOrder
      properties:
        id:
          $ref: '#/components/schemas/Id'
        name:
          type: string
        code:
          type: string
          pattern: ^[A-Z]{1,2}$
        maxCount:
          type: integer
          format: int32
        defender:
          type: boolean
        sortOrder:
          type: integer
          format: int32

    PositionsResponseBody:
      type: object
      required:
        - positions
      properties:
        positions:
          type: array
          items:
            $ref: '#/components/schemas/Position'

    # Season -----------------------------------------------------------------------------------------------------------

    Season:
      type: object
      required:
        - name
        - d11TeamBudget
        - d11TeamMaxTransfers
        - status
        - date
        - legacy
      properties:
        id:
          $ref: '#/components/schemas/Id'
        name:
          type: string
          pattern: \d{4}-\d{4}
        shortName:
          type: string
          pattern: \d{2}-\d{2}
        d11TeamBudget:
          type: integer
          format: int32
        d11TeamMaxTransfers:
          type: integer
          format: int32
        status:
          $ref: '#/components/schemas/Status'
        date:
          type: string
          format: date
        legacy:
          type: boolean

    UpdateSeasonRequestBody:
      type: object
      required:
        - season
      properties:
        season:
          $ref: '#/components/schemas/Season'

    SeasonResponseBody:
      type: object
      required:
        - season
      properties:
        season:
          $ref: '#/components/schemas/Season'

    SeasonsResponseBody:
      type: object
      required:
        - seasons
      properties:
        seasons:
          type: array
          items:
            $ref: '#/components/schemas/Season'

  # Match week ---------------------------------------------------------------------------------------------------------

    MatchWeekBase:
      type: object
      required:
        - id
        - matchWeekNumber
      properties:
        id:
          $ref: '#/components/schemas/Id'
        matchWeekNumber:
          type: integer
          format: int32

    MatchWeek:
      allOf:
        - $ref: '#/components/schemas/MatchWeekBase'
        - type: object
          required:
            - date
            - elapsed
            - status
          properties:
            date:
              type: string
              format: date
            elapsed:
              type: integer
              format: int32
            status:
              $ref: '#/components/schemas/Status'
            mostValuablePlayer:
              $ref: '#/components/schemas/MostValuablePlayer'

    MatchWeekResponseBody:
      type: object
      required:
        - matchWeek
      properties:
        matchWeek:
          $ref: '#/components/schemas/MatchWeek'

    MatchWeeksResponseBody:
      type: object
      required:
        - matchWeeks
      properties:
        matchWeeks:
          type: array
          items:
            $ref: '#/components/schemas/MatchWeek'

    # Match ------------------------------------------------------------------------------------------------------------

    MatchBase:
      type: object
      required:
        - id
        - datetime
        - home_team_goals_scored
        - away_team_goals_scored
        - homeTeam
        - awayTeam
        - matchWeek
      properties:
        id:
          $ref: '#/components/schemas/Id'
        datetime:
          type: string
          format: date-time
        homeTeamGoalsScored:
          type: integer
          format: int32
        awayTeamGoalsScored:
          type: integer
          format: int32
        homeTeam:
          $ref: '#/components/schemas/TeamBase'
        awayTeam:
          $ref: '#/components/schemas/TeamBase'
        matchWeek:
          $ref: '#/components/schemas/MatchWeekBase'

    Match:
      allOf:
        - $ref: '#/components/schemas/MatchBase'
        - type: object
          required:
            - whoscoredId
            - previous_home_team_goals_scored
            - previous_away_team_goals_scored
            - elapsed
            - status
          properties:
            whoscoredId:
              type: integer
              format: int64
            previousHomeTeamGoalsScored:
              type: integer
              format: int32
            previousAwayTeamGoalsScored:
              type: integer
              format: int32
            elapsed:
              type: string
            status:
              $ref: '#/components/schemas/Status'
            homeTeamGoals:
              type: array
              items:
                $ref: "#/components/schemas/GoalBase"
            awayTeamGoals:
              type: array
              items:
                $ref: "#/components/schemas/GoalBase"

    MatchResponseBody:
      type: object
      required:
        - match
        - stadium
      properties:
        match:
          $ref: '#/components/schemas/Match'
        stadium:
          $ref: '#/components/schemas/Stadium'

    MatchesResponseBody:
      type: object
      required:
        - matches
      properties:
        matches:
          type: array
          items:
            $ref: '#/components/schemas/MatchBase'

    # D11 match --------------------------------------------------------------------------------------------------------

    D11MatchBase:
      type: object
      required:
        - id
        - datetime
        - home_team_goals_scored
        - away_team_goals_scored
        - home_team_points
        - away_team_points
        - homeD11Team
        - awayD11Team
        - matchWeek
      properties:
        id:
          $ref: '#/components/schemas/Id'
        datetime:
          type: string
          format: date-time
        homeTeamGoalsScored:
          type: integer
          format: int32
        awayTeamGoalsScored:
          type: integer
          format: int32
        homeTeamPoints:
          type: integer
          format: int32
        awayTeamPoints:
          type: integer
          format: int32
        homeD11Team:
          $ref: '#/components/schemas/D11TeamBase'
        awayD11Team:
          $ref: '#/components/schemas/D11TeamBase'
        matchWeek:
          $ref: '#/components/schemas/MatchWeekBase'

    D11Match:
      allOf:
        - $ref: '#/components/schemas/D11MatchBase'
        - type: object
          required:
            - previous_home_team_goals_scored
            - previous_away_team_goals_scored
            - previous_home_team_points
            - previous_away_team_points
            - elapsed
            - status
          properties:
            previousHomeTeamGoalsScored:
              type: integer
              format: int32
            previousAwayTeamGoalsScored:
              type: integer
              format: int32
            previousHomeTeamPoints:
              type: integer
              format: int32
            previousAwayTeamPoints:
              type: integer
              format: int32
            elapsed:
              type: string
            status:
              $ref: '#/components/schemas/Status'

    D11MatchResponseBody:
      type: object
      required:
        - d11Match
      properties:
        d11Match:
          $ref: '#/components/schemas/D11Match'

    D11MatchesResponseBody:
      type: object
      required:
        - d11Matches
      properties:
        d11Matches:
          type: array
          items:
            $ref: '#/components/schemas/D11MatchBase'

    # Goal -------------------------------------------------------------------------------------------------------------

    GoalBase:
      type: object
      required:
        - id
        - time
        - addedTime
        - penalty
        - ownGoal
        - player
      properties:
        id:
          $ref: '#/components/schemas/Id'
        time:
          type: integer
          format: int32
        addedTime:
          type: integer
          format: int32
        penalty:
          type: boolean
        ownGoal:
          type: boolean
        player:
          $ref: '#/components/schemas/PlayerBase'

    Goal:
      allOf:
        - $ref: '#/components/schemas/GoalBase'
        - type: object
          required:
            - match
            - team
          properties:
            match:
             $ref: '#/components/schemas/MatchBase'
            team:
              $ref: '#/components/schemas/TeamBase'

    # Player season stat -----------------------------------------------------------------------------------------------

    PlayerSeasonStat:
      type: object
      required:
        - id
        - shirtNumber
        - fee
        - ranking
        - points
        - formPoints
        - formMatchPoints
        - pointsPerAppearance
        - goals
        - goalAssists
        - ownGoals
        - goalsConceded
        - cleanSheets
        - yellowCards
        - redCards
        - substitutionsOn
        - substitutionsOff
        - manOfTheMatch
        - sharedManOfTheMatch
        - rating
        - gamesStarted
        - gamesSubstitute
        - gamesDidNotParticipate
        - minutesPlayed
        - player
        - season
        - team
        - d11Team
        - position
      properties:
        id:
          type: integer
          format: int64
        shirtNumber:
          type: integer
          format: int32
        fee:
          type: integer
          format: int32
        winCount:
          type: integer
          format: int32
        ranking:
          type: integer
          format: int32
        points:
          type: integer
          format: int32
        formPoints:
          type: integer
          format: int32
        formMatchPoints:
          type: array
          items:
            type: integer
            format: int32
        pointsPerAppearance:
          type: integer
          format: int32
        goals:
          type: integer
          format: int32
        goalAssists:
          type: integer
          format: int32
        ownGoals:
          type: integer
          format: int32
        goalsConceded:
          type: integer
          format: int32
        cleanSheets:
          type: integer
          format: int32
        yellowCards:
          type: integer
          format: int32
        redCards:
          type: integer
          format: int32
        substitutionsOn:
          type: integer
          format: int32
        substitutionsOff:
          type: integer
          format: int32
        manOfTheMatch:
          type: integer
          format: int32
        sharedManOfTheMatch:
          type: integer
          format: int32
        rating:
          type: integer
          format: int32
        gamesStarted:
          type: integer
          format: int32
        gamesSubstitute:
          type: integer
          format: int32
        gamesDidNotParticipate:
          type: integer
          format: int32
        minutesPlayed:
          type: integer
          format: int32
        player:
          $ref: '#/components/schemas/PlayerBase'
        season:
          $ref: '#/components/schemas/Season'
        team:
          $ref: '#/components/schemas/TeamBase'
        d11Team:
          $ref: '#/components/schemas/D11TeamBase'
        position:
          $ref: '#/components/schemas/Position'

    CreatePlayerSeasonStatInput:
      type: object
      required:
        - playerId
        - teamId
        - positionId
      properties:
        playerId:
          $ref: '#/components/schemas/Id'
        teamId:
          $ref: '#/components/schemas/Id'
        positionId:
          $ref: '#/components/schemas/Id'

    CreatePlayerSeasonStatInputRequestBody:
      type: object
      required:
        - playerSeasonStat
      properties:
        playerSeasonStat:
          $ref: '#/components/schemas/CreatePlayerSeasonStatInput'

    PlayerSeasonStatResponseBody:
      type: object
      required:
        - playerSeasonStat
      properties:
        playerSeasonStat:
          $ref: '#/components/schemas/PlayerSeasonStat'

    PlayerSeasonStatsResponseBody:
      type: object
      required:
        - playerSeasonStats
      properties:
        playerSeasonStats:
          type: array
          items:
            $ref: '#/components/schemas/PlayerSeasonStat'

    # Player match stat -----------------------------------------------------------------------------------------------

    PlayerMatchStat:
      type: object
      required:
        - id
        - playedPosition
        - lineup
        - substitutionOnTime
        - substitutionOffTime
        - goals
        - goalAssists
        - ownGoals
        - goalsConceded
        - yellowCardTime
        - redCardTime
        - manOfTheMatch
        - sharedManOfTheMatch
        - rating
        - points
        - player
        - match
        - team
        - d11Team
        - position
      properties:
        id:
          type: integer
          format: int64
        playedPosition:
          type: string
        lineup:
          $ref: '#/components/schemas/Lineup'
        substitutionOnTime:
          type: integer
          format: int32
        substitutionOffTime:
          type: integer
          format: int32
        goals:
          type: integer
          format: int32
        goalAssists:
          type: integer
          format: int32
        ownGoals:
          type: integer
          format: int32
        goalsConceded:
          type: integer
          format: int32
        yellowCardTime:
          type: integer
          format: int32
        redCardTime:
          type: integer
          format: int32
        manOfTheMatch:
          type: integer
          format: int32
        sharedManOfTheMatch:
          type: integer
          format: int32
        rating:
          type: integer
          format: int32
        points:
          type: integer
          format: int32
        player:
          $ref: '#/components/schemas/PlayerBase'
        match:
          $ref: '#/components/schemas/MatchBase'
        team:
          $ref: '#/components/schemas/TeamBase'
        d11Team:
          $ref: '#/components/schemas/D11TeamBase'
        position:
          $ref: '#/components/schemas/Position'

    PlayerMatchStatsResponseBody:
      type: object
      required:
        - playerMatchStats
      properties:
        playerMatchStats:
          type: array
          items:
            $ref: '#/components/schemas/PlayerMatchStat'

    # Most valuable player ---------------------------------------------------------------------------------------------

    MostValuablePlayer:
      type: object
      required:
        - points
        - goals
        - player
        - team
        - d11Team
      properties:
        points:
          type: integer
          format: int32
        goals:
          type: integer
          format: int32
        player:
          $ref: '#/components/schemas/PlayerBase'
        team:
          $ref: '#/components/schemas/TeamBase'
        d11Team:
          $ref: '#/components/schemas/D11TeamBase'

    # Team season stat ---------------------------------------------------------------------------------------------

    TeamSeasonStat:
      type: object
      required:
        - id
        - winCount
        - matchesPlayed
        - matchesWon
        - matchesDrawn
        - matchesLost
        - goalsFor
        - goalsAgainst
        - goalDifference
        - points
        - formPoints
        - formMatchPoints
        - ranking
        - previousRanking
        - team
        - season
      properties:
        id:
          type: integer
          format: int64
        winCount:
          type: integer
          format: int32
        matchesPlayed:
          type: integer
          format: int32
        matchesWon:
          type: integer
          format: int32
        matchesDrawn:
          type: integer
          format: int32
        matchesLost:
          type: integer
          format: int32
        goalsFor:
          type: integer
          format: int32
        goalsAgainst:
          type: integer
          format: int32
        goalDifference:
          type: integer
          format: int32
        points:
          type: integer
          format: int32
        formPoints:
          type: integer
          format: int32
        formMatchPoints:
          type: array
          items:
            type: integer
            format: int32
        ranking:
          type: integer
          format: int32
        previousRanking:
          type: integer
          format: int32
        team:
          $ref: '#/components/schemas/TeamBase'
        season:
          $ref: '#/components/schemas/Season'

    TeamSeasonStatResponseBody:
      type: object
      required:
        - teamSeasonStat
      properties:
        teamSeasonStat:
          $ref: '#/components/schemas/TeamSeasonStat'

    TeamSeasonStatsResponseBody:
      type: object
      required:
        - teamSeasonStats
      properties:
        teamSeasonStats:
          type: array
          items:
            $ref: '#/components/schemas/TeamSeasonStat'

    # D11 team season stat ---------------------------------------------------------------------------------------------

    D11TeamSeasonStat:
      type: object
      required:
        - id
        - winCount
        - matchesPlayed
        - matchesWon
        - matchesDrawn
        - matchesLost
        - goalsFor
        - goalsAgainst
        - goalDifference
        - points
        - formPoints
        - formMatchPoints
        - ranking
        - previousRanking
        - d11Team
        - season
      properties:
        id:
          type: integer
          format: int64
        winCount:
          type: integer
          format: int32
        matchesPlayed:
          type: integer
          format: int32
        matchesWon:
          type: integer
          format: int32
        matchesDrawn:
          type: integer
          format: int32
        matchesLost:
          type: integer
          format: int32
        goalsFor:
          type: integer
          format: int32
        goalsAgainst:
          type: integer
          format: int32
        goalDifference:
          type: integer
          format: int32
        points:
          type: integer
          format: int32
        formPoints:
          type: integer
          format: int32
        formMatchPoints:
          type: array
          items:
            type: integer
            format: int32
        ranking:
          type: integer
          format: int32
        previousRanking:
          type: integer
          format: int32
        d11Team:
          $ref: '#/components/schemas/D11TeamBase'
        season:
          $ref: '#/components/schemas/Season'

    D11TeamSeasonStatResponseBody:
      type: object
      required:
        - d11TeamSeasonStat
      properties:
        d11TeamSeasonStat:
          $ref: '#/components/schemas/D11TeamSeasonStat'

    D11TeamSeasonStatsResponseBody:
      type: object
      required:
        - d11TeamSeasonStats
      properties:
        d11TeamSeasonStats:
          type: array
          items:
            $ref: '#/components/schemas/D11TeamSeasonStat'

    # Transfer window --------------------------------------------------------------------------------------------------

    TransferWindow:
      type: object
      required:
        - id
        - datetime
        - draft
        - status
        - datetime
      properties:
        id:
          $ref: '#/components/schemas/Id'
        transferWindowNumber:
          type: integer
          format: int32
        draft:
          type: boolean
        status:
          $ref: '#/components/schemas/Status'
        datetime:
          type: string
          format: date-time

    CreateTransferWindowRequestBody:
      type: object
      required:
        - datetime
        - transferDayDelay
      properties:
        datetime:
          type: string
          format: date-time
        transferDayDelay:
          type: integer
          format: int32

    TransferWindowResponseBody:
      type: object
      required:
        - transferWindow
        - matchWeek
      properties:
        transferWindow:
          $ref: '#/components/schemas/TransferWindow'
        matchWeek:
          $ref: '#/components/schemas/MatchWeekBase'
        transferDays:
          type: array
          items:
            $ref: '#/components/schemas/TransferDay'

    TransferWindowsResponseBody:
      type: object
      required:
        - transferWindows
      properties:
        transferWindows:
          type: array
          items:
            $ref: '#/components/schemas/TransferWindow'

    # Transfer day -------------------------------------------------------------------------------------------------------

    TransferDay:
      type: object
      required:
        - id
        - transferDayNumber
        - status
        - datetime
      properties:
        id:
          $ref: '#/components/schemas/Id'
        transferDayNumber:
          type: integer
          format: int32
        status:
          $ref: '#/components/schemas/Status'
        datetime:
          type: string
          format: date-time

    TransferDayResponseBody:
      type: object
      required:
        - transferDay
        - transferWindow
        - matchWeek
      properties:
        transferDay:
          $ref: '#/components/schemas/TransferDay'
        transferWindow:
          $ref: '#/components/schemas/TransferWindow'
        matchWeek:
          $ref: '#/components/schemas/MatchWeek'

    TransferDaysResponseBody:
      type: object
      required:
        - transferDays
      properties:
        transferDays:
          type: array
          items:
            $ref: '#/components/schemas/TransferDay'

  # Transfer listing ---------------------------------------------------------------------------------------------------

    TransferListing:
      type: object
      required:
        - id
        - ranking
        - points
        - formPoints
        - formMatchPoints
        - pointsPerAppearance
        - goals
        - goalAssists
        - ownGoals
        - goalsConceded
        - cleanSheets
        - yellowCards
        - redCards
        - substitutionsOn
        - substitutionsOff
        - manOfTheMatch
        - sharedManOfTheMatch
        - rating
        - gamesStarted
        - gamesSubstitute
        - gamesDidNotParticipate
        - minutesPlayed
        - player
        - team
        - d11Team
        - position
        - newPlayer
      properties:
        id:
          type: integer
          format: int64
        ranking:
          type: integer
          format: int32
        points:
          type: integer
          format: int32
        formPoints:
          type: integer
          format: int32
        formMatchPoints:
          type: array
          items:
            type: integer
            format: int32
        pointsPerAppearance:
          type: integer
          format: int32
        goals:
          type: integer
          format: int32
        goalAssists:
          type: integer
          format: int32
        ownGoals:
          type: integer
          format: int32
        goalsConceded:
          type: integer
          format: int32
        cleanSheets:
          type: integer
          format: int32
        yellowCards:
          type: integer
          format: int32
        redCards:
          type: integer
          format: int32
        substitutionsOn:
          type: integer
          format: int32
        substitutionsOff:
          type: integer
          format: int32
        manOfTheMatch:
          type: integer
          format: int32
        sharedManOfTheMatch:
          type: integer
          format: int32
        rating:
          type: integer
          format: int32
        gamesStarted:
          type: integer
          format: int32
        gamesSubstitute:
          type: integer
          format: int32
        gamesDidNotParticipate:
          type: integer
          format: int32
        minutesPlayed:
          type: integer
          format: int32
        newPlayer:
          type: boolean
        player:
          $ref: '#/components/schemas/PlayerBase'
        team:
          $ref: '#/components/schemas/TeamBase'
        d11Team:
          $ref: '#/components/schemas/D11TeamBase'
        position:
          $ref: '#/components/schemas/Position'

    TransferListingsResponseBody:
      type: object
      required:
        - transferListings
      properties:
        transferListings:
          type: array
          items:
            $ref: '#/components/schemas/TransferListing'

  # Transfer bid -------------------------------------------------------------------------------------------------------

    TransferBid:
      type: object
      required:
        - id
        - playerRanking
        - d11TeamRanking
        - fee
        - activeFee
        - successful
        - player
        - d11Team
      properties:
        id:
          type: integer
          format: int64
        playerRanking:
          type: integer
          format: int32
        d11TeamRanking:
          type: integer
          format: int32
        fee:
          type: integer
          format: int32
        activeFee:
          type: integer
          format: int32
        successful:
          type: boolean
        player:
          $ref: '#/components/schemas/PlayerBase'
        d11Team:
          $ref: '#/components/schemas/D11TeamBase'

    TransferBidsResponseBody:
      type: object
      required:
        - transferBids
      properties:
        transferBids:
          type: array
          items:
            $ref: '#/components/schemas/TransferBid'

    # Transfer ---------------------------------------------------------------------------------------------------------

    Transfer:
      type: object
      required:
        - id
        - fee
        - transferDay
        - player
        - d11Team
      properties:
        id:
          type: integer
          format: int64
        fee:
          type: integer
          format: int32
        transferDay:
          $ref: '#/components/schemas/TransferDay'
        player:
          $ref: '#/components/schemas/PlayerBase'
        d11Team:
          $ref: '#/components/schemas/D11TeamBase'

    TransfersResponseBody:
      type: object
      required:
        - transfers
      properties:
        transfers:
          type: array
          items:
            $ref: '#/components/schemas/Transfer'

  # Security schemes ---------------------------------------------------------------------------------------------------

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
