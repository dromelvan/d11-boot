openapi: 3.0.3
info:
  version: 2.0.0
  title: D11 API
  description: API for the D11 Spring Boot application
  license:
    name: MIT
servers:
  - url: http://localhost:8080


# Paths ----------------------------------------------------------------------------------------------------------------

paths:

  # Security -----------------------------------------------------------------------------------------------------------

  /v2/security/authenticate:
    post:
      tags:
        - security
      summary: Authenticate a user by username/password.
      operationId: authenticate
      requestBody:
        description: User authentication properties.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthenticationRequestBody"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationResponseBody"
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        500:
          $ref: '#/components/responses/InternalServerError'

  /v2/security/authorize:
    post:
      tags:
        - security
      summary: Authorize a user by refresh token.
      operationId: authorize
      parameters:
        - in: cookie
          name: refreshToken
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthorizationResponseBody"
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        500:
          $ref: '#/components/responses/InternalServerError'

  /v2/security/unauthorize:
    post:
      tags:
        - security
      summary: Unauthorize a user by invalidating the refresh token and removing the cookie.
      operationId: unauthorize
      parameters:
        - in: cookie
          name: refreshToken
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizationResponseBody"
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        500:
          $ref: '#/components/responses/InternalServerError'

  /v2/security/request-password-reset:
    post:
      tags:
        - security
      summary: Request a password reset for a user.
      operationId: requestPasswordReset
      requestBody:
        description: User request password reset properties.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RequestPasswordResetRequestBody"
      responses:
        200:
          description: OK
        400:
          $ref: '#/components/responses/BadRequest'
        500:
          $ref: '#/components/responses/InternalServerError'

  /v2/security/reset-password:
    post:
      tags:
        - security
      summary: Reset a password for a user.
      operationId: resetPassword
      requestBody:
        description: Reset user password properties.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ResetPasswordRequestBody"
      responses:
        200:
          description: OK
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        500:
          $ref: '#/components/responses/InternalServerError'

  # User ---------------------------------------------------------------------------------------------------------------

  /v2/users:
    post:
      tags:
        - user
      summary: Creates a user.
      operationId: createUser
      requestBody:
        description: User registration properties.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUserRequestBody"
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponseBody"
        400:
          $ref: '#/components/responses/BadRequest'
        409:
          $ref: '#/components/responses/Conflict'
        500:
          $ref: '#/components/responses/InternalServerError'

  /v2/users/{userId}:
    put:
      tags:
        - user
      summary: Updates a users password.
      security:
        - BearerAuth: [user]
      operationId: updateUser
      parameters:
        - name: userId
          in: path
          required: true
          description: Id of the user that will be updated.
          schema:
            type: integer
            format: int64
      requestBody:
        description: Update user password.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUserRequestBody"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponseBody"
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'

  # Season -------------------------------------------------------------------------------------------------------------

  /v2/seasons:
    get:
      tags:
        - season
      summary: Gets all seasons.
      security: []
      operationId: getSeasons
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SeasonsResponseBody"
        500:
          $ref: '#/components/responses/InternalServerError'

  /v2/seasons/{seasonId}:
    get:
      tags:
        - season
      summary: Get a season by id.
      security: []
      operationId: getSeasonById
      parameters:
        - name: seasonId
          in: path
          required: true
          description: Id of the season.
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SeasonResponseBody"
        400:
          $ref: '#/components/responses/BadRequest'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'

    put:
      tags:
        - season
      summary: Updates a season.
      security:
        - BearerAuth: [admin]
      operationId: updateSeason
      parameters:
        - name: seasonId
          in: path
          required: true
          description: Id of the season that will be updated.
          schema:
            type: integer
            format: int64
      requestBody:
        description: Update season properties.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateSeasonRequestBody"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SeasonResponseBody"
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'

  /v2/seasons/current:
    get:
      tags:
        - season
      summary: Gets the current season.
      security: []
      operationId: getCurrentSeason
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SeasonResponseBody"
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'

  # Transfer window-----------------------------------------------------------------------------------------------------

  /v2/transfer-windows:
    post:
      tags:
        - transferWindow
      summary: Creates a transfer window.
      security:
        - BearerAuth: [admin]
      operationId: createTransferWindow
      requestBody:
        description: New transfer window properties.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateTransferWindowRequestBody"
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransferWindowResponseBody"
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        409:
          $ref: '#/components/responses/Conflict'
        500:
          $ref: '#/components/responses/InternalServerError'

  /v2/transfer-windows/{transferWindowId}:
    get:
      tags:
        - transferWindow
      summary: Get a transfer window by id.
      security: []
      operationId: getTransferWindowById
      parameters:
        - name: transferWindowId
          in: path
          required: true
          description: Id of the transfer window.
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransferWindowResponseBody"
        400:
          $ref: '#/components/responses/BadRequest'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'

    delete:
      tags:
        - transferWindow
      summary: Deletes a transfer window.
      security:
        - BearerAuth: [admin]
      operationId: deleteTransferWindow
      parameters:
        - name: transferWindowId
          in: path
          required: true
          description: Id of the transfer window that will be deleted.
          schema:
            type: integer
            format: int64
      responses:
        204:
          description: No Content
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        409:
          $ref: '#/components/responses/Conflict'
        500:
          $ref: '#/components/responses/InternalServerError'

# Components -----------------------------------------------------------------------------------------------------------

components:

  # Responses ----------------------------------------------------------------------------------------------------------

  responses:

    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BadRequestResponseBody'

    Unauthorized:
      description: Unauthorized

    Forbidden:
      description: Forbidden

    NotFound:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotFoundResponseBody'

    Conflict:
      description: Conflict
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ConflictResponseBody'

    InternalServerError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/D11ApiError'

  # Schemas ------------------------------------------------------------------------------------------------------------

  schemas:

    # General request/response bodies ----------------------------------------------------------------------------------

    D11ApiError:
      type: object
      required:
        - uuid
        - timestamp
        - status
        - error
        - message
        - path
      properties:
        uuid:
          type: string
          format: uuid
        timestamp:
          type: string
          format: date-time
          description: Date and time the error happened.
          example: "1970-01-01T00:00:00.000000"
        status:
          type: integer
          format: int32
        error:
          type: string
        message:
          type: string
        path:
          type: string

    BadRequestResponseBody:
      type: object
      required:
        - timestamp
        - error
        - method
        - path
        - validationErrors
      properties:
        timestamp:
          type: string
          format: date-time
          description: Date and time the error happened.
          example: "1970-01-01T00:00:00.000000"
        error:
          type: string
        method:
          type: string
        path:
          type: string
        validationErrors:
          type: array
          items:
            $ref: '#/components/schemas/ValidationError'

    ValidationError:
      type: object
      required:
        - property
        - error
      properties:
        property:
          type: string
        error:
          type: string

    NotFoundResponseBody:
      type: object
      required:
        - timestamp
        - error
        - resource
        - id
        - method
        - path
      properties:
        timestamp:
          type: string
          format: date-time
          description: Date and time the error happened.
          example: "1970-01-01T00:00:00.000000"
        error:
          type: string
        resource:
          type: string
        id:
          $ref: '#/components/schemas/Id'
        method:
          type: string
        path:
          type: string

    ConflictResponseBody:
      type: object
      required:
        - timestamp
        - error
        - message
        - method
        - path
      properties:
        timestamp:
          type: string
          format: date-time
          description: Date and time the error happened.
          example: "1970-01-01T00:00:00.000000"
        error:
          type: string
        message:
          type: string
        method:
          type: string
        path:
          type: string

    # Base DTOs --------------------------------------------------------------------------------------------------------

    Id:
      type: integer
      format: int64

    Status:
      type: string
      enum:
        - 'Pending'
        - 'Active'
        - 'Full Time'
        - 'Finished'
        - 'Postponed'

    # Security ---------------------------------------------------------------------------------------------------------

    AuthenticationRequestBody:
      type: object
      required:
        - username
        - password
        - persistent
      properties:
        username:
          type: string
        password:
          type: string
        persistent:
          type: boolean
          default: false

    AuthenticationResponseBody:
      type: object
      required:
        - user
        - jwt
        - expiresAt
        - persistent
      properties:
        user:
          $ref: '#/components/schemas/User'
        jwt:
          type: string
        expiresAt:
          type: string
          format: date-time
        persistent:
          type: boolean

    AuthorizationResponseBody:
      required:
        - user
        - jwt
        - expiresAt
        - persistent
      properties:
        user:
          $ref: '#/components/schemas/User'
        jwt:
          type: string
        expiresAt:
          type: string
          format: date-time
        persistent:
          type: boolean

    UnauthorizationResponseBody:
      required:
        - loggedOut
      properties:
        loggedOut:
          type: boolean

    RequestPasswordResetRequestBody:
      required:
        - email
        - link
      properties:
        email:
          type: string
          format: email
        link:
          type: string

    ResetPasswordRequestBody:
      required:
        - email
        - password
        - resetPasswordToken
      properties:
        email:
          type: string
          format: email
        password:
          type: string
        resetPasswordToken:
          type: string
          format: uuid

    # User -------------------------------------------------------------------------------------------------------------

    User:
      type: object
      required:
        - id
        - name
        - administrator
      properties:
        id:
          $ref: '#/components/schemas/Id'
        name:
          type: string
        administrator:
          type: boolean

    CreateUserRequestBody:
      type: object
      required:
        - name
        - email
        - password
        - confirmPassword
      properties:
        name:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
        confirmPassword:
          type: string

    UpdateUserRequestBody:
      type: object
      required:
        - currentPassword
        - password
        - confirmPassword
      properties:
        currentPassword:
          type: string
        password:
          type: string
        confirmPassword:
          type: string

    UserResponseBody:
      type: object
      required:
        - user
      properties:
        user:
          $ref: '#/components/schemas/User'

    # Season -----------------------------------------------------------------------------------------------------------

    Season:
      type: object
      required:
        - name
        - d11TeamBudget
        - d11TeamMaxTransfers
        - status
        - date
        - legacy
      properties:
        id:
          $ref: '#/components/schemas/Id'
        name:
          type: string
          pattern: \d{4}-\d{4}
        shortName:
          type: string
          pattern: \d{2}-\d{2}
        d11TeamBudget:
          type: integer
          format: int32
        d11TeamMaxTransfers:
          type: integer
          format: int32
        status:
          $ref: '#/components/schemas/Status'
        date:
          type: string
          format: date
        legacy:
          type: boolean

    UpdateSeasonRequestBody:
      type: object
      required:
        - season
      properties:
        season:
          $ref: '#/components/schemas/Season'

    SeasonResponseBody:
      type: object
      required:
        - season
      properties:
        season:
          $ref: '#/components/schemas/Season'

    SeasonsResponseBody:
      type: object
      required:
        - seasons
      properties:
        seasons:
          type: array
          items:
            $ref: '#/components/schemas/Season'

  # Match week ---------------------------------------------------------------------------------------------------------

    MatchWeek:
      type: object
      required:
        - id
        - matchWeekNumber
        - date
        - elapsed
        - status
      properties:
        id:
          $ref: '#/components/schemas/Id'
        matchWeekNumber:
          type: integer
          format: int32
        date:
          type: string
          format: date
        elapsed:
          type: integer
          format: int32
        status:
          $ref: '#/components/schemas/Status'

    # Transfer window --------------------------------------------------------------------------------------------------

    TransferWindow:
      type: object
      required:
        - id
        - datetime
        - draft
        - status
        - datetime
      properties:
        id:
          $ref: '#/components/schemas/Id'
        transferWindowNumber:
          type: integer
          format: int32
        draft:
          type: boolean
        status:
          $ref: '#/components/schemas/Status'
        datetime:
          type: string
          format: date-time

    CreateTransferWindowRequestBody:
      type: object
      required:
        - datetime
        - transferDayDelay
      properties:
        datetime:
          type: string
          format: date-time
        transferDayDelay:
          type: integer
          format: int32

    TransferWindowResponseBody:
      type: object
      required:
        - transferWindow
        - matchWeek
      properties:
        transferWindow:
          $ref: '#/components/schemas/TransferWindow'
        matchWeek:
          $ref: '#/components/schemas/MatchWeek'
        transferDays:
          type: array
          items:
            $ref: '#/components/schemas/TransferDay'

    # Transfer day -------------------------------------------------------------------------------------------------------

    TransferDay:
      type: object
      required:
        - id
        - transferDayNumber
        - status
        - datetime
      properties:
        id:
          $ref: '#/components/schemas/Id'
        transferDayNumber:
          type: integer
          format: int32
        status:
          $ref: '#/components/schemas/Status'
        datetime:
          type: string
          format: date-time

  # Security schemes ---------------------------------------------------------------------------------------------------

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
