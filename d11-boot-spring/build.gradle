plugins {
    id 'java-library'
    id 'org.springframework.boot' version "${springBootVersion}"
    id 'io.spring.dependency-management' version "${springDependencyManagementVersion}"
    id 'checkstyle'
    id 'pmd'
    id "com.github.spotbugs" version "${spotBugsPluginVersion}"
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    // Provide EasyRandom test classes to other modules
    testArtifacts {
        canBeResolved = false
        canBeConsumed = true
        extendsFrom testImplementation
    }
}

dependencies {
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapStructVersion}"

    implementation project(':d11-boot-download')
    implementation project(':d11-boot-parser')
    implementation project(':d11-boot-util')

    api 'org.springframework.boot:spring-boot-starter-data-jpa'
    api 'org.springframework.boot:spring-boot-starter-validation'
    api 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    implementation 'org.flywaydb:flyway-core'
    implementation "org.mapstruct:mapstruct:${mapStructVersion}"
    implementation 'org.apache.commons:commons-lang3'
    implementation 'com.github.ben-manes.caffeine:caffeine'
    implementation "com.auth0:java-jwt:${javaJwtVersion}"

    runtimeOnly 'org.postgresql:postgresql'

    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation "org.jeasy:easy-random-core:${easyRandomVersion}"

    runtimeOnly 'com.h2database:h2'
}

test {
    useJUnitPlatform()
}

checkstyle {
    toolVersion "${checkstyleVersion}"
}

pmd {
    ruleSets = []
    ruleSetFiles = rootProject.files("config/pmd/pmd.xml")
}

spotbugs {
    toolVersion = "${spotBugsVersion}"
    excludeFilter.set(file("${project.rootProject.rootDir}/config/spotbugs/exclude.xml"))
}

bootJar {
    enabled = false
}

jar {
    enabled = true
}

// Provide EasyRandom test classes to other modules
tasks.register('testJar', Jar) {
    archiveClassifier = 'tests'
    from sourceSets.test.output
}

artifacts {
    testArtifacts testJar
}
