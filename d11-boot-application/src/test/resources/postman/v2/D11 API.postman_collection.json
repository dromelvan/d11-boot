{
	"info": {
		"_postman_id": "6c3884b6-93da-4056-9766-7feb6441532c",
		"name": "D11 API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "23053206"
	},
	"item": [
		{
			"name": "v2",
			"item": [
				{
					"name": "security",
					"item": [
						{
							"name": "POST security/authenticate",
							"item": [
								{
									"name": "200 OK",
									"item": [
										{
											"name": "POST security/authenticate - Admin Non Persistent",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const moment = require('moment');",
															"",
															"pm.test(\"POST security authenticate admin non persistent status code is 200\", () => {",
															"  pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"POST security authenticate admin non persistent response body\", () => {",
															"  const body = pm.response.json();",
															"  ",
															"  pm.expect(body).to.have.property(\"user\");",
															"",
															"  pm.expect(body.user.name).to.eq(pm.environment.get(\"adminName\"));",
															"",
															"  pm.expect(body).to.have.property(\"jwt\");",
															"  pm.expect(body.jwt).to.match(new RegExp(pm.environment.get(\"jwtRegex\")));",
															"",
															"  pm.expect(body).to.have.property(\"expiresAt\");  ",
															"  let expiresAt = new Date(body.expiresAt);",
															"  pm.expect(isNaN(expiresAt.getTime())).to.eq(false);",
															"",
															"  // It's tricky to define what the JWT expiry time should be exactly since we can't",
															"  // know at what exact instant it is created on the server.So, we'll just check that ",
															"  // it is within one minute of 24 hours from now.",
															"  let now = moment();",
															"  now.add(24 * 60 * 60 - 30, \"seconds\");",
															"  pm.expect(now.isBefore(expiresAt)).to.eq(true);",
															"",
															"  now.add(60, \"seconds\");",
															"  pm.expect(now.isAfter(expiresAt)).to.eq(true);",
															"",
															"  pm.expect(body).to.have.property(\"persistent\");",
															"  pm.expect(body.persistent).to.eq(false);",
															"",
															"  pm.environment.set(\"jwt\", body.jwt);",
															"});",
															"",
															"pm.test(\"POST security authenticate admin non persistent cookie\", () => {",
															"  const cookieJar = pm.cookies.jar();",
															" ",
															"  cookieJar.getAll(pm.environment.get(\"host\"), function (error, cookies) {  ",
															"      pm.expect(cookies.members.length).to.eq(1);",
															"      ",
															"      const cookie = cookies.members[0];",
															"",
															"      pm.expect(cookie.name).to.eq(\"refreshToken\");",
															"      pm.expect(cookie.maxAge).to.eq(24 * 60 * 60);",
															"      pm.expect(cookie.value).to.match(new RegExp(pm.environment.get(\"uuidRegex\")));",
															"  });",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\": \"{{adminUsername}}\",\n    \"password\": \"{{adminPassword}}\",\n    \"persistent\": false\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/security/authenticate",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"security",
														"authenticate"
													]
												}
											},
											"response": []
										},
										{
											"name": "POST security/authenticate - Admin Persistent",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const moment = require('moment');",
															"",
															"pm.test(\"POST security authenticate admin persistent status code is 200\", () => {",
															"  pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"POST security authenticate admin persistent response body\", () => {",
															"  const body = pm.response.json();",
															"  ",
															"  pm.expect(body).to.have.property(\"user\");",
															"  pm.expect(body.user.name).to.eq(pm.environment.get(\"adminName\"));",
															"",
															"  pm.expect(body).to.have.property(\"jwt\");",
															"  pm.expect(body.jwt).to.match(new RegExp(pm.environment.get(\"jwtRegex\")));",
															"",
															"  pm.expect(body).to.have.property(\"expiresAt\");  ",
															"  let expiresAt = new Date(body.expiresAt);",
															"  pm.expect(isNaN(expiresAt.getTime())).to.eq(false); ",
															"",
															"  // It's tricky to define what the JWT expiry time should be exactly since we can't",
															"  // know at what exact instant it is created on the server.So, we'll just check that ",
															"  // it is within one minute of 24 hours from now.",
															"  let date = new Date();",
															"  date.setDate(date.getDate() + 30);",
															"  date.setMinutes(date.getMinutes() - 1);",
															"",
															"  pm.expect(date.isBefore(expiresAt)).to.eq(true);",
															"",
															"  date.setMinutes(date.getMinutes() + 2);",
															"  ",
															"  pm.expect(date.isAfter(expiresAt)).to.eq(true);",
															"",
															"  pm.expect(body).to.have.property(\"persistent\");",
															"  pm.expect(body.persistent).to.eq(true);",
															"",
															"  pm.environment.set(\"jwt\", body.jwt);",
															"});",
															"",
															"pm.test(\"POST security authenticate admin persistent cookie\", () => {",
															"  const cookieJar = pm.cookies.jar();",
															" ",
															"  cookieJar.getAll(pm.environment.get(\"host\"), function (error, cookies) {  ",
															"      pm.expect(cookies.members.length).to.eq(1);",
															"      ",
															"      const cookie = cookies.members[0];",
															"",
															"      pm.expect(cookie.name).to.eq(\"refreshToken\");",
															"      pm.expect(cookie.maxAge).to.eq(30 * 24 * 60 * 60);",
															"      pm.expect(cookie.value).to.match(new RegExp(pm.environment.get(\"uuidRegex\")));",
															"  });",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\": \"{{adminUsername}}\",\n    \"password\": \"{{adminPassword}}\",\n    \"persistent\": true\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/security/authenticate",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"security",
														"authenticate"
													]
												}
											},
											"response": []
										},
										{
											"name": "POST security/authenticate - User Non Persistent",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const moment = require('moment');",
															"",
															"pm.test(\"POST security authenticate user non persistent status code is 200\", () => {",
															"  pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"POST security authenticate user non persistent response body\", () => {",
															"  const body = pm.response.json();",
															"  ",
															"  pm.expect(body).to.have.property(\"user\");",
															"  pm.expect(body.user.name).to.eq(pm.environment.get(\"userName\"));",
															"",
															"  pm.expect(body).to.have.property(\"jwt\");",
															"  pm.expect(body.jwt).to.match(new RegExp(pm.environment.get(\"jwtRegex\")));",
															"",
															"  pm.expect(body).to.have.property(\"expiresAt\");  ",
															"  let expiresAt = new Date(body.expiresAt);",
															"  pm.expect(isNaN(expiresAt.getTime())).to.eq(false);",
															"",
															"  // It's tricky to define what the JWT expiry time should be exactly since we can't",
															"  // know at what exact instant it is created on the server.So, we'll just check that ",
															"  // it is within one minute of 24 hours from now.",
															"  let now = moment();",
															"  now.add(24 * 60 * 60 - 30, \"seconds\");",
															"  pm.expect(now.isBefore(expiresAt)).to.eq(true);",
															"",
															"  now.add(60, \"seconds\");",
															"  pm.expect(now.isAfter(expiresAt)).to.eq(true);",
															"",
															"  pm.expect(body).to.have.property(\"persistent\");",
															"  pm.expect(body.persistent).to.eq(false);",
															"",
															"  pm.environment.set(\"jwt\", body.jwt);",
															"});",
															"",
															"pm.test(\"POST security authenticate user non persistent cookie\", () => {",
															"  const cookieJar = pm.cookies.jar();",
															" ",
															"  cookieJar.getAll(pm.environment.get(\"host\"), function (error, cookies) {  ",
															"      pm.expect(cookies.members.length).to.eq(1);",
															"      ",
															"      const cookie = cookies.members[0];",
															"",
															"      pm.expect(cookie.name).to.eq(\"refreshToken\");",
															"      pm.expect(cookie.maxAge).to.eq(24 * 60 * 60);",
															"      pm.expect(cookie.value).to.match(new RegExp(pm.environment.get(\"uuidRegex\")));",
															"  });",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\": \"{{userUsername}}\",\n    \"password\": \"{{userPassword}}\",\n    \"persistent\": false\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/security/authenticate",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"security",
														"authenticate"
													]
												}
											},
											"response": []
										},
										{
											"name": "POST security/authenticate - User Persistent",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const moment = require('moment');",
															"",
															"pm.test(\"POST security authenticate user persistent status code is 200\", () => {",
															"  pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"POST security authenticate user persistent response body\", () => {",
															"  const body = pm.response.json();",
															"  ",
															"  pm.expect(body).to.have.property(\"user\");",
															"  pm.expect(body.user.name).to.eq(pm.environment.get(\"userName\"));",
															"",
															"  pm.expect(body).to.have.property(\"jwt\");",
															"  pm.expect(body.jwt).to.match(new RegExp(pm.environment.get(\"jwtRegex\")));",
															"",
															"  pm.expect(body).to.have.property(\"expiresAt\");  ",
															"  let expiresAt = new Date(body.expiresAt);",
															"  pm.expect(isNaN(expiresAt.getTime())).to.eq(false);",
															"",
															"  // It's tricky to define what the JWT expiry time should be exactly since we can't",
															"  // know at what exact instant it is created on the server.So, we'll just check that ",
															"  // it is within one minute of 24 hours from now.",
															"  let date = new Date();",
															"  date.setDate(date.getDate() + 30);",
															"  date.setMinutes(date.getMinutes() - 1);",
															"",
															"  pm.expect(date.isBefore(expiresAt)).to.eq(true);",
															"",
															"  date.setMinutes(date.getMinutes() + 2);",
															"",
															"  pm.expect(date.isAfter(expiresAt)).to.eq(true);",
															"",
															"  pm.expect(body).to.have.property(\"persistent\");",
															"  pm.expect(body.persistent).to.eq(true);",
															"",
															"  pm.environment.set(\"jwt\", body.jwt);",
															"});",
															"",
															"pm.test(\"POST security authenticate user persistent cookie\", () => {",
															"  const cookieJar = pm.cookies.jar();",
															"  const body = pm.response.json();",
															" ",
															"  cookieJar.getAll(pm.environment.get(\"host\"), function (error, cookies) {  ",
															"      pm.expect(cookies.members.length).to.eq(1);",
															"      ",
															"      const cookie = cookies.members[0];",
															"",
															"      pm.expect(cookie.name).to.eq(\"refreshToken\");",
															"      pm.expect(cookie.maxAge).to.eq(30 * 24 * 60 * 60);",
															"      pm.expect(cookie.value).to.match(new RegExp(pm.environment.get(\"uuidRegex\")));",
															"  });",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\": \"{{userUsername}}\",\n    \"password\": \"{{userPassword}}\",\n    \"persistent\": true\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/security/authenticate",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"security",
														"authenticate"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "400 Bad Request",
									"item": [
										{
											"name": "POST security/authenticate - Invalid Request Body",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"POST security authenticate invalid request body Status code is 400\", () => {",
															"  pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"POST security authenticate invalid request body response body\", () => {",
															"  const body = pm.response.json();",
															"",
															"  pm.expect(body.uuid).to.match(new RegExp(pm.environment.get(\"uuidRegex\")));",
															"  let timestamp = new Date(body.timestamp);",
															"  pm.expect(isNaN(timestamp.getTime())).to.eq(false);",
															"  pm.expect(body.status).to.eq(400);",
															"  pm.expect(body.error).to.eq(\"Bad Request\");",
															"  pm.expect(body.message).to.eq(\"Invalid request content\");",
															"  pm.expect(body.path).to.eq(\"/v2/security/authenticate\");",
															"",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/security/authenticate",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"security",
														"authenticate"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "401 Unauthorized",
									"item": [
										{
											"name": "POST security/authenticate - Invalid Credentials",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"POST security authenticate invalid credentials status code is 401\", () => {",
															"  pm.response.to.have.status(401);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\": \"invalid\",\n    \"password\": \"invalid\",\n    \"persistent\": true\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/security/authenticate",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"security",
														"authenticate"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "POST security/authorize",
							"item": [
								{
									"name": "200 OK",
									"item": [
										{
											"name": "Setup - Login Admin",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Setup login admin status code is 200\", () => {",
															"  pm.response.to.have.status(200);",
															"});",
															"",
															"const body = pm.response.json();",
															"pm.environment.set(\"jwt\", body.jwt);",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\": \"{{adminUsername}}\",\n    \"password\": \"{{adminPassword}}\",\n    \"persistent\": true\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/security/authenticate",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"security",
														"authenticate"
													]
												}
											},
											"response": []
										},
										{
											"name": "POST security/authorize - Admin",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const moment = require('moment');",
															"",
															"pm.test(\"POST security authorize admin status code is 200\", () => {",
															"  pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"POST security authorize admin response body\", () => {",
															"  const body = pm.response.json();",
															"  ",
															"  pm.expect(body).to.have.property(\"user\");",
															"  pm.expect(body.user.name).to.eq(pm.environment.get(\"adminName\"));",
															"",
															"  pm.expect(body).to.have.property(\"jwt\");",
															"  pm.expect(body.jwt).to.match(new RegExp(pm.environment.get(\"jwtRegex\")));",
															"",
															"  pm.expect(body).to.have.property(\"expiresAt\");  ",
															"  let expiresAt = new Date(body.expiresAt);",
															"  pm.expect(isNaN(expiresAt.getTime())).to.eq(false);",
															"",
															"  // It's tricky to define what the JWT expiry time should be exactly since we can't",
															"  // know at what exact instant it is created on the server.So, we'll just check that ",
															"  // it is within one minute of 24 hours from now.",
															"  let date = new Date();",
															"  date.setDate(date.getDate() + 30);",
															"  date.setMinutes(date.getMinutes() - 1);",
															"",
															"  pm.expect(date.isBefore(expiresAt)).to.eq(true);",
															"",
															"  date.setMinutes(date.getMinutes() + 2);",
															"",
															"  pm.expect(date.isAfter(expiresAt)).to.eq(true);",
															"",
															"  pm.expect(body).to.have.property(\"persistent\");",
															"  pm.expect(body.persistent).to.eq(true);",
															"",
															"  pm.environment.set(\"jwt\", body.jwt);",
															"});",
															"",
															"pm.test(\"POST security authorize admin cookie\", () => {",
															"  const cookieJar = pm.cookies.jar();",
															" ",
															"  cookieJar.getAll(pm.environment.get(\"host\"), function (error, cookies) {  ",
															"      pm.expect(cookies.members.length).to.eq(1);",
															"      ",
															"      const cookie = cookies.members[0];",
															"",
															"      pm.expect(cookie.name).to.eq(\"refreshToken\");",
															"      pm.expect(cookie.maxAge).to.eq(30 * 24 * 60 * 60);",
															"      pm.expect(cookie.value).to.match(new RegExp(pm.environment.get(\"uuidRegex\")));",
															"  });",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/v2/security/authorize",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"security",
														"authorize"
													]
												}
											},
											"response": []
										},
										{
											"name": "Setup - Login User",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Setup login user status code is 200\", () => {",
															"  pm.response.to.have.status(200);",
															"});",
															"",
															"const body = pm.response.json();",
															"pm.environment.set(\"jwt\", body.jwt);",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\": \"{{userUsername}}\",\n    \"password\": \"{{userPassword}}\",\n    \"persistent\": true\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/security/authenticate",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"security",
														"authenticate"
													]
												}
											},
											"response": []
										},
										{
											"name": "POST security/authorize - User",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const moment = require('moment');",
															"",
															"pm.test(\"POST security authorize user status code is 200\", () => {",
															"  pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"POST security authorize user response body\", () => {",
															"  const body = pm.response.json();",
															"  ",
															"  pm.expect(body).to.have.property(\"user\");",
															"  pm.expect(body.user.name).to.eq(pm.environment.get(\"userName\"));",
															"",
															"  pm.expect(body).to.have.property(\"jwt\");",
															"  pm.expect(body.jwt).to.match(new RegExp(pm.environment.get(\"jwtRegex\")));",
															"",
															"  pm.expect(body).to.have.property(\"expiresAt\");  ",
															"  let expiresAt = new Date(body.expiresAt);",
															"  pm.expect(isNaN(expiresAt.getTime())).to.eq(false);",
															"",
															"  // It's tricky to define what the JWT expiry time should be exactly since we can't",
															"  // know at what exact instant it is created on the server.So, we'll just check that ",
															"  // it is within one minute of 24 hours from now.",
															"  let date = new Date();",
															"  date.setDate(date.getDate() + 30);",
															"  date.setMinutes(date.getMinutes() - 1);",
															"",
															"  pm.expect(date.isBefore(expiresAt)).to.eq(true);",
															"",
															"  date.setMinutes(date.getMinutes() + 2);",
															"",
															"  pm.expect(date.isAfter(expiresAt)).to.eq(true);",
															"",
															"  pm.expect(body).to.have.property(\"persistent\");",
															"  pm.expect(body.persistent).to.eq(true);",
															"",
															"  pm.environment.set(\"jwt\", body.jwt);",
															"});",
															"",
															"pm.test(\"POST security authorize user cookie\", () => {",
															"  const cookieJar = pm.cookies.jar();",
															" ",
															"  cookieJar.getAll(pm.environment.get(\"host\"), function (error, cookies) {  ",
															"      pm.expect(cookies.members.length).to.eq(1);",
															"      ",
															"      const cookie = cookies.members[0];",
															"",
															"      pm.expect(cookie.name).to.eq(\"refreshToken\");",
															"      pm.expect(cookie.maxAge).to.eq(30 * 24 * 60 * 60);",
															"      pm.expect(cookie.value).to.match(new RegExp(pm.environment.get(\"uuidRegex\")));",
															"  });",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/v2/security/authorize",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"security",
														"authorize"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "400 Bad Request",
									"item": [
										{
											"name": "POST security/authorize - Invalid Refresh Token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"POST security authorize invalid refresh token status code is 400\", () => {",
															"  pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"POST security authorize invalid refresh token response body\", () => {",
															"  const body = pm.response.json();",
															"",
															"  pm.expect(body.uuid).to.match(new RegExp(pm.environment.get(\"uuidRegex\")));",
															"  let timestamp = new Date(body.timestamp);",
															"  pm.expect(isNaN(timestamp.getTime())).to.eq(false);",
															"  pm.expect(body.status).to.eq(400);",
															"  pm.expect(body.error).to.eq(\"Bad Request\");",
															"  pm.expect(body.message).to.eq(\"Invalid refresh token: invalid\");",
															"  pm.expect(body.path).to.eq(\"/v2/security/authorize\");",
															"",
															"});",
															"",
															"pm.test(\"POST security authorize invalid refresh token cookie\", () => {",
															"  const cookieJar = pm.cookies.jar();",
															" ",
															"  cookieJar.getAll(pm.environment.get(\"host\"), function (error, cookies) {  ",
															"      pm.expect(cookies.members.length).to.eq(1);",
															"      ",
															"      const cookie = cookies.members[0];",
															"",
															"      pm.expect(cookie.name).to.eq(\"refreshToken\");",
															"      pm.expect(cookie.maxAge).to.eq(0);",
															"      pm.expect(cookie.value).to.eq(\"invalid\");",
															"",
															"  });",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const cookieJar = pm.cookies.jar();",
															"",
															"cookieJar.set(pm.environment.get(\"host\"), \"refreshToken\", \"invalid\", function(error, cookie) {",
															"  // Set invalid token",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/v2/security/authorize",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"security",
														"authorize"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "401 Unauthorized",
									"item": [
										{
											"name": "POST security/authorize - Missing Cookie",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"POST security authorize missing cookie status code is 401\", () => {",
															"  pm.response.to.have.status(401);",
															"});",
															"",
															"pm.test(\"POST security authorize missing cookie cookie\", () => {",
															"  const cookieJar = pm.cookies.jar();",
															" ",
															"  cookieJar.getAll(pm.environment.get(\"host\"), function (error, cookies) {  ",
															"      pm.expect(cookies.members.length).to.eq(0);      ",
															"  });",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const cookieJar = pm.cookies.jar();",
															"",
															"cookieJar.clear(pm.environment.get(\"host\"), function (error) {",
															"  // Clear all cookies",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/v2/security/authorize",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"security",
														"authorize"
													]
												}
											},
											"response": []
										},
										{
											"name": "POST security/authorize - Unauthorized Refresh Token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"POST security authorize unauthorized refresh token status code is 401\", () => {",
															"  pm.response.to.have.status(401);",
															"});",
															"",
															"pm.test(\"POST security authorize unauthorized refresh token cookie\", () => {",
															"  const cookieJar = pm.cookies.jar();",
															" ",
															"  cookieJar.getAll(pm.environment.get(\"host\"), function (error, cookies) {  ",
															"      pm.expect(cookies.members.length).to.eq(0);      ",
															"  });",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const cookieJar = pm.cookies.jar();",
															"",
															"cookieJar.set(pm.environment.get(\"host\"), \"refreshToken\", \"00000000-0000-0000-0000-000000000000\", function(error, cookie) {",
															"  // Set invalid token",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/v2/security/authorize",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"security",
														"authorize"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "POST security/unauthorize",
							"item": [
								{
									"name": "200 OK",
									"item": [
										{
											"name": "Setup - Login Admin",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Setup login admin status code is 200\", () => {",
															"  pm.response.to.have.status(200);",
															"});",
															"",
															"const body = pm.response.json();",
															"pm.environment.set(\"jwt\", body.jwt);",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\": \"{{adminUsername}}\",\n    \"password\": \"{{adminPassword}}\",\n    \"persistent\": true\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/security/authenticate",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"security",
														"authenticate"
													]
												}
											},
											"response": []
										},
										{
											"name": "POST security/unauthorize - Admin",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"POST security unauthorize admin status code is 200\", () => {",
															"  pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"POST security unauthorize admin response body\", () => {",
															"  const body = pm.response.json();",
															"  ",
															"  pm.expect(body.loggedOut).to.eq(true);",
															"});",
															"",
															"pm.test(\"POST security unauthorize admin cookie\", () => {",
															"  const cookieJar = pm.cookies.jar();",
															" ",
															"  cookieJar.getAll(pm.environment.get(\"host\"), function (error, cookies) {  ",
															"      pm.expect(cookies.members.length).to.eq(0);",
															"  });",
															"});",
															"",
															"pm.environment.set(\"jwt\", \"\");",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/v2/security/unauthorize",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"security",
														"unauthorize"
													]
												}
											},
											"response": []
										},
										{
											"name": "Setup - Login User",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Setup login admin status code is 200\", () => {",
															"  pm.response.to.have.status(200);",
															"});",
															"",
															"const body = pm.response.json();",
															"pm.environment.set(\"jwt\", body.jwt);",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\": \"{{userUsername}}\",\n    \"password\": \"{{userPassword}}\",\n    \"persistent\": true\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/security/authenticate",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"security",
														"authenticate"
													]
												}
											},
											"response": []
										},
										{
											"name": "POST security/unauthorize - User",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"POST security unauthorize user status code is 200\", () => {",
															"  pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"POST security unauthorize user response body\", () => {",
															"  const body = pm.response.json();",
															"  ",
															"  pm.expect(body.loggedOut).to.eq(true);",
															"});",
															"",
															"pm.test(\"POST security unauthorize user cookie\", () => {",
															"  const cookieJar = pm.cookies.jar();",
															" ",
															"  cookieJar.getAll(pm.environment.get(\"host\"), function (error, cookies) {  ",
															"      pm.expect(cookies.members.length).to.eq(0);",
															"  });",
															"});",
															"",
															"pm.environment.set(\"jwt\", \"\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/v2/security/unauthorize",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"security",
														"unauthorize"
													]
												}
											},
											"response": []
										},
										{
											"name": "POST security/unauthorize - Unauthorized Refresh Token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"POST security unauthorize unauthorized refresh token status code is 200\", () => {",
															"  pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"POST security unauthorize unauthorized refresh token response body\", () => {",
															"  const body = pm.response.json();",
															"  ",
															"  pm.expect(body.loggedOut).to.eq(true);",
															"});",
															"",
															"pm.test(\"POST security unauthorize unauthorized refresh token cookie\", () => {",
															"  const cookieJar = pm.cookies.jar();",
															" ",
															"  cookieJar.getAll(pm.environment.get(\"host\"), function (error, cookies) {  ",
															"      pm.expect(cookies.members.length).to.eq(0);",
															"  });",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const cookieJar = pm.cookies.jar();",
															"",
															"cookieJar.set(pm.environment.get(\"host\"), \"refreshToken\", \"00000000-0000-0000-0000-000000000000\", function(error, cookie) {",
															"  // Set invalid token",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/v2/security/unauthorize",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"security",
														"unauthorize"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "400 Bad Request",
									"item": [
										{
											"name": "POST security/unauthorize - Invalid Refresh Token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"POST security unauthorize invalid refresh token status code is 400\", () => {",
															"  pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"POST security unauthorize invalid refresh token response body\", () => {",
															"  const body = pm.response.json();",
															"",
															"  pm.expect(body.uuid).to.match(new RegExp(pm.environment.get(\"uuidRegex\")));",
															"  let timestamp = new Date(body.timestamp);",
															"  pm.expect(isNaN(timestamp.getTime())).to.eq(false);",
															"  pm.expect(body.status).to.eq(400);",
															"  pm.expect(body.error).to.eq(\"Bad Request\");",
															"  pm.expect(body.message).to.eq(\"Invalid refresh token: invalid\");",
															"  pm.expect(body.path).to.eq(\"/v2/security/unauthorize\");",
															"",
															"});",
															"",
															"pm.test(\"POST security authorize invalid refresh token cookie\", () => {",
															"  const cookieJar = pm.cookies.jar();",
															" ",
															"  cookieJar.getAll(pm.environment.get(\"host\"), function (error, cookies) {  ",
															"      pm.expect(cookies.members.length).to.eq(1);",
															"      ",
															"      const cookie = cookies.members[0];",
															"",
															"      pm.expect(cookie.name).to.eq(\"refreshToken\");",
															"      pm.expect(cookie.maxAge).to.eq(0);",
															"      pm.expect(cookie.value).to.eq(\"invalid\");",
															"",
															"  });",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const cookieJar = pm.cookies.jar();",
															"",
															"cookieJar.set(pm.environment.get(\"host\"), \"refreshToken\", \"invalid\", function(error, cookie) {",
															"  // Set invalid token",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/v2/security/unauthorize",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"security",
														"unauthorize"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "401 Unauthorized",
									"item": [
										{
											"name": "POST security/unauthorize - Missing Cookie",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"POST security unauthorize missing cookie status code is 401\", () => {",
															"  pm.response.to.have.status(401);",
															"});",
															"",
															"pm.test(\"POST security unauthorize missing cookie\", () => {",
															"  const cookieJar = pm.cookies.jar();",
															" ",
															"  cookieJar.getAll(pm.environment.get(\"host\"), function (error, cookies) {  ",
															"      pm.expect(cookies.members.length).to.eq(0);      ",
															"  });",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const cookieJar = pm.cookies.jar();",
															"",
															"cookieJar.clear(pm.environment.get(\"host\"), function (error) {",
															"  // Clear all cookies",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/v2/security/unauthorize",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"security",
														"unauthorize"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "POST security/request-password-reset",
							"item": [
								{
									"name": "200 OK",
									"item": [
										{
											"name": "POST security/request-password-reset - Admin",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"POST security request password reset admin status code is 200\", () => {",
															"  pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"POST security request password reset admin response body\", () => {",
															"  pm.expect(responseBody.length).to.eq(0);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"email\": \"{{adminUsername}}\",\n  \"link\": \"http://example.com/%s\"    \n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/security/request-password-reset",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"security",
														"request-password-reset"
													]
												}
											},
											"response": []
										},
										{
											"name": "POST security/request-password-reset - User",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"POST security request password reset user status code is 200\", () => {",
															"  pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"POST security request password reset user response body\", () => {",
															"  pm.expect(responseBody.length).to.eq(0);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"email\": \"{{userUsername}}\",\n  \"link\": \"http://example.com/%s\"    \n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/security/request-password-reset",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"security",
														"request-password-reset"
													]
												}
											},
											"response": []
										},
										{
											"name": "POST security/request-password-reset - Invalid Email",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Invalid email should also return 200 to prevent someone from finding out if an email is registered or not.",
															"pm.test(\"POST security request password reset invalid email status code is 200\", () => {",
															"  pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"POST security request password reset invalid email response body\", () => {",
															"  pm.expect(responseBody.length).to.eq(0);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"email\": \"invalid@email.com\",\n  \"link\": \"http://example.com/%s\"    \n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/security/request-password-reset",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"security",
														"request-password-reset"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "400 Bad Request",
									"item": [
										{
											"name": "POST security/request-password-reset - Invalid Request Body",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"POST security request password reset invalid request body status code is 400\", () => {",
															"  pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"POST security request password reset invalid request body response body\", () => {",
															"  const body = pm.response.json();",
															"",
															"  pm.expect(body.uuid).to.match(new RegExp(pm.environment.get(\"uuidRegex\")));",
															"  let timestamp = new Date(body.timestamp);",
															"  pm.expect(isNaN(timestamp.getTime())).to.eq(false);",
															"  pm.expect(body.status).to.eq(400);",
															"  pm.expect(body.error).to.eq(\"Bad Request\");",
															"  pm.expect(body.message).to.eq(\"Invalid request content\");",
															"  pm.expect(body.path).to.eq(\"/v2/security/request-password-reset\");",
															"",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/security/request-password-reset",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"security",
														"request-password-reset"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "POST security/reset-password",
							"item": [
								{
									"name": "200 OK",
									"item": [
										{
											"name": "GET actuator/health",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// THere is no way of gwtting a valid reset password token for a user through the API so we ",
															"// can't write a real test for 200 OK here.",
															"",
															"pm.test(\"GET actuator health status code is 200\", () => {",
															"  pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"GET actuator health response body\", () => {",
															"  const body = pm.response.json();",
															"",
															"  pm.expect(body).to.have.property(\"status\");  ",
															"  pm.expect(body.status).to.eq(\"UP\");",
															"",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/actuator/health",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"actuator",
														"health"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "400 Bad Request",
									"item": [
										{
											"name": "POST security/reset-password - Invalid Reset Password Token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"POST security reset password invalid reset password token status code is 401\", () => {",
															"  pm.response.to.have.status(401);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"email\": \"{{adminUsername}}\",\n  \"password\": \"newpassword\",\n  \"resetPasswordToken\": \"00000000-0000-0000-0000-000000000000\"\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/security/reset-password",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"security",
														"reset-password"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "401 Unauthorized",
									"item": [
										{
											"name": "POST security/reset-password - Invalid Request Body",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"POST security reset password invalid request body status code is 400\", () => {",
															"  pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"POST security reset password invalid request body response body\", () => {",
															"  const body = pm.response.json();",
															"",
															"  pm.expect(body.uuid).to.match(new RegExp(pm.environment.get(\"uuidRegex\")));",
															"  let timestamp = new Date(body.timestamp);",
															"  pm.expect(isNaN(timestamp.getTime())).to.eq(false);",
															"  pm.expect(body.status).to.eq(400);",
															"  pm.expect(body.error).to.eq(\"Bad Request\");",
															"  pm.expect(body.message).to.eq(\"Invalid request content\");",
															"  pm.expect(body.path).to.eq(\"/v2/security/reset-password\");",
															"",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/security/reset-password",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"security",
														"reset-password"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "users",
					"item": [
						{
							"name": "POST users",
							"item": [
								{
									"name": "201 Created",
									"item": [
										{
											"name": "POST users - OK",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"POST user status code is 201\", () => {",
															"  pm.response.to.have.status(201);",
															"});",
															"",
															"pm.test(\"POST user response body\", () => {",
															"  const body = pm.response.json();",
															"  ",
															"  pm.expect(body).to.have.property(\"user\");",
															"  ",
															"  pm.expect(body.user).to.have.property(\"id\");",
															"  pm.expect(body.user.name).to.eq(pm.environment.get('newUserName'));",
															"  pm.expect(body.user.administrator).to.eq(false);",
															"});",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{jwt}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"{{newUserName}}\",\n    \"email\": \"{{newUserUsername}}\",\n    \"password\": \"{{newUserPassword}}\",\n    \"confirmPassword\": \"{{newUserPassword}}\"\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/users",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"users"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "400 Bad Request",
									"item": [
										{
											"name": "POST users - Bad Request",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"POST user status code is 400\", () => {",
															"  pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"POST user bad request response body\", () => {",
															"  const body = pm.response.json();",
															"",
															"  pm.expect(body.uuid).to.match(new RegExp(pm.environment.get(\"uuidRegex\")));",
															"  let timestamp = new Date(body.timestamp);",
															"  pm.expect(isNaN(timestamp.getTime())).to.eq(false);",
															"  pm.expect(body.status).to.eq(400);",
															"  pm.expect(body.error).to.eq(\"Bad Request\");",
															"  pm.expect(body.message).to.eq(\"Invalid request content\");",
															"  pm.expect(body.path).to.eq(\"/v2/users\");",
															"",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{jwt}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/users",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"users"
													]
												}
											},
											"response": []
										},
										{
											"name": "POST users - Bad Request Missing Name",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"POST user status code is 400\", () => {",
															"  pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"POST user bad request response body\", () => {",
															"  const body = pm.response.json();",
															"",
															"  pm.expect(body.uuid).to.match(new RegExp(pm.environment.get(\"uuidRegex\")));",
															"  let timestamp = new Date(body.timestamp);",
															"  pm.expect(isNaN(timestamp.getTime())).to.eq(false);",
															"  pm.expect(body.status).to.eq(400);",
															"  pm.expect(body.error).to.eq(\"Bad Request\");",
															"  pm.expect(body.message).to.eq(\"Name is missing\");",
															"  pm.expect(body.path).to.eq(\"/v2/users\");",
															"",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{jwt}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"\",\n    \"email\": \"{{newUserUsername}}\",\n    \"password\": \"{{newUserPassword}}\",\n    \"confirmPassword\": \"{{newUserPassword}}\"\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/users",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"users"
													]
												}
											},
											"response": []
										},
										{
											"name": "POST users - Bad Request Invalid Email",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"POST user status code is 400\", () => {",
															"  pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"POST user bad request response body\", () => {",
															"  const body = pm.response.json();",
															"",
															"  pm.expect(body.uuid).to.match(new RegExp(pm.environment.get(\"uuidRegex\")));",
															"  let timestamp = new Date(body.timestamp);",
															"  pm.expect(isNaN(timestamp.getTime())).to.eq(false);",
															"  pm.expect(body.status).to.eq(400);",
															"  pm.expect(body.error).to.eq(\"Bad Request\");",
															"  pm.expect(body.message).to.eq(\"Invalid request content\");",
															"  pm.expect(body.path).to.eq(\"/v2/users\");",
															"",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{jwt}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"{{newUserName}}\",\n    \"email\": \"INVAÖLD_EMAIL\",\n    \"password\": \"{{newUserPassword}}\",\n    \"confirmPassword\": \"{{newUserPassword}}\"\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/users",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"users"
													]
												}
											},
											"response": []
										},
										{
											"name": "POST users - Bad Request Missing Email",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"POST user status code is 400\", () => {",
															"  pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"POST user bad request response body\", () => {",
															"  const body = pm.response.json();",
															"",
															"  pm.expect(body.uuid).to.match(new RegExp(pm.environment.get(\"uuidRegex\")));",
															"  let timestamp = new Date(body.timestamp);",
															"  pm.expect(isNaN(timestamp.getTime())).to.eq(false);",
															"  pm.expect(body.status).to.eq(400);",
															"  pm.expect(body.error).to.eq(\"Bad Request\");",
															"  pm.expect(body.message).to.eq(\"Email is missing\");",
															"  pm.expect(body.path).to.eq(\"/v2/users\");",
															"",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{jwt}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"{{newUserName}}\",\n    \"email\": \"\",\n    \"password\": \"{{newUserPassword}}\",\n    \"confirmPassword\": \"{{newUserPassword}}\"\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/users",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"users"
													]
												}
											},
											"response": []
										},
										{
											"name": "POST users - Bad Request Missing Password",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"POST user status code is 400\", () => {",
															"  pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"POST user bad request response body\", () => {",
															"  const body = pm.response.json();",
															"",
															"  pm.expect(body.uuid).to.match(new RegExp(pm.environment.get(\"uuidRegex\")));",
															"  let timestamp = new Date(body.timestamp);",
															"  pm.expect(isNaN(timestamp.getTime())).to.eq(false);",
															"  pm.expect(body.status).to.eq(400);",
															"  pm.expect(body.error).to.eq(\"Bad Request\");",
															"  pm.expect(body.message).to.eq(\"Password is missing\");",
															"  pm.expect(body.path).to.eq(\"/v2/users\");",
															"",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{jwt}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"{{newUserName}}\",\n    \"email\": \"{{newUserUsername}}\",\n    \"password\": \"\",\n    \"confirmPassword\": \"{{newUserPassword}}\"\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/users",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"users"
													]
												}
											},
											"response": []
										},
										{
											"name": "POST users - Bad Request Missing Confirm Password",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"POST user status code is 400\", () => {",
															"  pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"POST user bad request response body\", () => {",
															"  const body = pm.response.json();",
															"",
															"  pm.expect(body.uuid).to.match(new RegExp(pm.environment.get(\"uuidRegex\")));",
															"  let timestamp = new Date(body.timestamp);",
															"  pm.expect(isNaN(timestamp.getTime())).to.eq(false);",
															"  pm.expect(body.status).to.eq(400);",
															"  pm.expect(body.error).to.eq(\"Bad Request\");",
															"  pm.expect(body.message).to.eq(\"Password confirmation is missing\");",
															"  pm.expect(body.path).to.eq(\"/v2/users\");",
															"",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{jwt}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"{{newUserName}}\",\n    \"email\": \"{{newUserUsername}}\",\n    \"password\": \"{{newUserPassword}}\",\n    \"confirmPassword\": \"\"\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/users",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"users"
													]
												}
											},
											"response": []
										},
										{
											"name": "POST users - Bad Request Password Mismatch",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"POST user status code is 400\", () => {",
															"  pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"POST user bad request response body\", () => {",
															"  const body = pm.response.json();",
															"",
															"  pm.expect(body.uuid).to.match(new RegExp(pm.environment.get(\"uuidRegex\")));",
															"  let timestamp = new Date(body.timestamp);",
															"  pm.expect(isNaN(timestamp.getTime())).to.eq(false);",
															"  pm.expect(body.status).to.eq(400);",
															"  pm.expect(body.error).to.eq(\"Bad Request\");",
															"  pm.expect(body.message).to.eq(\"Password confirmation does not match password\");",
															"  pm.expect(body.path).to.eq(\"/v2/users\");",
															"",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{jwt}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"{{newUserName}}\",\n    \"email\": \"{{newUserUsername}}\",\n    \"password\": \"PASSWORD\",\n    \"confirmPassword\": \"CONFIRM_PASSWORD\"\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/users",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"users"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "409 Conflict",
									"item": [
										{
											"name": "POST users - Conflict Name Unavailable",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"POST user status code is 409\", () => {",
															"  pm.response.to.have.status(409);",
															"});",
															"",
															"pm.test(\"POST user bad request response body\", () => {",
															"  const body = pm.response.json();",
															"",
															"  let timestamp = new Date(body.timestamp);",
															"  pm.expect(isNaN(timestamp.getTime())).to.eq(false);",
															"  pm.expect(body.message).to.eq(\"Name is unavailable\");",
															"  pm.expect(body.method).to.eq(\"POST\");",
															"  pm.expect(body.path).to.eq(\"/v2/users\");",
															"",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{jwt}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"{{adminName}}\",\n    \"email\": \"{{newUserUsername}}\",\n    \"password\": \"{{newUserPassword}}\",\n    \"confirmPassword\": \"{{newUserPassword}}\"\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/users",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"users"
													]
												}
											},
											"response": []
										},
										{
											"name": "POST users - Conflict Email Unavailable",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"POST user status code is 409\", () => {",
															"  pm.response.to.have.status(409);",
															"});",
															"",
															"pm.test(\"POST user bad request response body\", () => {",
															"  const body = pm.response.json();",
															"",
															"  let timestamp = new Date(body.timestamp);",
															"  pm.expect(isNaN(timestamp.getTime())).to.eq(false);",
															"  pm.expect(body.message).to.eq(\"Email is unavailable\");",
															"  pm.expect(body.method).to.eq(\"POST\");",
															"  pm.expect(body.path).to.eq(\"/v2/users\");",
															"",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{jwt}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    // When this is run after 200 OK the new user name will be unavailable so set another dummy name\n    \"name\": \"name\",\n    \"email\": \"{{adminUsername}}\",\n    \"password\": \"{{newUserPassword}}\",\n    \"confirmPassword\": \"{{newUserPassword}}\"\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/users",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"users"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "PUT users/{userId}",
							"item": [
								{
									"name": "200 OK",
									"item": [
										{
											"name": "Setup - Login User",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Setup login admin status code is 200\", () => {",
															"  pm.response.to.have.status(200);",
															"});",
															"",
															"const body = pm.response.json();",
															"pm.environment.set(\"jwt\", body.jwt);",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\": \"{{userUsername}}\",\n    \"password\": \"{{userPassword}}\",\n    \"persistent\": true\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/security/authenticate",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"security",
														"authenticate"
													]
												}
											},
											"response": []
										},
										{
											"name": "PUT users/{userId} - OK",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"POST user status code is 200\", () => {",
															"  pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"POST user response body\", () => {",
															"  const body = pm.response.json();",
															"  ",
															"  pm.expect(body).to.have.property(\"user\");",
															"  ",
															"  pm.expect(body.user).to.have.property(\"id\");",
															"  pm.expect(body.user.name).to.eq(pm.environment.get('userName'));",
															"  pm.expect(body.user.administrator).to.eq(false);",
															"});",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{jwt}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"currentPassword\": \"{{userPassword}}\",\n    \"password\": \"{{newUserPassword}}\",\n    \"confirmPassword\": \"{{newUserPassword}}\"\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/users/{{userId}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"users",
														"{{userId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "PUT users/{userId} - Rollback",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"POST user status code is 200\", () => {",
															"  pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"POST user response body\", () => {",
															"  const body = pm.response.json();",
															"  ",
															"  pm.expect(body).to.have.property(\"user\");",
															"  ",
															"  pm.expect(body.user).to.have.property(\"id\");",
															"  pm.expect(body.user.name).to.eq(pm.environment.get('userName'));",
															"  pm.expect(body.user.administrator).to.eq(false);",
															"});",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{jwt}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"currentPassword\": \"{{newUserPassword}}\",\n    \"password\": \"{{userPassword}}\",\n    \"confirmPassword\": \"{{userPassword}}\"\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/users/{{userId}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"users",
														"{{userId}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "400 Bad Request",
									"item": [
										{
											"name": "PUT users/{userId} - Bad Request",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"POST user status code is 400\", () => {",
															"  pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"PUT season bad request response body\", () => {",
															"  const body = pm.response.json();",
															"",
															"  pm.expect(body.uuid).to.match(new RegExp(pm.environment.get(\"uuidRegex\")));",
															"  let timestamp = new Date(body.timestamp);",
															"  pm.expect(isNaN(timestamp.getTime())).to.eq(false);",
															"  pm.expect(body.status).to.eq(400);",
															"  pm.expect(body.error).to.eq(\"Bad Request\");",
															"  pm.expect(body.message).to.eq(\"Invalid request content\");",
															"  pm.expect(body.path).to.eq(\"/v2/users/\" + pm.environment.get(\"userId\"));",
															"",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{jwt}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/users/{{userId}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"users",
														"{{userId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "PUT users/{userId} - Bad Request Missing Current Password",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"POST user status code is 400\", () => {",
															"  pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"PUT season bad request response body\", () => {",
															"  const body = pm.response.json();",
															"",
															"  pm.expect(body.uuid).to.match(new RegExp(pm.environment.get(\"uuidRegex\")));",
															"  let timestamp = new Date(body.timestamp);",
															"  pm.expect(isNaN(timestamp.getTime())).to.eq(false);",
															"  pm.expect(body.status).to.eq(400);",
															"  pm.expect(body.error).to.eq(\"Bad Request\");",
															"  pm.expect(body.message).to.eq(\"Invalid request content\");",
															"  pm.expect(body.path).to.eq(\"/v2/users/\" + pm.environment.get(\"userId\"));",
															"",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{jwt}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"password\": \"{{userPassword}}\",\n    \"confirmPassword\": \"{{userPassword}}\"\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/users/{{userId}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"users",
														"{{userId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "PUT users/{userId} - Bad Request Missing Password",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"POST user status code is 400\", () => {",
															"  pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"PUT season bad request response body\", () => {",
															"  const body = pm.response.json();",
															"",
															"  pm.expect(body.uuid).to.match(new RegExp(pm.environment.get(\"uuidRegex\")));",
															"  let timestamp = new Date(body.timestamp);",
															"  pm.expect(isNaN(timestamp.getTime())).to.eq(false);",
															"  pm.expect(body.status).to.eq(400);",
															"  pm.expect(body.error).to.eq(\"Bad Request\");",
															"  pm.expect(body.message).to.eq(\"Invalid request content\");",
															"  pm.expect(body.path).to.eq(\"/v2/users/\" + pm.environment.get(\"userId\"));",
															"",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{jwt}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"currentPassword\": \"{{newUserPassword}}\",\n    \"confirmPassword\": \"{{userPassword}}\"\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/users/{{userId}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"users",
														"{{userId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "PUT users/{userId} - Bad Request Missing Confirm Password",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"POST user status code is 400\", () => {",
															"  pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"PUT season bad request response body\", () => {",
															"  const body = pm.response.json();",
															"",
															"  pm.expect(body.uuid).to.match(new RegExp(pm.environment.get(\"uuidRegex\")));",
															"  let timestamp = new Date(body.timestamp);",
															"  pm.expect(isNaN(timestamp.getTime())).to.eq(false);",
															"  pm.expect(body.status).to.eq(400);",
															"  pm.expect(body.error).to.eq(\"Bad Request\");",
															"  pm.expect(body.message).to.eq(\"Invalid request content\");",
															"  pm.expect(body.path).to.eq(\"/v2/users/\" + pm.environment.get(\"userId\"));",
															"",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{jwt}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"currentPassword\": \"{{newUserPassword}}\",\n    \"password\": \"{{userPassword}}\"\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/users/{{userId}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"users",
														"{{userId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "PUT users/{userId} - Bad Request Password Mismatch",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"POST user status code is 400\", () => {",
															"  pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"PUT season bad request response body\", () => {",
															"  const body = pm.response.json();",
															"",
															"  pm.expect(body.uuid).to.match(new RegExp(pm.environment.get(\"uuidRegex\")));",
															"  let timestamp = new Date(body.timestamp);",
															"  pm.expect(isNaN(timestamp.getTime())).to.eq(false);",
															"  pm.expect(body.status).to.eq(400);",
															"  pm.expect(body.error).to.eq(\"Bad Request\");",
															"  pm.expect(body.message).to.eq(\"Password confirmation does not match password\");",
															"  pm.expect(body.path).to.eq(\"/v2/users/\" + pm.environment.get(\"userId\"));",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{jwt}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"currentPassword\": \"{{newUserPassword}}\",\n    \"password\": \"{{userPassword}}\",\n    \"confirmPassword\": \"{{newUserPassword}}\"\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/users/{{userId}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"users",
														"{{userId}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "401 Unauthorized",
									"item": [
										{
											"name": "PUT users/{userId} - Unauthorized No Auth",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"PUT season status code is 401\", () => {",
															"  pm.response.to.have.status(401);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"currentPassword\": \"{{userPassword}}\",\n    \"password\": \"{{newUserPassword}}\",\n    \"confirmPassword\": \"{{newUserPassword}}\"\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/users/{{userId}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"users",
														"{{userId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "PUT users/{userId} - Unauthorized Invalid Auth",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"PUT season status code is 401\", () => {",
															"  pm.response.to.have.status(401);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{expiredJwt}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"currentPassword\": \"{{userPassword}}\",\n    \"password\": \"{{newUserPassword}}\",\n    \"confirmPassword\": \"{{newUserPassword}}\"\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/users/{{userId}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"users",
														"{{userId}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "403 Forbidden",
									"item": [
										{
											"name": "PUT users/{userId} - Forbidden Not Current User",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"PUT season status code is 403\", () => {",
															"  pm.response.to.have.status(403);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{jwt}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"currentPassword\": \"{{userPassword}}\",\n    \"password\": \"{{newUserPassword}}\",\n    \"confirmPassword\": \"{{newUserPassword}}\"\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/users/{{adminId}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"users",
														"{{adminId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "PUT users/{userId} - Forbidden Invalid Current Password",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"PUT season status code is 403\", () => {",
															"  pm.response.to.have.status(403);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{jwt}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"currentPassword\": \"{{newUserPassword}}\",\n    \"password\": \"{{newUserPassword}}\",\n    \"confirmPassword\": \"{{newUserPassword}}\"\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/users/{{userId}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"users",
														"{{userId}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "404 Not Found",
									"item": [
										{
											"name": "PUT users/{userId} - Not Found",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"PUT season status code is 404\", () => {",
															"  pm.response.to.have.status(404);",
															"});",
															"",
															"pm.test(\"PUT season forbidden response body\", () => {",
															"  const body = pm.response.json();",
															"",
															"  pm.expect(body.uuid).to.match(new RegExp(pm.environment.get(\"uuidRegex\")));",
															"  let timestamp = new Date(body.timestamp);",
															"  pm.expect(isNaN(timestamp.getTime())).to.eq(false);",
															"  pm.expect(body.status).to.eq(404);",
															"  pm.expect(body.error).to.eq(\"Not Found\");",
															"  pm.expect(body.message).to.eq(\"Requested resource was not found.\");",
															"  pm.expect(body.path).to.eq(\"/v2/users/-1\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{jwt}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"currentPassword\": \"{{userPassword}}\",\n    \"password\": \"{{newUserPassword}}\",\n    \"confirmPassword\": \"{{newUserPassword}}\"\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/users/-1",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"users",
														"-1"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "seasons",
					"item": [
						{
							"name": "GET seasons",
							"item": [
								{
									"name": "200 OK",
									"item": [
										{
											"name": "GET seasons - OK",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"GET seasons status code is 200\", () => {",
															"  pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"GET seasons response body\", () => {",
															"  const body = pm.response.json();",
															"",
															"  pm.expect(body).to.have.property(\"seasons\");",
															"",
															"  pm.expect(body.seasons.length).to.eq(2);",
															"",
															"  const season = JSON.parse(pm.environment.get(\"season\"));",
															"  const currentSeason = JSON.parse(pm.environment.get(\"currentSeason\"));",
															"",
															"  pm.expect(body.seasons[0].id).to.eq(currentSeason.id);",
															"  pm.expect(body.seasons[0].name).to.eq(currentSeason.name);",
															"  pm.expect(body.seasons[0].shortName).to.eq(currentSeason.shortName);",
															"  pm.expect(body.seasons[0].d11TeamBudget).to.eq(currentSeason.d11TeamBudget);",
															"  pm.expect(body.seasons[0].d11TeamMaxTransfers).to.eq(currentSeason.d11TeamMaxTransfers);",
															"  pm.expect(body.seasons[0].status).to.eq(currentSeason.status);",
															"  pm.expect(body.seasons[0].date).to.eq(currentSeason.date);",
															"  pm.expect(body.seasons[0].legacy).to.eq(currentSeason.legacy);",
															"",
															"  pm.expect(body.seasons[1].id).to.eq(season.id);",
															"  pm.expect(body.seasons[1].name).to.eq(season.name);",
															"  pm.expect(body.seasons[1].shortName).to.eq(season.shortName);",
															"  pm.expect(body.seasons[1].d11TeamBudget).to.eq(season.d11TeamBudget);",
															"  pm.expect(body.seasons[1].d11TeamMaxTransfers).to.eq(season.d11TeamMaxTransfers);",
															"  pm.expect(body.seasons[1].status).to.eq(season.status);",
															"  pm.expect(body.seasons[1].date).to.eq(season.date);",
															"  pm.expect(body.seasons[1].legacy).to.eq(season.legacy);",
															"",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/v2/seasons",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"seasons"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "GET seasons/{seasonId}",
							"item": [
								{
									"name": "200 OK",
									"item": [
										{
											"name": "GET seasons/{seasonId} - OK",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"GET season status code is 200\", () => {",
															"  pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"GET season response body\", () => {",
															"  const body = pm.response.json();",
															"",
															"  pm.expect(body).to.have.property(\"season\");",
															"",
															"  const season = JSON.parse(pm.environment.get(\"season\"));",
															"",
															"  pm.expect(body.season.id).to.eq(season.id);",
															"  pm.expect(body.season.name).to.eq(season.name);",
															"  pm.expect(body.season.shortName).to.eq(season.shortName);",
															"  pm.expect(body.season.d11TeamBudget).to.eq(season.d11TeamBudget);",
															"  pm.expect(body.season.d11TeamMaxTransfers).to.eq(season.d11TeamMaxTransfers);",
															"  pm.expect(body.season.status).to.eq(season.status);",
															"  pm.expect(body.season.date).to.eq(season.date);",
															"  pm.expect(body.season.legacy).to.eq(season.legacy);",
															"",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/v2/seasons/{{seasonId}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"seasons",
														"{{seasonId}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "400 Bad Request",
									"item": [
										{
											"name": "GET seasons/{seasonId} - Invalid Season Id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"GET season invalid season id status code is 400\", () => {",
															"  pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"GET season invalid season id response body\", () => {",
															"  const body = pm.response.json();",
															"",
															"  pm.expect(body.uuid).to.match(new RegExp(pm.environment.get(\"uuidRegex\")));",
															"  let timestamp = new Date(body.timestamp);",
															"  pm.expect(isNaN(timestamp.getTime())).to.eq(false);",
															"  pm.expect(body.status).to.eq(400);",
															"  pm.expect(body.error).to.eq(\"Bad Request\");",
															"  pm.expect(body.message).to.eq(\"Invalid season id: invalid\");",
															"  pm.expect(body.path).to.eq(\"/v2/seasons/invalid\");",
															"",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/v2/seasons/invalid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"seasons",
														"invalid"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "404 Not Found",
									"item": [
										{
											"name": "GET seasons/{seasonId} - Not Found",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"GET season not found status code is 404\", () => {",
															"  pm.response.to.have.status(404);",
															"});",
															"",
															"pm.test(\"GET season not found response body\", () => {",
															"  const body = pm.response.json();",
															"",
															"  pm.expect(body.uuid).to.match(new RegExp(pm.environment.get(\"uuidRegex\")));",
															"  let timestamp = new Date(body.timestamp);",
															"  pm.expect(isNaN(timestamp.getTime())).to.eq(false);",
															"  pm.expect(body.status).to.eq(404);",
															"  pm.expect(body.error).to.eq(\"Not Found\");",
															"  pm.expect(body.message).to.eq(\"Season with id 0 was not found.\");",
															"  pm.expect(body.path).to.eq(\"/v2/seasons/0\");",
															"",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/v2/seasons/0",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"seasons",
														"0"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "GET seasons/current",
							"item": [
								{
									"name": "200 OK",
									"item": [
										{
											"name": "GET seasons/current - OK",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"GET season current status code is 200\", () => {",
															"  pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"GET season current response body\", () => {",
															"  const body = pm.response.json();",
															"",
															"  pm.expect(body).to.have.property(\"season\");",
															"",
															"  const currentSeason = JSON.parse(pm.environment.get(\"currentSeason\"));",
															"",
															"  pm.expect(body.season.id).to.eq(currentSeason.id);",
															"  pm.expect(body.season.name).to.eq(currentSeason.name);",
															"  pm.expect(body.season.shortName).to.eq(currentSeason.shortName);",
															"  pm.expect(body.season.d11TeamBudget).to.eq(currentSeason.d11TeamBudget);",
															"  pm.expect(body.season.d11TeamMaxTransfers).to.eq(currentSeason.d11TeamMaxTransfers);",
															"  pm.expect(body.season.status).to.eq(currentSeason.status);",
															"  pm.expect(body.season.date).to.eq(currentSeason.date);",
															"  pm.expect(body.season.legacy).to.eq(currentSeason.legacy);",
															"",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/v2/seasons/current",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"seasons",
														"current"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "PUT seasons/{seasonId}",
							"item": [
								{
									"name": "200 OK",
									"item": [
										{
											"name": "Setup - Login Admin",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Setup login admin status code is 200\", () => {",
															"  pm.response.to.have.status(200);",
															"});",
															"",
															"const body = pm.response.json();",
															"pm.environment.set(\"jwt\", body.jwt);",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\": \"{{adminUsername}}\",\n    \"password\": \"{{adminPassword}}\",\n    \"persistent\": true\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/security/authenticate",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"security",
														"authenticate"
													]
												}
											},
											"response": []
										},
										{
											"name": "PUT seasons/{seasonId} - OK",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"PUT season status code is 200\", () => {",
															"  pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"PUT season response body\", () => {",
															"  const body = pm.response.json();",
															"",
															"  pm.expect(body).to.have.property(\"season\");",
															"",
															"  const season = JSON.parse(pm.environment.get(\"season\"));",
															"",
															"  pm.expect(body.season.id).to.eq(season.id);",
															"  pm.expect(body.season.name).to.eq(\"1970-1971\");",
															"  pm.expect(body.season.shortName).to.eq(\"70-71\");",
															"  pm.expect(body.season.d11TeamBudget).to.eq(5);",
															"  pm.expect(body.season.d11TeamMaxTransfers).to.eq(1);",
															"  pm.expect(body.season.status).to.eq(\"Pending\");",
															"  pm.expect(body.season.date).to.eq(\"1970-01-01\");",
															"  pm.expect(body.season.legacy).to.eq(true);",
															"",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{jwt}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"season\": {\n        \"name\": \"1970-1971\",\n        \"d11TeamBudget\": 5,\n        \"d11TeamMaxTransfers\": 1,\n        \"status\": \"Pending\",\n        \"date\": \"1970-01-01\",\n        \"legacy\": true\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/seasons/{{seasonId}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"seasons",
														"{{seasonId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Rollback - PUT seasons/{seasonId}",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const season = JSON.parse(pm.environment.get(\"season\"));",
															"",
															"pm.variables.set(\"localSeasonName\", season.name);",
															"",
															"pm.variables.set(\"localSeasonName\", season.name);",
															"pm.variables.set(\"localSeasonD11TeamBudget\", season.d11TeamBudget);",
															"pm.variables.set(\"localSeasonD11TeamMaxTransfers\", season.d11TeamMaxTransfers);",
															"pm.variables.set(\"localSeasonStatus\", season.status);",
															"pm.variables.set(\"localSeasonDate\", season.date);",
															"pm.variables.set(\"localSeasonLegacy\", season.legacy);",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"PUT season status code is 200\", () => {",
															"  pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Rollback PUT season response body\", () => {",
															"  const body = pm.response.json();",
															"",
															"  pm.expect(body).to.have.property(\"season\");",
															"",
															"  const season = JSON.parse(pm.environment.get(\"season\"));",
															"",
															"  pm.expect(body.season.id).to.eq(season.id);",
															"  pm.expect(body.season.name).to.eq(season.name);",
															"  pm.expect(body.season.shortName).to.eq(season.shortName);",
															"  pm.expect(body.season.d11TeamBudget).to.eq(season.d11TeamBudget);",
															"  pm.expect(body.season.d11TeamMaxTransfers).to.eq(season.d11TeamMaxTransfers);",
															"  pm.expect(body.season.status).to.eq(season.status);",
															"  pm.expect(body.season.date).to.eq(season.date);",
															"  pm.expect(body.season.legacy).to.eq(season.legacy);",
															"",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{jwt}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"season\": {\n        \"name\": \"{{localSeasonName}}\",\n        \"d11TeamBudget\": {{localSeasonD11TeamBudget}},\n        \"d11TeamMaxTransfers\": {{localSeasonD11TeamMaxTransfers}},\n        \"status\": \"{{localSeasonStatus}}\",\n        \"date\": \"{{localSeasonDate}}\",\n        \"legacy\": {{localSeasonLegacy}}\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/seasons/{{seasonId}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"seasons",
														"{{seasonId}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "400 Bad Request",
									"item": [
										{
											"name": "PUT seasons - Bad Request",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"PUT season status code is 400\", () => {",
															"  pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"PUT season bad request response body\", () => {",
															"  const body = pm.response.json();",
															"",
															"  pm.expect(body.uuid).to.match(new RegExp(pm.environment.get(\"uuidRegex\")));",
															"  let timestamp = new Date(body.timestamp);",
															"  pm.expect(isNaN(timestamp.getTime())).to.eq(false);",
															"  pm.expect(body.status).to.eq(400);",
															"  pm.expect(body.error).to.eq(\"Bad Request\");",
															"  pm.expect(body.message).to.eq(\"Invalid request content\");",
															"  pm.expect(body.path).to.eq(\"/v2/seasons/\" + pm.environment.get(\"seasonId\"));",
															"",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"season\": {\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/seasons/{{seasonId}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"seasons",
														"{{seasonId}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "401 Unauthorized",
									"item": [
										{
											"name": "PUT seasons - Unauthorized No Auth",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"PUT season status code is 401\", () => {",
															"  pm.response.to.have.status(401);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"season\": {\n        \"name\": \"1970-1971\",\n        \"d11TeamBudget\": 5,\n        \"d11TeamMaxTransfers\": 1,\n        \"status\": \"Pending\",\n        \"date\": \"1970-01-01\",\n        \"legacy\": false\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/seasons/{{seasonId}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"seasons",
														"{{seasonId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "PUT seasons - Unauthorized Invalid Auth",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"PUT season status code is 401\", () => {",
															"  pm.response.to.have.status(401);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{expiredJwt}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"season\": {\n        \"name\": \"1970-1971\",\n        \"d11TeamBudget\": 5,\n        \"d11TeamMaxTransfers\": 1,\n        \"status\": \"Pending\",\n        \"date\": \"1970-01-01\",\n        \"legacy\": false\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/seasons/{{seasonId}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"seasons",
														"{{seasonId}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "403 Forbidden",
									"item": [
										{
											"name": "Setup - Login User",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Setup login user status code is 200\", () => {",
															"  pm.response.to.have.status(200);",
															"});",
															"",
															"const body = pm.response.json();",
															"pm.environment.set(\"jwt\", body.jwt);",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\": \"{{userUsername}}\",\n    \"password\": \"{{userPassword}}\",\n    \"persistent\": true\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/security/authenticate",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"security",
														"authenticate"
													]
												}
											},
											"response": []
										},
										{
											"name": "PUT seasons - Forbidden",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"PUT season status code is 403\", () => {",
															"  pm.response.to.have.status(403);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{jwt}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"season\": {\n        \"name\": \"1970-1971\",\n        \"d11TeamBudget\": 5,\n        \"d11TeamMaxTransfers\": 1,\n        \"status\": \"Pending\",\n        \"date\": \"1970-01-01\",\n        \"legacy\": false\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/seasons/{{seasonId}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"seasons",
														"{{seasonId}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "404 Not Found",
									"item": [
										{
											"name": "Setup - Login Admin",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Setup login admin status code is 200\", () => {",
															"  pm.response.to.have.status(200);",
															"});",
															"",
															"const body = pm.response.json();",
															"pm.environment.set(\"jwt\", body.jwt);",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\": \"{{adminUsername}}\",\n    \"password\": \"{{adminPassword}}\",\n    \"persistent\": true\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/security/authenticate",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"security",
														"authenticate"
													]
												}
											},
											"response": []
										},
										{
											"name": "PUT seasons - Not Found",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"PUT season status code is 404\", () => {",
															"  pm.response.to.have.status(404);",
															"});",
															"",
															"pm.test(\"PUT season not found response body\", () => {",
															"  const body = pm.response.json();",
															"  pm.expect(body.uuid).to.match(new RegExp(pm.environment.get(\"uuidRegex\")));",
															"  let timestamp = new Date(body.timestamp);",
															"  pm.expect(isNaN(timestamp.getTime())).to.eq(false);",
															"  pm.expect(body.status).to.eq(404);",
															"  pm.expect(body.error).to.eq(\"Not Found\");",
															"  pm.expect(body.message).to.eq(\"Season with id 0 was not found.\");",
															"  pm.expect(body.path).to.eq(\"/v2/seasons/0\");",
															"",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{jwt}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"season\": {\n        \"name\": \"1970-1971\",\n        \"d11TeamBudget\": 5,\n        \"d11TeamMaxTransfers\": 1,\n        \"status\": \"Pending\",\n        \"date\": \"1970-01-01\",\n        \"legacy\": false\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/seasons/0",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"seasons",
														"0"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "transfer-windows",
					"item": [
						{
							"name": "GET transfer-windows/{transferWindowId}",
							"item": [
								{
									"name": "200 OK",
									"item": [
										{
											"name": "GET transfer-windows/{transferWindowId} - OK",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"GET transfer window status code is 200\", () => {",
															"  pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"GET transfer window response body\", () => {",
															"",
															"  const body = pm.response.json();",
															"  const transferWindow = JSON.parse(pm.environment.get(\"transferWindow\"));",
															"",
															"  pm.expect(body).to.have.property(\"transferWindow\");",
															"",
															"  pm.expect(body.transferWindow.id).to.eq(transferWindow.id);",
															"  pm.expect(body.transferWindow.transferWindowNumber).to.eq(transferWindow.transferWindowNumber);",
															"  pm.expect(body.transferWindow.draft).to.eq(transferWindow.draft);",
															"  pm.expect(body.transferWindow.status).to.eq(transferWindow.status);",
															"  pm.expect(body.transferWindow.datetime).to.eq(pm.globals.get(\"datetimeMinus2\"));",
															"",
															"  pm.expect(body).to.have.property(\"matchWeek\");",
															"",
															"  const transferWindowMatchWeek = JSON.parse(pm.environment.get(\"transferWindowMatchWeek\"));",
															"",
															"  pm.expect(body.matchWeek.id).to.eq(transferWindowMatchWeek.id);",
															"  pm.expect(body.matchWeek.matchWeekNumber).to.eq(transferWindowMatchWeek.matchWeekNumber);",
															"  pm.expect(body.matchWeek.elapsed).to.eq(transferWindowMatchWeek.elapsed);",
															"  pm.expect(body.matchWeek.status).to.eq(transferWindowMatchWeek.status);",
															"  pm.expect(body.matchWeek.date).to.eq(pm.globals.get(\"dateMinus2\"));",
															"",
															"  pm.expect(body).to.have.property(\"transferDays\");",
															"",
															"  const transferWindowTransferDays = JSON.parse(pm.environment.get(\"transferWindowTransferDays\"));",
															"  ",
															"  pm.expect(body.transferDays.length).to.eq(2);",
															"",
															"  for (let i = 0; i < body.transferDays.length; i++) {",
															"    pm.expect(body.transferDays[i].id).to.eq(transferWindowTransferDays[i].id);",
															"    pm.expect(body.transferDays[i].transferDayNumber).to.eq(transferWindowTransferDays[i].transferDayNumber);",
															"    pm.expect(body.transferDays[i].status).to.eq(transferWindowTransferDays[i].status);",
															"  }",
															"  ",
															"  pm.expect(body.transferDays[0].datetime).to.eq(pm.globals.get(\"datetimeMinus6\"));",
															"  pm.expect(body.transferDays[1].datetime).to.eq(pm.globals.get(\"datetimeMinus5\"));",
															"",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/v2/transfer-windows/{{transferWindowId}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"transfer-windows",
														"{{transferWindowId}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "POST transfer-windows",
							"item": [
								{
									"name": "201 Created",
									"item": [
										{
											"name": "Setup - Login Admin",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Setup login admin status code is 200\", () => {",
															"  pm.response.to.have.status(200);",
															"});",
															"",
															"const body = pm.response.json();",
															"pm.environment.set(\"jwt\", body.jwt);",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\": \"{{adminUsername}}\",\n    \"password\": \"{{adminPassword}}\",\n    \"persistent\": true\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/security/authenticate",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"security",
														"authenticate"
													]
												}
											},
											"response": []
										},
										{
											"name": "POST transfer-windows - OK",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"POST transfer window status code is 201\", () => {",
															"  pm.response.to.have.status(201);",
															"});",
															"",
															"pm.test(\"POST transfer window response body\", () => {",
															"  const body = pm.response.json();",
															"  ",
															"  const currentTransferWindow = JSON.parse(pm.environment.get(\"currentTransferWindow\"));",
															"",
															"  pm.expect(body).to.have.property(\"transferWindow\");",
															"",
															"  pm.expect(body.transferWindow).to.have.property(\"id\");",
															"  pm.environment.set(\"tempTransferWindowId\", body.transferWindow.id);  ",
															"  pm.expect(body.transferWindow.transferWindowNumber).to.eq(currentTransferWindow.transferWindowNumber + 1);",
															"  pm.expect(body.transferWindow.draft).to.eq(false);",
															"  pm.expect(body.transferWindow.status).to.eq(\"Pending\");",
															"  pm.expect(body.transferWindow.datetime).to.eq(pm.globals.get(\"datetimePlus1\"));",
															"",
															"  pm.expect(body).to.have.property(\"matchWeek\");",
															"",
															"  const currentTransferWindowMatchWeek = JSON.parse(pm.environment.get(\"currentTransferWindowMatchWeek\"));",
															"",
															"  pm.expect(body.matchWeek.matchWeekNumber).to.eq(currentTransferWindowMatchWeek.matchWeekNumber + 1);",
															"  pm.expect(body.matchWeek.date).to.eq(pm.globals.get(\"datePlus2\"));",
															"  pm.expect(body.matchWeek.elapsed).to.eq(0);",
															"  pm.expect(body.matchWeek.status).to.eq(\"Pending\");",
															"",
															"  pm.expect(body).to.have.property(\"transferDays\");",
															"",
															"  pm.expect(body.transferDays.length).to.eq(1);",
															"",
															"  pm.expect(body.transferDays[0].transferDayNumber).to.eq(1);",
															"  pm.expect(body.transferDays[0].status).to.eq('Pending');",
															"  pm.expect(body.transferDays[0].datetime).to.eq(pm.globals.get(\"datetimePlus2\"));",
															"",
															"});",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{jwt}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"datetime\": \"{{datetimePlus1}}\",\n    \"transferDayDelay\": 1\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/transfer-windows",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"transfer-windows"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "400 Bad Request",
									"item": [
										{
											"name": "POST transfer-windows - Bad Request",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"POST transfer window status code is 400\", () => {",
															"  pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"POST transfer window bad request response body\", () => {",
															"  const body = pm.response.json();",
															"",
															"  pm.expect(body.uuid).to.match(new RegExp(pm.environment.get(\"uuidRegex\")));",
															"  let timestamp = new Date(body.timestamp);",
															"  pm.expect(isNaN(timestamp.getTime())).to.eq(false);",
															"  pm.expect(body.status).to.eq(400);",
															"  pm.expect(body.error).to.eq(\"Bad Request\");",
															"  pm.expect(body.message).to.eq(\"Invalid request content\");",
															"  pm.expect(body.path).to.eq(\"/v2/transfer-windows\");",
															"",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{jwt}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/transfer-windows",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"transfer-windows"
													]
												}
											},
											"response": []
										},
										{
											"name": "Setup - Login Admin",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Setup login admin status code is 200\", () => {",
															"  pm.response.to.have.status(200);",
															"});",
															"",
															"const body = pm.response.json();",
															"pm.environment.set(\"jwt\", body.jwt);",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\": \"{{adminUsername}}\",\n    \"password\": \"{{adminPassword}}\",\n    \"persistent\": true\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/security/authenticate",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"security",
														"authenticate"
													]
												}
											},
											"response": []
										},
										{
											"name": "POST transfer-windows - Bad Request Invalid Datetime",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"POST transfer window status code is 400\", () => {",
															"  pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"POST transfer window bad request response body\", () => {",
															"  const body = pm.response.json();",
															"",
															"  pm.expect(body.uuid).to.match(new RegExp(pm.environment.get(\"uuidRegex\")));",
															"  let timestamp = new Date(body.timestamp);",
															"  pm.expect(isNaN(timestamp.getTime())).to.eq(false);",
															"  pm.expect(body.status).to.eq(400);",
															"  pm.expect(body.error).to.eq(\"Bad Request\");",
															"  pm.expect(body.message).to.eq(\"Datetime is missing or invalid\");",
															"  pm.expect(body.path).to.eq(\"/v2/transfer-windows\");",
															"",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{jwt}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"datetime\": \"1970-01-01T00:00:00\",\n    \"transferDayDelay\": 1\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/transfer-windows",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"transfer-windows"
													]
												}
											},
											"response": []
										},
										{
											"name": "POST transfer-windows - Bad Request Invalid Transfer Day Delay",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"POST transfer window status code is 400\", () => {",
															"  pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"POST transfer window bad request response body\", () => {",
															"  const body = pm.response.json();",
															"",
															"  pm.expect(body.uuid).to.match(new RegExp(pm.environment.get(\"uuidRegex\")));",
															"",
															"  let timestamp = new Date(body.timestamp);",
															"  pm.expect(isNaN(timestamp.getTime())).to.eq(false);",
															"  pm.expect(body.status).to.eq(400);",
															"  pm.expect(body.error).to.eq(\"Bad Request\");",
															"  pm.expect(body.message).to.eq(\"Transfer day delay is not positive\");",
															"  pm.expect(body.path).to.eq(\"/v2/transfer-windows\");",
															"",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{jwt}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"datetime\": \"{{datetimePlus1}}\",\n    \"transferDayDelay\": -1\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/transfer-windows",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"transfer-windows"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "401 Unauthorized",
									"item": [
										{
											"name": "POST transfer-windows - Unauthorized No Auth",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"POST transfer window status code is 401\", () => {",
															"  pm.response.to.have.status(401);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"datetime\": \"{{tomorrow}}\",\n    \"transferDayDelay\": 1\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/transfer-windows",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"transfer-windows"
													]
												}
											},
											"response": []
										},
										{
											"name": "POST transfer-windows - Unauthorized Invalid Auth",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"POST transfer window status code is 401\", () => {",
															"  pm.response.to.have.status(401);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{expiredJwt}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"datetime\": \"{{tomorrow}}\",\n    \"transferDayDelay\": 1\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/transfer-windows",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"transfer-windows"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "403 Forbidden",
									"item": [
										{
											"name": "Setup - Login User",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Setup login user status code is 200\", () => {",
															"  pm.response.to.have.status(200);",
															"});",
															"",
															"const body = pm.response.json();",
															"pm.environment.set(\"jwt\", body.jwt);",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\": \"{{userUsername}}\",\n    \"password\": \"{{userPassword}}\",\n    \"persistent\": true\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/security/authenticate",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"security",
														"authenticate"
													]
												}
											},
											"response": []
										},
										{
											"name": "POST transfer-windows - Forbidden",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"POST transfer window status code is 403\", () => {",
															"  pm.response.to.have.status(403);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{jwt}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"datetime\": \"{{tomorrow}}\",\n    \"transferDayDelay\": 1\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/transfer-windows",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"transfer-windows"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "409 Conflict",
									"item": [
										{
											"name": "Setup - Login Admin",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Setup login admin status code is 200\", () => {",
															"  pm.response.to.have.status(200);",
															"});",
															"",
															"const body = pm.response.json();",
															"pm.environment.set(\"jwt\", body.jwt);",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\": \"{{adminUsername}}\",\n    \"password\": \"{{adminPassword}}\",\n    \"persistent\": true\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/security/authenticate",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"security",
														"authenticate"
													]
												}
											},
											"response": []
										},
										{
											"name": "POST transfer-windows - Conflict Current Transfer Window Not Finished",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"POST transfer window status code is 409\", () => {",
															"  pm.response.to.have.status(409);",
															"});",
															"",
															"pm.test(\"POST transfer window conflict response body\", () => {",
															"  const body = pm.response.json();",
															"",
															"  let timestamp = new Date(body.timestamp);",
															"  pm.expect(isNaN(timestamp.getTime())).to.eq(false);",
															"  pm.expect(body.message).to.match(/Current transfer window status is (Pending|Active)/);",
															"  pm.expect(body.method).to.eq(\"POST\");",
															"  pm.expect(body.path).to.eq(\"/v2/transfer-windows\");",
															"",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{jwt}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"datetime\": \"{{datetimePlus2}}\",\n    \"transferDayDelay\": 1\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/transfer-windows",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"transfer-windows"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "DELETE transfer-windows",
							"item": [
								{
									"name": "200 OK",
									"item": [
										{
											"name": "Setup - Login Admin",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Setup login admin status code is 200\", () => {",
															"  pm.response.to.have.status(200);",
															"});",
															"",
															"const body = pm.response.json();",
															"pm.environment.set(\"jwt\", body.jwt);",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\": \"{{adminUsername}}\",\n    \"password\": \"{{adminPassword}}\",\n    \"persistent\": true\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/security/authenticate",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"security",
														"authenticate"
													]
												}
											},
											"response": []
										},
										{
											"name": "DELETE transfer-windows - OK",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"DELETE transfer window status code is 204\", () => {",
															"  pm.response.to.have.status(204);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{jwt}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/v2/transfer-windows/{{tempTransferWindowId}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"transfer-windows",
														"{{tempTransferWindowId}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "400 Bad Request",
									"item": [
										{
											"name": "Setup - Login Admin",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Setup login admin status code is 200\", () => {",
															"  pm.response.to.have.status(200);",
															"});",
															"",
															"const body = pm.response.json();",
															"pm.environment.set(\"jwt\", body.jwt);",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\": \"{{adminUsername}}\",\n    \"password\": \"{{adminPassword}}\",\n    \"persistent\": true\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/security/authenticate",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"security",
														"authenticate"
													]
												}
											},
											"response": []
										},
										{
											"name": "DELETE transfer-windows - Bad Request",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"DELETE transfer window status code is 400\", () => {",
															"  pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"DELETE transfer window bad request response body\", () => {",
															"  const body = pm.response.json();",
															"",
															"  pm.expect(body.uuid).to.match(new RegExp(pm.environment.get(\"uuidRegex\")));",
															"  let timestamp = new Date(body.timestamp);",
															"  pm.expect(isNaN(timestamp.getTime())).to.eq(false);",
															"  pm.expect(body.status).to.eq(400);",
															"  pm.expect(body.error).to.eq(\"Bad Request\");",
															"  pm.expect(body.message).to.eq(\"Invalid transfer window id: INVALID\");",
															"  pm.expect(body.path).to.eq(\"/v2/transfer-windows/INVALID\");",
															"",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{jwt}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/v2/transfer-windows/INVALID",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"transfer-windows",
														"INVALID"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "401 Unauthorized",
									"item": [
										{
											"name": "DELETE transfer-windows - Unauthorized No Auth",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"DELETE transfer window status code is 401\", () => {",
															"  pm.response.to.have.status(401);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/v2/transfer-windows/{{currentTransferWindowId}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"transfer-windows",
														"{{currentTransferWindowId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "DELETE transfer-windows - Unauthorized Invalid Auth",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"DELETE transfer window status code is 401\", () => {",
															"  pm.response.to.have.status(401);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{expiredJwt}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/v2/transfer-windows/{{currentTransferWindowId}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"transfer-windows",
														"{{currentTransferWindowId}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "403 Forbidden",
									"item": [
										{
											"name": "Setup - Login User",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Setup login user status code is 200\", () => {",
															"  pm.response.to.have.status(200);",
															"});",
															"",
															"const body = pm.response.json();",
															"pm.environment.set(\"jwt\", body.jwt);",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\": \"{{userUsername}}\",\n    \"password\": \"{{userPassword}}\",\n    \"persistent\": true\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/security/authenticate",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"security",
														"authenticate"
													]
												}
											},
											"response": []
										},
										{
											"name": "DELETE transfer-windows - Forbidden",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"DELETE transfer window status code is 403\", () => {",
															"  pm.response.to.have.status(403);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{jwt}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/v2/transfer-windows/{{currentTransferWindowId}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"transfer-windows",
														"{{currentTransferWindowId}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "404 Not Found",
									"item": [
										{
											"name": "Setup - Login Admin",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Setup login admin status code is 200\", () => {",
															"  pm.response.to.have.status(200);",
															"});",
															"",
															"const body = pm.response.json();",
															"pm.environment.set(\"jwt\", body.jwt);",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\": \"{{adminUsername}}\",\n    \"password\": \"{{adminPassword}}\",\n    \"persistent\": true\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/security/authenticate",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"security",
														"authenticate"
													]
												}
											},
											"response": []
										},
										{
											"name": "DELETE transfer-windows - Not Found",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"DELETE transfer window status code is 404\", () => {",
															"  pm.response.to.have.status(404);",
															"});",
															"",
															"pm.test(\"DELETE transfer window not found response body\", () => {",
															"  const body = pm.response.json();",
															"",
															"  pm.expect(body.uuid).to.match(new RegExp(pm.environment.get(\"uuidRegex\")));",
															"  let timestamp = new Date(body.timestamp);",
															"  pm.expect(isNaN(timestamp.getTime())).to.eq(false);",
															"  pm.expect(body.status).to.eq(404);",
															"  pm.expect(body.error).to.eq(\"Not Found\");",
															"  pm.expect(body.message).to.eq(\"Transfer window with id 0 was not found.\");",
															"  pm.expect(body.path).to.eq(\"/v2/transfer-windows/0\");",
															"",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{jwt}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/v2/transfer-windows/0",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"transfer-windows",
														"0"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "409 Conflict",
									"item": [
										{
											"name": "Setup - Login Admin",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Setup login admin status code is 200\", () => {",
															"  pm.response.to.have.status(200);",
															"});",
															"",
															"const body = pm.response.json();",
															"pm.environment.set(\"jwt\", body.jwt);",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\": \"{{adminUsername}}\",\n    \"password\": \"{{adminPassword}}\",\n    \"persistent\": true\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/security/authenticate",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"security",
														"authenticate"
													]
												}
											},
											"response": []
										},
										{
											"name": "DELETE transfer-windows - Status Not Pending",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"DELETE transfer window status code is 409\", () => {",
															"  pm.response.to.have.status(409);",
															"});",
															"",
															"pm.test(\"DELETE transfer window conflict response body\", () => {",
															"  const body = pm.response.json();",
															"",
															"  let timestamp = new Date(body.timestamp);",
															"  pm.expect(isNaN(timestamp.getTime())).to.eq(false);",
															"  pm.expect(body.message).to.match(/Transfer window status is (Active|Finished)/);",
															"  pm.expect(body.method).to.eq(\"DELETE\");",
															"  pm.expect(body.path).to.eq(\"/v2/transfer-windows/\" + pm.environment.get(\"currentTransferWindowId\"));",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{jwt}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/v2/transfer-windows/{{currentTransferWindowId}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"transfer-windows",
														"{{currentTransferWindowId}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"const moment = require('moment');",
					"",
					"pm.globals.set(\"date\", moment().format(\"YYYY-MM-DD\"));",
					"",
					"// Add one minute to these so they'll always be later than database datetimes set to 00:00:00.",
					"// This will be useful whenever we're trying to create a current of anything and (hopefully)) not be a problem otherwise",
					"pm.globals.set(\"datetime\", moment()",
					" .add(1, 'minutes')",
					" .set(0, 'seconds')",
					" .format(\"YYYY-MM-DDTHH:mm:ss\"));",
					"",
					"for (let i = 1; i <= 10; i++) {",
					"  pm.globals.set(\"datePlus\" + i, moment()",
					"    .add(i, 'days')",
					"    .format(\"YYYY-MM-DD\"));",
					"",
					"  pm.globals.set(\"dateMinus\" + i, moment()",
					"    .subtract(i, 'days') ",
					"    .format(\"YYYY-MM-DD\"));",
					"",
					"  // See above",
					"  pm.globals.set(\"datetimePlus\" + i, moment()",
					"   .add(i, 'days')",
					"   .format(\"YYYY-MM-DDT00:01:00\"));",
					"",
					"  pm.globals.set(\"datetimeMinus\" + i, moment()",
					"   .subtract(i, 'days')",
					"   .format(\"YYYY-MM-DDT00:00:00\"));",
					"}",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}