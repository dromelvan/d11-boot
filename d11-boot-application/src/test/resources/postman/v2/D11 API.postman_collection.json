{
	"info": {
		"_postman_id": "6c3884b6-93da-4056-9766-7feb6441532c",
		"name": "D11 API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "23053206"
	},
	"item": [
		{
			"name": "v2",
			"item": [
				{
					"name": "security",
					"item": [
						{
							"name": "POST security/authenticate",
							"item": [
								{
									"name": "200 OK",
									"item": [
										{
											"name": "POST security/authenticate - Admin Non Persistent",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const moment = require('moment');",
															"",
															"pm.test(\"POST security authenticate admin non persistent status code is 200\", () => {",
															"  pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"POST security authenticate admin non persistent response body\", () => {",
															"  const body = pm.response.json();",
															"  ",
															"  pm.expect(body).to.have.property(\"user\");",
															"",
															"  pm.expect(body.user.name).to.eq(pm.environment.get(\"adminName\"));",
															"",
															"  pm.expect(body).to.have.property(\"jwt\");",
															"  pm.expect(body.jwt).to.match(new RegExp(pm.environment.get(\"jwtRegex\")));",
															"",
															"  pm.expect(body).to.have.property(\"expiresAt\");  ",
															"  let expiresAt = new Date(body.expiresAt);",
															"  pm.expect(isNaN(expiresAt.getTime())).to.eq(false);",
															"",
															"  // It's tricky to define what the JWT expiry time should be exactly since we can't",
															"  // know at what exact instant it is created on the server.So, we'll just check that ",
															"  // it is within one minute of 24 hours from now.",
															"  let now = moment();",
															"  now.add(24 * 60 * 60 - 30, \"seconds\");",
															"  pm.expect(now.isBefore(expiresAt)).to.eq(true);",
															"",
															"  now.add(60, \"seconds\");",
															"  pm.expect(now.isAfter(expiresAt)).to.eq(true);",
															"",
															"  pm.expect(body).to.have.property(\"persistent\");",
															"  pm.expect(body.persistent).to.eq(false);",
															"",
															"  pm.environment.set(\"jwt\", body.jwt);",
															"});",
															"",
															"pm.test(\"POST security authenticate admin non persistent cookie\", () => {",
															"  const cookieJar = pm.cookies.jar();",
															" ",
															"  cookieJar.getAll(pm.environment.get(\"host\"), function (error, cookies) {  ",
															"      pm.expect(cookies.members.length).to.eq(1);",
															"      ",
															"      const cookie = cookies.members[0];",
															"",
															"      pm.expect(cookie.name).to.eq(\"refreshToken\");",
															"      pm.expect(cookie.maxAge).to.eq(24 * 60 * 60);",
															"      pm.expect(cookie.value).to.match(new RegExp(pm.environment.get(\"uuidRegex\")));",
															"  });",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\": \"{{adminUsername}}\",\n    \"password\": \"{{adminPassword}}\",\n    \"persistent\": false\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/security/authenticate",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"security",
														"authenticate"
													]
												}
											},
											"response": []
										},
										{
											"name": "POST security/authenticate - Admin Persistent",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const moment = require('moment');",
															"",
															"pm.test(\"POST security authenticate admin persistent status code is 200\", () => {",
															"  pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"POST security authenticate admin persistent response body\", () => {",
															"  const body = pm.response.json();",
															"  ",
															"  pm.expect(body).to.have.property(\"user\");",
															"  pm.expect(body.user.name).to.eq(pm.environment.get(\"adminName\"));",
															"",
															"  pm.expect(body).to.have.property(\"jwt\");",
															"  pm.expect(body.jwt).to.match(new RegExp(pm.environment.get(\"jwtRegex\")));",
															"",
															"  pm.expect(body).to.have.property(\"expiresAt\");  ",
															"  let expiresAt = new Date(body.expiresAt);",
															"  pm.expect(isNaN(expiresAt.getTime())).to.eq(false); ",
															"",
															"  // It's tricky to define what the JWT expiry time should be exactly since we can't",
															"  // know at what exact instant it is created on the server.So, we'll just check that ",
															"  // it is within one minute of 24 hours from now.",
															"  let date = new Date();",
															"  date.setDate(date.getDate() + 30);",
															"  date.setMinutes(date.getMinutes() - 1);",
															"",
															"  pm.expect(date.isBefore(expiresAt)).to.eq(true);",
															"",
															"  date.setMinutes(date.getMinutes() + 2);",
															"  ",
															"  pm.expect(date.isAfter(expiresAt)).to.eq(true);",
															"",
															"  pm.expect(body).to.have.property(\"persistent\");",
															"  pm.expect(body.persistent).to.eq(true);",
															"",
															"  pm.environment.set(\"jwt\", body.jwt);",
															"});",
															"",
															"pm.test(\"POST security authenticate admin persistent cookie\", () => {",
															"  const cookieJar = pm.cookies.jar();",
															" ",
															"  cookieJar.getAll(pm.environment.get(\"host\"), function (error, cookies) {  ",
															"      pm.expect(cookies.members.length).to.eq(1);",
															"      ",
															"      const cookie = cookies.members[0];",
															"",
															"      pm.expect(cookie.name).to.eq(\"refreshToken\");",
															"      pm.expect(cookie.maxAge).to.eq(30 * 24 * 60 * 60);",
															"      pm.expect(cookie.value).to.match(new RegExp(pm.environment.get(\"uuidRegex\")));",
															"  });",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\": \"{{adminUsername}}\",\n    \"password\": \"{{adminPassword}}\",\n    \"persistent\": true\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/security/authenticate",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"security",
														"authenticate"
													]
												}
											},
											"response": []
										},
										{
											"name": "POST security/authenticate - User Non Persistent",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const moment = require('moment');",
															"",
															"pm.test(\"POST security authenticate user non persistent status code is 200\", () => {",
															"  pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"POST security authenticate user non persistent response body\", () => {",
															"  const body = pm.response.json();",
															"  ",
															"  pm.expect(body).to.have.property(\"user\");",
															"  pm.expect(body.user.name).to.eq(pm.environment.get(\"userName\"));",
															"",
															"  pm.expect(body).to.have.property(\"jwt\");",
															"  pm.expect(body.jwt).to.match(new RegExp(pm.environment.get(\"jwtRegex\")));",
															"",
															"  pm.expect(body).to.have.property(\"expiresAt\");  ",
															"  let expiresAt = new Date(body.expiresAt);",
															"  pm.expect(isNaN(expiresAt.getTime())).to.eq(false);",
															"",
															"  // It's tricky to define what the JWT expiry time should be exactly since we can't",
															"  // know at what exact instant it is created on the server.So, we'll just check that ",
															"  // it is within one minute of 24 hours from now.",
															"  let now = moment();",
															"  now.add(24 * 60 * 60 - 30, \"seconds\");",
															"  pm.expect(now.isBefore(expiresAt)).to.eq(true);",
															"",
															"  now.add(60, \"seconds\");",
															"  pm.expect(now.isAfter(expiresAt)).to.eq(true);",
															"",
															"  pm.expect(body).to.have.property(\"persistent\");",
															"  pm.expect(body.persistent).to.eq(false);",
															"",
															"  pm.environment.set(\"jwt\", body.jwt);",
															"});",
															"",
															"pm.test(\"POST security authenticate user non persistent cookie\", () => {",
															"  const cookieJar = pm.cookies.jar();",
															" ",
															"  cookieJar.getAll(pm.environment.get(\"host\"), function (error, cookies) {  ",
															"      pm.expect(cookies.members.length).to.eq(1);",
															"      ",
															"      const cookie = cookies.members[0];",
															"",
															"      pm.expect(cookie.name).to.eq(\"refreshToken\");",
															"      pm.expect(cookie.maxAge).to.eq(24 * 60 * 60);",
															"      pm.expect(cookie.value).to.match(new RegExp(pm.environment.get(\"uuidRegex\")));",
															"  });",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\": \"{{userUsername}}\",\n    \"password\": \"{{userPassword}}\",\n    \"persistent\": false\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/security/authenticate",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"security",
														"authenticate"
													]
												}
											},
											"response": []
										},
										{
											"name": "POST security/authenticate - User Persistent",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const moment = require('moment');",
															"",
															"pm.test(\"POST security authenticate user persistent status code is 200\", () => {",
															"  pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"POST security authenticate user persistent response body\", () => {",
															"  const body = pm.response.json();",
															"  ",
															"  pm.expect(body).to.have.property(\"user\");",
															"  pm.expect(body.user.name).to.eq(pm.environment.get(\"userName\"));",
															"",
															"  pm.expect(body).to.have.property(\"jwt\");",
															"  pm.expect(body.jwt).to.match(new RegExp(pm.environment.get(\"jwtRegex\")));",
															"",
															"  pm.expect(body).to.have.property(\"expiresAt\");  ",
															"  let expiresAt = new Date(body.expiresAt);",
															"  pm.expect(isNaN(expiresAt.getTime())).to.eq(false);",
															"",
															"  // It's tricky to define what the JWT expiry time should be exactly since we can't",
															"  // know at what exact instant it is created on the server.So, we'll just check that ",
															"  // it is within one minute of 24 hours from now.",
															"  let date = new Date();",
															"  date.setDate(date.getDate() + 30);",
															"  date.setMinutes(date.getMinutes() - 1);",
															"",
															"  pm.expect(date.isBefore(expiresAt)).to.eq(true);",
															"",
															"  date.setMinutes(date.getMinutes() + 2);",
															"",
															"  pm.expect(date.isAfter(expiresAt)).to.eq(true);",
															"",
															"  pm.expect(body).to.have.property(\"persistent\");",
															"  pm.expect(body.persistent).to.eq(true);",
															"",
															"  pm.environment.set(\"jwt\", body.jwt);",
															"});",
															"",
															"pm.test(\"POST security authenticate user persistent cookie\", () => {",
															"  const cookieJar = pm.cookies.jar();",
															"  const body = pm.response.json();",
															" ",
															"  cookieJar.getAll(pm.environment.get(\"host\"), function (error, cookies) {  ",
															"      pm.expect(cookies.members.length).to.eq(1);",
															"      ",
															"      const cookie = cookies.members[0];",
															"",
															"      pm.expect(cookie.name).to.eq(\"refreshToken\");",
															"      pm.expect(cookie.maxAge).to.eq(30 * 24 * 60 * 60);",
															"      pm.expect(cookie.value).to.match(new RegExp(pm.environment.get(\"uuidRegex\")));",
															"  });",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\": \"{{userUsername}}\",\n    \"password\": \"{{userPassword}}\",\n    \"persistent\": true\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/security/authenticate",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"security",
														"authenticate"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "400 Bad Request",
									"item": [
										{
											"name": "POST security/authenticate - Bad Request Missing Properties",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"POST security authenticate missing username Status code is 400\", () => {",
															"  pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"POST security authenticate missing username response body\", () => {",
															"  const body = pm.response.json();",
															"",
															"  let timestamp = new Date(body.timestamp);",
															"  pm.expect(isNaN(timestamp.getTime())).to.eq(false);",
															"  pm.expect(body.error).to.eq(\"Bad Request\");",
															"  pm.expect(body.method).to.eq(\"POST\");",
															"  pm.expect(body.path).to.eq(\"/v2/security/authenticate\");",
															"",
															"  pm.expect(body.validationErrors[0].property).to.eq(\"password\");",
															"  pm.expect(body.validationErrors[0].error).to.eq(\"is missing\");",
															"",
															"  pm.expect(body.validationErrors[1].property).to.eq(\"username\");",
															"  pm.expect(body.validationErrors[1].error).to.eq(\"is missing\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/security/authenticate",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"security",
														"authenticate"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "401 Unauthorized",
									"item": [
										{
											"name": "POST security/authenticate - Invalid Credentials",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"POST security authenticate invalid credentials status code is 401\", () => {",
															"  pm.response.to.have.status(401);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\": \"invalid\",\n    \"password\": \"invalid\",\n    \"persistent\": true\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/security/authenticate",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"security",
														"authenticate"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "POST security/authorize",
							"item": [
								{
									"name": "200 OK",
									"item": [
										{
											"name": "Setup - Login Admin",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Setup login admin status code is 200\", () => {",
															"  pm.response.to.have.status(200);",
															"});",
															"",
															"const body = pm.response.json();",
															"pm.environment.set(\"jwt\", body.jwt);",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\": \"{{adminUsername}}\",\n    \"password\": \"{{adminPassword}}\",\n    \"persistent\": true\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/security/authenticate",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"security",
														"authenticate"
													]
												}
											},
											"response": []
										},
										{
											"name": "POST security/authorize - Admin",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const moment = require('moment');",
															"",
															"pm.test(\"POST security authorize admin status code is 200\", () => {",
															"  pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"POST security authorize admin response body\", () => {",
															"  const body = pm.response.json();",
															"  ",
															"  pm.expect(body).to.have.property(\"user\");",
															"  pm.expect(body.user.name).to.eq(pm.environment.get(\"adminName\"));",
															"",
															"  pm.expect(body).to.have.property(\"jwt\");",
															"  pm.expect(body.jwt).to.match(new RegExp(pm.environment.get(\"jwtRegex\")));",
															"",
															"  pm.expect(body).to.have.property(\"expiresAt\");  ",
															"  let expiresAt = new Date(body.expiresAt);",
															"  pm.expect(isNaN(expiresAt.getTime())).to.eq(false);",
															"",
															"  // It's tricky to define what the JWT expiry time should be exactly since we can't",
															"  // know at what exact instant it is created on the server.So, we'll just check that ",
															"  // it is within one minute of 24 hours from now.",
															"  let date = new Date();",
															"  date.setDate(date.getDate() + 30);",
															"  date.setMinutes(date.getMinutes() - 1);",
															"",
															"  pm.expect(date.isBefore(expiresAt)).to.eq(true);",
															"",
															"  date.setMinutes(date.getMinutes() + 2);",
															"",
															"  pm.expect(date.isAfter(expiresAt)).to.eq(true);",
															"",
															"  pm.expect(body).to.have.property(\"persistent\");",
															"  pm.expect(body.persistent).to.eq(true);",
															"",
															"  pm.environment.set(\"jwt\", body.jwt);",
															"});",
															"",
															"pm.test(\"POST security authorize admin cookie\", () => {",
															"  const cookieJar = pm.cookies.jar();",
															" ",
															"  cookieJar.getAll(pm.environment.get(\"host\"), function (error, cookies) {  ",
															"      pm.expect(cookies.members.length).to.eq(1);",
															"      ",
															"      const cookie = cookies.members[0];",
															"",
															"      pm.expect(cookie.name).to.eq(\"refreshToken\");",
															"      pm.expect(cookie.maxAge).to.eq(30 * 24 * 60 * 60);",
															"      pm.expect(cookie.value).to.match(new RegExp(pm.environment.get(\"uuidRegex\")));",
															"  });",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/v2/security/authorize",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"security",
														"authorize"
													]
												}
											},
											"response": []
										},
										{
											"name": "Setup - Login User",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Setup login user status code is 200\", () => {",
															"  pm.response.to.have.status(200);",
															"});",
															"",
															"const body = pm.response.json();",
															"pm.environment.set(\"jwt\", body.jwt);",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\": \"{{userUsername}}\",\n    \"password\": \"{{userPassword}}\",\n    \"persistent\": true\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/security/authenticate",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"security",
														"authenticate"
													]
												}
											},
											"response": []
										},
										{
											"name": "POST security/authorize - User",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const moment = require('moment');",
															"",
															"pm.test(\"POST security authorize user status code is 200\", () => {",
															"  pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"POST security authorize user response body\", () => {",
															"  const body = pm.response.json();",
															"  ",
															"  pm.expect(body).to.have.property(\"user\");",
															"  pm.expect(body.user.name).to.eq(pm.environment.get(\"userName\"));",
															"",
															"  pm.expect(body).to.have.property(\"jwt\");",
															"  pm.expect(body.jwt).to.match(new RegExp(pm.environment.get(\"jwtRegex\")));",
															"",
															"  pm.expect(body).to.have.property(\"expiresAt\");  ",
															"  let expiresAt = new Date(body.expiresAt);",
															"  pm.expect(isNaN(expiresAt.getTime())).to.eq(false);",
															"",
															"  // It's tricky to define what the JWT expiry time should be exactly since we can't",
															"  // know at what exact instant it is created on the server.So, we'll just check that ",
															"  // it is within one minute of 24 hours from now.",
															"  let date = new Date();",
															"  date.setDate(date.getDate() + 30);",
															"  date.setMinutes(date.getMinutes() - 1);",
															"",
															"  pm.expect(date.isBefore(expiresAt)).to.eq(true);",
															"",
															"  date.setMinutes(date.getMinutes() + 2);",
															"",
															"  pm.expect(date.isAfter(expiresAt)).to.eq(true);",
															"",
															"  pm.expect(body).to.have.property(\"persistent\");",
															"  pm.expect(body.persistent).to.eq(true);",
															"",
															"  pm.environment.set(\"jwt\", body.jwt);",
															"});",
															"",
															"pm.test(\"POST security authorize user cookie\", () => {",
															"  const cookieJar = pm.cookies.jar();",
															" ",
															"  cookieJar.getAll(pm.environment.get(\"host\"), function (error, cookies) {  ",
															"      pm.expect(cookies.members.length).to.eq(1);",
															"      ",
															"      const cookie = cookies.members[0];",
															"",
															"      pm.expect(cookie.name).to.eq(\"refreshToken\");",
															"      pm.expect(cookie.maxAge).to.eq(30 * 24 * 60 * 60);",
															"      pm.expect(cookie.value).to.match(new RegExp(pm.environment.get(\"uuidRegex\")));",
															"  });",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/v2/security/authorize",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"security",
														"authorize"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "400 Bad Request",
									"item": [
										{
											"name": "POST security/authorize - Bad Request Invalid Refresh Token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"POST security authorize invalid refresh token status code is 400\", () => {",
															"  pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"POST security authorize invalid refresh token response body\", () => {",
															"  const body = pm.response.json();",
															"",
															"  let timestamp = new Date(body.timestamp);",
															"  pm.expect(isNaN(timestamp.getTime())).to.eq(false);",
															"  pm.expect(body.error).to.eq(\"Bad Request\");",
															"  pm.expect(body.method).to.eq(\"POST\");",
															"  pm.expect(body.path).to.eq(\"/v2/security/authorize\");",
															"",
															"  pm.expect(body.validationErrors[0].property).to.eq(\"refreshToken\");",
															"  pm.expect(body.validationErrors[0].error).to.eq(\"Invalid UUID string: invalid\");",
															"});",
															"",
															"pm.test(\"POST security authorize invalid refresh token cookie\", () => {",
															"  const cookieJar = pm.cookies.jar();",
															" ",
															"  cookieJar.getAll(pm.environment.get(\"host\"), function (error, cookies) {  ",
															"      pm.expect(cookies.members.length).to.eq(1);",
															"      ",
															"      const cookie = cookies.members[0];",
															"",
															"      pm.expect(cookie.name).to.eq(\"refreshToken\");",
															"      pm.expect(cookie.maxAge).to.eq(0);",
															"      pm.expect(cookie.value).to.eq(\"invalid\");",
															"",
															"  });",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const cookieJar = pm.cookies.jar();",
															"",
															"cookieJar.set(pm.environment.get(\"host\"), \"refreshToken\", \"invalid\", function(error, cookie) {",
															"  // Set invalid token",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/v2/security/authorize",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"security",
														"authorize"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "401 Unauthorized",
									"item": [
										{
											"name": "POST security/authorize - Missing Cookie",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"POST security authorize missing cookie status code is 401\", () => {",
															"  pm.response.to.have.status(401);",
															"});",
															"",
															"pm.test(\"POST security authorize missing cookie cookie\", () => {",
															"  const cookieJar = pm.cookies.jar();",
															" ",
															"  cookieJar.getAll(pm.environment.get(\"host\"), function (error, cookies) {  ",
															"      pm.expect(cookies.members.length).to.eq(0);      ",
															"  });",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const cookieJar = pm.cookies.jar();",
															"",
															"cookieJar.clear(pm.environment.get(\"host\"), function (error) {",
															"  // Clear all cookies",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/v2/security/authorize",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"security",
														"authorize"
													]
												}
											},
											"response": []
										},
										{
											"name": "POST security/authorize - Unauthorized Refresh Token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"POST security authorize unauthorized refresh token status code is 401\", () => {",
															"  pm.response.to.have.status(401);",
															"});",
															"",
															"pm.test(\"POST security authorize unauthorized refresh token cookie\", () => {",
															"  const cookieJar = pm.cookies.jar();",
															" ",
															"  cookieJar.getAll(pm.environment.get(\"host\"), function (error, cookies) {  ",
															"      pm.expect(cookies.members.length).to.eq(0);      ",
															"  });",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const cookieJar = pm.cookies.jar();",
															"",
															"cookieJar.set(pm.environment.get(\"host\"), \"refreshToken\", \"00000000-0000-0000-0000-000000000000\", function(error, cookie) {",
															"  // Set invalid token",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/v2/security/authorize",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"security",
														"authorize"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "POST security/unauthorize",
							"item": [
								{
									"name": "200 OK",
									"item": [
										{
											"name": "Setup - Login Admin",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Setup login admin status code is 200\", () => {",
															"  pm.response.to.have.status(200);",
															"});",
															"",
															"const body = pm.response.json();",
															"pm.environment.set(\"jwt\", body.jwt);",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\": \"{{adminUsername}}\",\n    \"password\": \"{{adminPassword}}\",\n    \"persistent\": true\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/security/authenticate",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"security",
														"authenticate"
													]
												}
											},
											"response": []
										},
										{
											"name": "POST security/unauthorize - Admin",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"POST security unauthorize admin status code is 200\", () => {",
															"  pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"POST security unauthorize admin response body\", () => {",
															"  const body = pm.response.json();",
															"  ",
															"  pm.expect(body.loggedOut).to.eq(true);",
															"});",
															"",
															"pm.test(\"POST security unauthorize admin cookie\", () => {",
															"  const cookieJar = pm.cookies.jar();",
															" ",
															"  cookieJar.getAll(pm.environment.get(\"host\"), function (error, cookies) {  ",
															"      pm.expect(cookies.members.length).to.eq(0);",
															"  });",
															"});",
															"",
															"pm.environment.set(\"jwt\", \"\");",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/v2/security/unauthorize",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"security",
														"unauthorize"
													]
												}
											},
											"response": []
										},
										{
											"name": "Setup - Login User",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Setup login admin status code is 200\", () => {",
															"  pm.response.to.have.status(200);",
															"});",
															"",
															"const body = pm.response.json();",
															"pm.environment.set(\"jwt\", body.jwt);",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\": \"{{userUsername}}\",\n    \"password\": \"{{userPassword}}\",\n    \"persistent\": true\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/security/authenticate",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"security",
														"authenticate"
													]
												}
											},
											"response": []
										},
										{
											"name": "POST security/unauthorize - User",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"POST security unauthorize user status code is 200\", () => {",
															"  pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"POST security unauthorize user response body\", () => {",
															"  const body = pm.response.json();",
															"  ",
															"  pm.expect(body.loggedOut).to.eq(true);",
															"});",
															"",
															"pm.test(\"POST security unauthorize user cookie\", () => {",
															"  const cookieJar = pm.cookies.jar();",
															" ",
															"  cookieJar.getAll(pm.environment.get(\"host\"), function (error, cookies) {  ",
															"      pm.expect(cookies.members.length).to.eq(0);",
															"  });",
															"});",
															"",
															"pm.environment.set(\"jwt\", \"\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/v2/security/unauthorize",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"security",
														"unauthorize"
													]
												}
											},
											"response": []
										},
										{
											"name": "POST security/unauthorize - Unauthorized Refresh Token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"POST security unauthorize unauthorized refresh token status code is 200\", () => {",
															"  pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"POST security unauthorize unauthorized refresh token response body\", () => {",
															"  const body = pm.response.json();",
															"  ",
															"  pm.expect(body.loggedOut).to.eq(true);",
															"});",
															"",
															"pm.test(\"POST security unauthorize unauthorized refresh token cookie\", () => {",
															"  const cookieJar = pm.cookies.jar();",
															" ",
															"  cookieJar.getAll(pm.environment.get(\"host\"), function (error, cookies) {  ",
															"      pm.expect(cookies.members.length).to.eq(0);",
															"  });",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const cookieJar = pm.cookies.jar();",
															"",
															"cookieJar.set(pm.environment.get(\"host\"), \"refreshToken\", \"00000000-0000-0000-0000-000000000000\", function(error, cookie) {",
															"  // Set invalid token",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/v2/security/unauthorize",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"security",
														"unauthorize"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "400 Bad Request",
									"item": [
										{
											"name": "POST security/unauthorize - Bad Request Invalid Refresh Token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"POST security unauthorize invalid refresh token status code is 400\", () => {",
															"  pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"POST security unauthorize invalid refresh token response body\", () => {",
															"  const body = pm.response.json();",
															"",
															"  let timestamp = new Date(body.timestamp);",
															"  pm.expect(isNaN(timestamp.getTime())).to.eq(false);",
															"  pm.expect(body.error).to.eq(\"Bad Request\");",
															"  pm.expect(body.method).to.eq(\"POST\");",
															"  pm.expect(body.path).to.eq(\"/v2/security/unauthorize\");",
															"",
															"  pm.expect(body.validationErrors[0].property).to.eq(\"refreshToken\");",
															"  pm.expect(body.validationErrors[0].error).to.eq(\"Invalid UUID string: invalid\");",
															"});",
															"",
															"pm.test(\"POST security authorize invalid refresh token cookie\", () => {",
															"  const cookieJar = pm.cookies.jar();",
															" ",
															"  cookieJar.getAll(pm.environment.get(\"host\"), function (error, cookies) {  ",
															"      pm.expect(cookies.members.length).to.eq(1);",
															"      ",
															"      const cookie = cookies.members[0];",
															"",
															"      pm.expect(cookie.name).to.eq(\"refreshToken\");",
															"      pm.expect(cookie.maxAge).to.eq(0);",
															"      pm.expect(cookie.value).to.eq(\"invalid\");",
															"",
															"  });",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const cookieJar = pm.cookies.jar();",
															"",
															"cookieJar.set(pm.environment.get(\"host\"), \"refreshToken\", \"invalid\", function(error, cookie) {",
															"  // Set invalid token",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/v2/security/unauthorize",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"security",
														"unauthorize"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "401 Unauthorized",
									"item": [
										{
											"name": "POST security/unauthorize - Missing Cookie",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"POST security unauthorize missing cookie status code is 401\", () => {",
															"  pm.response.to.have.status(401);",
															"});",
															"",
															"pm.test(\"POST security unauthorize missing cookie\", () => {",
															"  const cookieJar = pm.cookies.jar();",
															" ",
															"  cookieJar.getAll(pm.environment.get(\"host\"), function (error, cookies) {  ",
															"      pm.expect(cookies.members.length).to.eq(0);      ",
															"  });",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const cookieJar = pm.cookies.jar();",
															"",
															"cookieJar.clear(pm.environment.get(\"host\"), function (error) {",
															"  // Clear all cookies",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/v2/security/unauthorize",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"security",
														"unauthorize"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "POST security/request-password-reset",
							"item": [
								{
									"name": "200 OK",
									"item": [
										{
											"name": "POST security/request-password-reset - Admin",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"POST security request password reset admin status code is 200\", () => {",
															"  pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"POST security request password reset admin response body\", () => {",
															"  pm.expect(responseBody.length).to.eq(0);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"email\": \"{{adminUsername}}\",\n  \"link\": \"http://example.com/%s\"    \n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/security/request-password-reset",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"security",
														"request-password-reset"
													]
												}
											},
											"response": []
										},
										{
											"name": "POST security/request-password-reset - User",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"POST security request password reset user status code is 200\", () => {",
															"  pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"POST security request password reset user response body\", () => {",
															"  pm.expect(responseBody.length).to.eq(0);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"email\": \"{{userUsername}}\",\n  \"link\": \"http://example.com/%s\"    \n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/security/request-password-reset",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"security",
														"request-password-reset"
													]
												}
											},
											"response": []
										},
										{
											"name": "POST security/request-password-reset - Invalid Email",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Invalid email should also return 200 to prevent someone from finding out if an email is registered or not.",
															"pm.test(\"POST security request password reset invalid email status code is 200\", () => {",
															"  pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"POST security request password reset invalid email response body\", () => {",
															"  pm.expect(responseBody.length).to.eq(0);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"email\": \"invalid@email.com\",\n  \"link\": \"http://example.com/%s\"    \n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/security/request-password-reset",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"security",
														"request-password-reset"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "400 Bad Request",
									"item": [
										{
											"name": "POST security/request-password-reset - Bad Request Missing Properties",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"POST security request password reset missing email status code is 400\", () => {",
															"  pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"POST security request password reset missing email response body\", () => {",
															"  const body = pm.response.json();",
															"",
															"  let timestamp = new Date(body.timestamp);",
															"  pm.expect(isNaN(timestamp.getTime())).to.eq(false);",
															"  pm.expect(body.error).to.eq(\"Bad Request\");",
															"  pm.expect(body.method).to.eq(\"POST\");",
															"  pm.expect(body.path).to.eq(\"/v2/security/request-password-reset\");",
															"",
															"  pm.expect(body.validationErrors[0].property).to.eq(\"email\");",
															"  pm.expect(body.validationErrors[0].error).to.eq(\"is missing\");",
															"",
															"  pm.expect(body.validationErrors[1].property).to.eq(\"link\");",
															"  pm.expect(body.validationErrors[1].error).to.eq(\"is missing\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/security/request-password-reset",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"security",
														"request-password-reset"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "POST security/reset-password",
							"item": [
								{
									"name": "200 OK",
									"item": [
										{
											"name": "GET actuator/health",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// THere is no way of gwtting a valid reset password token for a user through the API so we ",
															"// can't write a real test for 200 OK here.",
															"",
															"pm.test(\"GET actuator health status code is 200\", () => {",
															"  pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"GET actuator health response body\", () => {",
															"  const body = pm.response.json();",
															"",
															"  pm.expect(body).to.have.property(\"status\");  ",
															"  pm.expect(body.status).to.eq(\"UP\");",
															"",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/actuator/health",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"actuator",
														"health"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "400 Bad Request",
									"item": [
										{
											"name": "POST security/reset-password - Bad Request Missing Properties",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"POST security reset password missing email status code is 400\", () => {",
															"  pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"POST security reset password missing email response body\", () => {",
															"  const body = pm.response.json();",
															"",
															"  let timestamp = new Date(body.timestamp);",
															"  pm.expect(isNaN(timestamp.getTime())).to.eq(false);",
															"  pm.expect(body.error).to.eq(\"Bad Request\");",
															"  pm.expect(body.method).to.eq(\"POST\");",
															"    pm.expect(body.path).to.eq(\"/v2/security/reset-password\");",
															"",
															"  pm.expect(body.validationErrors[0].property).to.eq(\"email\");",
															"  pm.expect(body.validationErrors[0].error).to.eq(\"is missing\");",
															"",
															"  pm.expect(body.validationErrors[1].property).to.eq(\"password\");",
															"  pm.expect(body.validationErrors[1].error).to.eq(\"is missing\");",
															"",
															"  pm.expect(body.validationErrors[2].property).to.eq(\"resetPasswordToken\");",
															"  pm.expect(body.validationErrors[2].error).to.eq(\"is missing\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/security/reset-password",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"security",
														"reset-password"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "401 Unauthorized",
									"item": [
										{
											"name": "POST security/reset-password - Invalid Reset Password Token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"POST security reset password invalid reset password token status code is 401\", () => {",
															"  pm.response.to.have.status(401);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"email\": \"{{adminUsername}}\",\n  \"password\": \"newpassword\",\n  \"resetPasswordToken\": \"00000000-0000-0000-0000-000000000000\"\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/security/reset-password",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"security",
														"reset-password"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "users",
					"item": [
						{
							"name": "POST users",
							"item": [
								{
									"name": "201 Created",
									"item": [
										{
											"name": "POST users - OK",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"POST user status code is 201\", () => {",
															"  pm.response.to.have.status(201);",
															"});",
															"",
															"pm.test(\"POST user response body\", () => {",
															"  const body = pm.response.json();",
															"  ",
															"  pm.expect(body).to.have.property(\"user\");",
															"  ",
															"  pm.expect(body.user).to.have.property(\"id\");",
															"  pm.expect(body.user.name).to.eq(pm.environment.get('newUserName'));",
															"  pm.expect(body.user.administrator).to.eq(false);",
															"",
															"  pm.environment.set(\"newUserId\", body.user.id)",
															"});",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{jwt}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"{{newUserName}}\",\n    \"email\": \"{{newUserUsername}}\",\n    \"password\": \"{{newUserPassword}}\",\n    \"confirmPassword\": \"{{newUserPassword}}\"\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/users",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"users"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "400 Bad Request",
									"item": [
										{
											"name": "POST users - Bad Request Missing Properties",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"POST user missing name status code is 400\", () => {",
															"  pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"POST user missing name response body\", () => {",
															"  const body = pm.response.json();",
															"",
															"  let timestamp = new Date(body.timestamp);",
															"  pm.expect(isNaN(timestamp.getTime())).to.eq(false);",
															"  pm.expect(body.error).to.eq(\"Bad Request\");",
															"  pm.expect(body.method).to.eq(\"POST\");",
															"  pm.expect(body.path).to.eq(\"/v2/users\");",
															"",
															"  pm.expect(body.validationErrors[0].property).to.eq(\"confirmPassword\");",
															"  pm.expect(body.validationErrors[0].error).to.eq(\"is missing\");",
															"",
															"  pm.expect(body.validationErrors[1].property).to.eq(\"email\");",
															"  pm.expect(body.validationErrors[1].error).to.eq(\"is missing\");",
															"",
															"  pm.expect(body.validationErrors[2].property).to.eq(\"name\");",
															"  pm.expect(body.validationErrors[2].error).to.eq(\"is missing\");",
															"",
															"  pm.expect(body.validationErrors[3].property).to.eq(\"password\");",
															"  pm.expect(body.validationErrors[3].error).to.eq(\"is missing\");",
															"",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{jwt}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/users",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"users"
													]
												}
											},
											"response": []
										},
										{
											"name": "POST users - Bad Request Invalid Email",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"POST user invalid email status code is 400\", () => {",
															"  pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"POST user invalid email response body\", () => {",
															"  const body = pm.response.json();",
															"",
															"  let timestamp = new Date(body.timestamp);",
															"  pm.expect(isNaN(timestamp.getTime())).to.eq(false);",
															"  pm.expect(body.error).to.eq(\"Bad Request\");",
															"  pm.expect(body.method).to.eq(\"POST\");",
															"  pm.expect(body.path).to.eq(\"/v2/users\");",
															"",
															"  pm.expect(body.validationErrors[0].property).to.eq(\"email\");",
															"  pm.expect(body.validationErrors[0].error).to.eq(\"must be a well-formed email address\");",
															"",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{jwt}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"{{newUserName}}\",\n    \"email\": \"INVALID_EMAIL\",\n    \"password\": \"{{newUserPassword}}\",\n    \"confirmPassword\": \"{{newUserPassword}}\"\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/users",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"users"
													]
												}
											},
											"response": []
										},
										{
											"name": "POST users - Bad Request Password Mismatch",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"POST user password mismatch status code is 400\", () => {",
															"  pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"POST user password mismatch response body\", () => {",
															"  const body = pm.response.json();",
															"",
															"  let timestamp = new Date(body.timestamp);",
															"  pm.expect(isNaN(timestamp.getTime())).to.eq(false);",
															"  pm.expect(body.error).to.eq(\"Bad Request\");",
															"  pm.expect(body.method).to.eq(\"POST\");",
															"  pm.expect(body.path).to.eq(\"/v2/users\");",
															"",
															"  pm.expect(body.validationErrors[0].property).to.eq(\"confirmPassword\");",
															"  pm.expect(body.validationErrors[0].error).to.eq(\"must match password\");",
															"",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{jwt}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"{{newUserName}}\",\n    \"email\": \"{{newUserUsername}}\",\n    \"password\": \"PASSWORD\",\n    \"confirmPassword\": \"CONFIRM_PASSWORD\"\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/users",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"users"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "409 Conflict",
									"item": [
										{
											"name": "POST users - Conflict Name Unavailable",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"POST user name unavailable status code is 409\", () => {",
															"  pm.response.to.have.status(409);",
															"});",
															"",
															"pm.test(\"POST user name unavailable response body\", () => {",
															"  const body = pm.response.json();",
															"",
															"  let timestamp = new Date(body.timestamp);",
															"  pm.expect(isNaN(timestamp.getTime())).to.eq(false);",
															"  pm.expect(body.error).to.eq(\"Conflict\");",
															"  pm.expect(body.message).to.eq(\"Name is unavailable\");",
															"  pm.expect(body.method).to.eq(\"POST\");",
															"  pm.expect(body.path).to.eq(\"/v2/users\");",
															"",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{jwt}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"{{adminName}}\",\n    \"email\": \"{{newUserUsername}}\",\n    \"password\": \"{{newUserPassword}}\",\n    \"confirmPassword\": \"{{newUserPassword}}\"\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/users",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"users"
													]
												}
											},
											"response": []
										},
										{
											"name": "POST users - Conflict Email Unavailable",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"POST user email unvavailable status code is 409\", () => {",
															"  pm.response.to.have.status(409);",
															"});",
															"",
															"pm.test(\"POST user email unvavailable response body\", () => {",
															"  const body = pm.response.json();",
															"",
															"  let timestamp = new Date(body.timestamp);",
															"  pm.expect(isNaN(timestamp.getTime())).to.eq(false);",
															"  pm.expect(body.error).to.eq(\"Conflict\");",
															"  pm.expect(body.message).to.eq(\"Email is unavailable\");",
															"  pm.expect(body.method).to.eq(\"POST\");",
															"  pm.expect(body.path).to.eq(\"/v2/users\");",
															"",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{jwt}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    // When this is run after 200 OK the new user name will be unavailable so set another dummy name\n    \"name\": \"name\",\n    \"email\": \"{{adminUsername}}\",\n    \"password\": \"{{newUserPassword}}\",\n    \"confirmPassword\": \"{{newUserPassword}}\"\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/users",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"users"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "PUT users/{userId}",
							"item": [
								{
									"name": "200 OK",
									"item": [
										{
											"name": "Setup - Login User",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Setup login admin status code is 200\", () => {",
															"  pm.response.to.have.status(200);",
															"});",
															"",
															"const body = pm.response.json();",
															"pm.environment.set(\"jwt\", body.jwt);",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\": \"{{userUsername}}\",\n    \"password\": \"{{userPassword}}\",\n    \"persistent\": true\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/security/authenticate",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"security",
														"authenticate"
													]
												}
											},
											"response": []
										},
										{
											"name": "PUT users/{userId} - OK",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"PUT user status code is 200\", () => {",
															"  pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"PUT user response body\", () => {",
															"  const body = pm.response.json();",
															"  ",
															"  pm.expect(body).to.have.property(\"user\");",
															"  ",
															"  pm.expect(body.user).to.have.property(\"id\");",
															"  pm.expect(body.user.name).to.eq(pm.environment.get('userName'));",
															"  pm.expect(body.user.administrator).to.eq(false);",
															"});",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{jwt}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"currentPassword\": \"{{userPassword}}\",\n    \"password\": \"{{newUserPassword}}\",\n    \"confirmPassword\": \"{{newUserPassword}}\"\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/users/{{userId}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"users",
														"{{userId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "PUT users/{userId} - Rollback",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"PUT user status code is 200\", () => {",
															"  pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"PUT user response body\", () => {",
															"  const body = pm.response.json();",
															"  ",
															"  pm.expect(body).to.have.property(\"user\");",
															"  ",
															"  pm.expect(body.user).to.have.property(\"id\");",
															"  pm.expect(body.user.name).to.eq(pm.environment.get('userName'));",
															"  pm.expect(body.user.administrator).to.eq(false);",
															"});",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{jwt}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"currentPassword\": \"{{newUserPassword}}\",\n    \"password\": \"{{userPassword}}\",\n    \"confirmPassword\": \"{{userPassword}}\"\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/users/{{userId}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"users",
														"{{userId}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "400 Bad Request",
									"item": [
										{
											"name": "PUT users/{userId} - Bad Request Missing Properties",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"PUT user missing current password status code is 400\", () => {",
															"  pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"PUT season missing current password response body\", () => {",
															"  const body = pm.response.json();",
															"",
															"  let timestamp = new Date(body.timestamp);",
															"  pm.expect(isNaN(timestamp.getTime())).to.eq(false);",
															"  pm.expect(body.error).to.eq(\"Bad Request\");",
															"  pm.expect(body.method).to.eq(\"PUT\");",
															"  pm.expect(body.path).to.eq(\"/v2/users/\" + pm.environment.get(\"userId\"));",
															"",
															"  pm.expect(body.validationErrors[0].property).to.eq(\"confirmPassword\");",
															"  pm.expect(body.validationErrors[0].error).to.eq(\"is missing\");",
															"",
															"  pm.expect(body.validationErrors[1].property).to.eq(\"currentPassword\");",
															"  pm.expect(body.validationErrors[1].error).to.eq(\"is missing\");",
															"",
															"  pm.expect(body.validationErrors[2].property).to.eq(\"password\");",
															"  pm.expect(body.validationErrors[2].error).to.eq(\"is missing\");",
															"",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{jwt}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/users/{{userId}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"users",
														"{{userId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "PUT users/{userId} - Bad Request Invalid User Id",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"PUT user invalid user idstatus code is 400\", () => {",
															"  pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"PUT season invalid user id response body\", () => {",
															"  const body = pm.response.json();",
															"",
															"  let timestamp = new Date(body.timestamp);",
															"  pm.expect(isNaN(timestamp.getTime())).to.eq(false);",
															"  pm.expect(body.error).to.eq(\"Bad Request\");",
															"  pm.expect(body.method).to.eq(\"PUT\");",
															"  pm.expect(body.path).to.eq(\"/v2/users/invalid\");",
															"",
															"  pm.expect(body.validationErrors[0].property).to.eq(\"userId\");",
															"  pm.expect(body.validationErrors[0].error).to.eq(\"is invalid\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{jwt}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"currentPassword\": \"{{userPassword}}\",\n    \"password\": \"{{newUserPassword}}\",\n    \"confirmPassword\": \"{{newUserPassword}}\"\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/users/invalid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"users",
														"invalid"
													]
												}
											},
											"response": []
										},
										{
											"name": "PUT users/{userId} - Bad Request Password Mismatch",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"PUT user password mismatch status code is 400\", () => {",
															"  pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"PUT season password mismatch response body\", () => {",
															"  const body = pm.response.json();",
															"",
															"  let timestamp = new Date(body.timestamp);",
															"  pm.expect(isNaN(timestamp.getTime())).to.eq(false);",
															"  pm.expect(body.error).to.eq(\"Bad Request\");",
															"  pm.expect(body.method).to.eq(\"PUT\");",
															"  pm.expect(body.path).to.eq(\"/v2/users/\" + pm.environment.get(\"userId\"));",
															"",
															"  pm.expect(body.validationErrors[0].property).to.eq(\"confirmPassword\");",
															"  pm.expect(body.validationErrors[0].error).to.eq(\"must match password\");",
															"",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{jwt}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"currentPassword\": \"{{newUserPassword}}\",\n    \"password\": \"{{userPassword}}\",\n    \"confirmPassword\": \"{{newUserPassword}}\"\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/users/{{userId}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"users",
														"{{userId}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "401 Unauthorized",
									"item": [
										{
											"name": "PUT users/{userId} - Unauthorized No Auth",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"PUT user no auth status code is 401\", () => {",
															"  pm.response.to.have.status(401);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"currentPassword\": \"{{userPassword}}\",\n    \"password\": \"{{newUserPassword}}\",\n    \"confirmPassword\": \"{{newUserPassword}}\"\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/users/{{userId}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"users",
														"{{userId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "PUT users/{userId} - Unauthorized Invalid Auth",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"PUT user invalid auth status code is 401\", () => {",
															"  pm.response.to.have.status(401);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{expiredJwt}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"currentPassword\": \"{{userPassword}}\",\n    \"password\": \"{{newUserPassword}}\",\n    \"confirmPassword\": \"{{newUserPassword}}\"\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/users/{{userId}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"users",
														"{{userId}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "403 Forbidden",
									"item": [
										{
											"name": "PUT users/{userId} - Forbidden Not Current User",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"PUT user not current user status code is 403\", () => {",
															"  pm.response.to.have.status(403);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{jwt}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"currentPassword\": \"{{userPassword}}\",\n    \"password\": \"{{newUserPassword}}\",\n    \"confirmPassword\": \"{{newUserPassword}}\"\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/users/{{adminId}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"users",
														"{{adminId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "PUT users/{userId} - Forbidden Invalid Current Password",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"PUT user invalid current password status code is 403\", () => {",
															"  pm.response.to.have.status(403);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{jwt}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"currentPassword\": \"{{newUserPassword}}\",\n    \"password\": \"{{newUserPassword}}\",\n    \"confirmPassword\": \"{{newUserPassword}}\"\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/users/{{userId}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"users",
														"{{userId}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "404 Not Found",
									"item": [
										{
											"name": "PUT users/{userId} - Not Found",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"PUT user not found status code is 404\", () => {",
															"  pm.response.to.have.status(404);",
															"});",
															"",
															"pm.test(\"PUT user not found response body\", () => {",
															"  const body = pm.response.json();",
															"",
															"  let timestamp = new Date(body.timestamp);",
															"  pm.expect(isNaN(timestamp.getTime())).to.eq(false);",
															"  pm.expect(body.error).to.eq(\"Not Found\");",
															"  pm.expect(body.resource).to.eq('User');",
															"  pm.expect(body.id).to.eq(-1);",
															"  pm.expect(body.method).to.eq(\"PUT\");",
															"  pm.expect(body.path).to.eq(\"/v2/users/-1\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{jwt}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"currentPassword\": \"{{userPassword}}\",\n    \"password\": \"{{newUserPassword}}\",\n    \"confirmPassword\": \"{{newUserPassword}}\"\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/users/-1",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"users",
														"-1"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "DELETE users/{userId}",
							"item": [
								{
									"name": "200 OK",
									"item": [
										{
											"name": "Setup - Login Admin",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Setup login admin status code is 200\", () => {",
															"  pm.response.to.have.status(200);",
															"});",
															"",
															"const body = pm.response.json();",
															"pm.environment.set(\"jwt\", body.jwt);",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\": \"{{adminUsername}}\",\n    \"password\": \"{{adminPassword}}\",\n    \"persistent\": true\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/security/authenticate",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"security",
														"authenticate"
													]
												}
											},
											"response": []
										},
										{
											"name": "DELETE users/{userId} - OK",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"DELETE user status code is 204\", () => {",
															"  pm.response.to.have.status(204);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{jwt}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/v2/users/{{newUserId}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"users",
														"{{newUserId}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "400 Bad Request",
									"item": [
										{
											"name": "DELETE users/{userId} - Bad Request Invalid User Id",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"DELETE user invalid user idstatus code is 400\", () => {",
															"  pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"DELETE season invalid user id response body\", () => {",
															"  const body = pm.response.json();",
															"",
															"  let timestamp = new Date(body.timestamp);",
															"  pm.expect(isNaN(timestamp.getTime())).to.eq(false);",
															"  pm.expect(body.error).to.eq(\"Bad Request\");",
															"  pm.expect(body.method).to.eq(\"DELETE\");",
															"  pm.expect(body.path).to.eq(\"/v2/users/invalid\");",
															"",
															"  pm.expect(body.validationErrors[0].property).to.eq(\"userId\");",
															"  pm.expect(body.validationErrors[0].error).to.eq(\"is invalid\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{jwt}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/v2/users/invalid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"users",
														"invalid"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "401 Unauthorized",
									"item": [
										{
											"name": "DELETE users/{userId} - Unauthorized No Auth Copy",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"DELETE user no auth status code is 401\", () => {",
															"  pm.response.to.have.status(401);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/v2/users/{{userId}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"users",
														"{{userId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "DELETE users/{userId} - Unauthorized Invalid Auth Copy",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"DELETE user invalid auth status code is 401\", () => {",
															"  pm.response.to.have.status(401);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{expiredJwt}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/v2/users/{{userId}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"users",
														"{{userId}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "403 Forbidden",
									"item": [
										{
											"name": "Setup - Login User",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Setup login admin status code is 200\", () => {",
															"  pm.response.to.have.status(200);",
															"});",
															"",
															"const body = pm.response.json();",
															"pm.environment.set(\"jwt\", body.jwt);",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\": \"{{userUsername}}\",\n    \"password\": \"{{userPassword}}\",\n    \"persistent\": true\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/security/authenticate",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"security",
														"authenticate"
													]
												}
											},
											"response": []
										},
										{
											"name": "DELETE users/{userId} - Forbidden",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"DELETE user forbidden status code is 403\", () => {",
															"  pm.response.to.have.status(403);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{jwt}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/v2/users/{{adminId}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"users",
														"{{adminId}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "404 Not Found",
									"item": [
										{
											"name": "Setup - Login Admin",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Setup login admin status code is 200\", () => {",
															"  pm.response.to.have.status(200);",
															"});",
															"",
															"const body = pm.response.json();",
															"pm.environment.set(\"jwt\", body.jwt);",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\": \"{{adminUsername}}\",\n    \"password\": \"{{adminPassword}}\",\n    \"persistent\": true\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/security/authenticate",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"security",
														"authenticate"
													]
												}
											},
											"response": []
										},
										{
											"name": "DELETE users/{userId} - Not Found",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"DELETE user not found status code is 404\", () => {",
															"  pm.response.to.have.status(404);",
															"});",
															"",
															"pm.test(\"DELETE user not found response body\", () => {",
															"  const body = pm.response.json();",
															"",
															"  let timestamp = new Date(body.timestamp);",
															"  pm.expect(isNaN(timestamp.getTime())).to.eq(false);",
															"  pm.expect(body.error).to.eq(\"Not Found\");",
															"  pm.expect(body.resource).to.eq('User');",
															"  pm.expect(body.id).to.eq(-1);",
															"  pm.expect(body.method).to.eq(\"DELETE\");",
															"  pm.expect(body.path).to.eq(\"/v2/users/-1\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{jwt}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/v2/users/-1",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"users",
														"-1"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "countries",
					"item": [
						{
							"name": "GET countries",
							"item": [
								{
									"name": "GET countries - OK",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"GET countries status code is 200\", () => {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"GET countries response body\", () => {",
													"  const body = pm.response.json();",
													"",
													"  pm.expect(body).to.have.property(\"countries\");",
													"",
													"  pm.expect(body.countries.length).to.eq(2);",
													"",
													"  const letters = [ \"A\", \"B\" ];",
													"",
													"  for (let i = 0; i < body.countries.length; ++i) {",
													"    pm.expect(body.countries[i].id).to.eq(i + 1);",
													"    pm.expect(body.countries[i].name).to.eq(\"Country\" + letters[i]);",
													"    pm.expect(body.countries[i].iso).to.eq(letters[i] +  letters[i]);",
													"  }",
													"",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/v2/countries",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"countries"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "teams",
					"item": [
						{
							"name": "GET teams",
							"item": [
								{
									"name": "GET teams - OK",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"GET teams status code is 200\", () => {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"GET teams response body\", () => {",
													"  const body = pm.response.json();",
													"",
													"  pm.expect(body).to.have.property(\"teams\");",
													"",
													"  const teams = JSON.parse(pm.environment.get(\"teams\"));",
													"",
													"  pm.expect(body.teams.length).to.eq(teams.length);",
													"",
													"  for (let i = 0; i < body.teams.length; ++i) {",
													"    expect.teamToEq(pm, body.teams[i], teams[i]);",
													"  }",
													"",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/v2/teams",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"teams"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "GET teams/{teamId}",
							"item": [
								{
									"name": "200 OK",
									"item": [
										{
											"name": "GET teams/{teamId} - OK",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"GET team status code is 200\", () => {",
															"  pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"GET team response body\", () => {",
															"  const body = pm.response.json();",
															"",
															"  pm.expect(body).to.have.property(\"team\");",
															"",
															"  const team = JSON.parse(pm.environment.get(\"team\"));",
															"",
															"  expect.teamToEq(pm, body.team, team);",
															"",
															"  pm.expect(body).to.have.property(\"stadium\");",
															"",
															"  const stadium = JSON.parse(pm.environment.get(\"stadium\"));",
															"",
															"  expect.stadiumToEq(pm, body.stadium, stadium);",
															"",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/v2/teams/{{teamId}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"teams",
														"{{teamId}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "400 Bad Request",
									"item": [
										{
											"name": "GET teams/{teamId} - Bad Request Invalid Team Id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"GET team invalid player id status code is 400\", () => {",
															"  pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"GET team invalid player id response body\", () => {",
															"  const body = pm.response.json();",
															"",
															"  let timestamp = new Date(body.timestamp);",
															"  pm.expect(isNaN(timestamp.getTime())).to.eq(false);",
															"  pm.expect(body.error).to.eq(\"Bad Request\");",
															"  pm.expect(body.method).to.eq(\"GET\");",
															"  pm.expect(body.path).to.eq(\"/v2/teams/invalid\");",
															"",
															"  pm.expect(body.validationErrors[0].property).to.eq(\"teamId\");",
															"  pm.expect(body.validationErrors[0].error).to.eq(\"is invalid\");",
															"",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/v2/teams/invalid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"teams",
														"invalid"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "404 Not Found",
									"item": [
										{
											"name": "GET teams/{teamId} - Not Found",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"GET teams not found status code is 404\", () => {",
															"  pm.response.to.have.status(404);",
															"});",
															"",
															"pm.test(\"GET teams not found response body\", () => {",
															"  const body = pm.response.json();",
															"",
															"  let timestamp = new Date(body.timestamp);",
															"  pm.expect(isNaN(timestamp.getTime())).to.eq(false);",
															"  pm.expect(body.error).to.eq(\"Not Found\");",
															"  pm.expect(body.resource).to.eq('Team');",
															"  pm.expect(body.id).to.eq(0);",
															"  pm.expect(body.method).to.eq(\"GET\");",
															"  pm.expect(body.path).to.eq(\"/v2/teams/0\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/v2/teams/0",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"teams",
														"0"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "d11-teams",
					"item": [
						{
							"name": "GET d11-teams",
							"item": [
								{
									"name": "GET d11-teams - OK",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"GET D11 teams status code is 200\", () => {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"GET D11 teams response body\", () => {",
													"  const body = pm.response.json();",
													"",
													"  pm.expect(body).to.have.property(\"d11Teams\");",
													"",
													"  const d11Teams = JSON.parse(pm.environment.get(\"d11Teams\"));",
													"",
													"  pm.expect(body.d11Teams.length).to.eq(d11Teams.length);",
													"",
													"  for (let i = 0; i < body.d11Teams.length; ++i) {",
													"    pm.expect(body.d11Teams[i].id).to.eq(d11Teams[i].id);",
													"    pm.expect(body.d11Teams[i].name).to.eq(d11Teams[i].name);",
													"    pm.expect(body.d11Teams[i].shortName).to.eq(d11Teams[i].shortName);",
													"    pm.expect(body.d11Teams[i].code).to.eq(d11Teams[i].code);",
													"    pm.expect(body.d11Teams[i].dummy).to.eq(d11Teams[i].dummy);",
													"    pm.expect(body.d11Teams[i].photoFileName).to.eq(d11Teams[i].photoFileName);",
													"  }",
													"",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/v2/d11-teams",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"d11-teams"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "GET d11-teams/{d11-teamId}",
							"item": [
								{
									"name": "200 OK",
									"item": [
										{
											"name": "GET d11-teams/{d11TeamId} - OK",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"GET D11 team status code is 200\", () => {",
															"  pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"GET D11 team response body\", () => {",
															"  const body = pm.response.json();",
															"",
															"  pm.expect(body).to.have.property(\"d11Team\");",
															"",
															"  const d11Team = JSON.parse(pm.environment.get(\"d11Team\"));",
															"",
															"  expect.d11TeamToEq(pm, body.d11Team, d11Team);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/v2/d11-teams/{{d11TeamId}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"d11-teams",
														"{{d11TeamId}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "400 Bad Request",
									"item": [
										{
											"name": "GET d11-teams/{d11TeamId} - Bad Request Invalid D11 Team Id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"GET D11 team invalid player id status code is 400\", () => {",
															"  pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"GET D11 team invalid player id response body\", () => {",
															"  const body = pm.response.json();",
															"",
															"  let timestamp = new Date(body.timestamp);",
															"  pm.expect(isNaN(timestamp.getTime())).to.eq(false);",
															"  pm.expect(body.error).to.eq(\"Bad Request\");",
															"  pm.expect(body.method).to.eq(\"GET\");",
															"  pm.expect(body.path).to.eq(\"/v2/d11-teams/invalid\");",
															"",
															"  pm.expect(body.validationErrors[0].property).to.eq(\"d11TeamId\");",
															"  pm.expect(body.validationErrors[0].error).to.eq(\"is invalid\");",
															"",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/v2/d11-teams/invalid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"d11-teams",
														"invalid"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "404 Not Found",
									"item": [
										{
											"name": "GET d11-teams/{d11-teamId} - Not Found",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"GET D11 teams not found status code is 404\", () => {",
															"  pm.response.to.have.status(404);",
															"});",
															"",
															"pm.test(\"GET D11 teams not found response body\", () => {",
															"  const body = pm.response.json();",
															"",
															"  let timestamp = new Date(body.timestamp);",
															"  pm.expect(isNaN(timestamp.getTime())).to.eq(false);",
															"  pm.expect(body.error).to.eq(\"Not Found\");",
															"  pm.expect(body.resource).to.eq('D11Team');",
															"  pm.expect(body.id).to.eq(0);",
															"  pm.expect(body.method).to.eq(\"GET\");",
															"  pm.expect(body.path).to.eq(\"/v2/d11-teams/0\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/v2/d11-teams/0",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"d11-teams",
														"0"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "positions",
					"item": [
						{
							"name": "GET positions",
							"item": [
								{
									"name": "GET positions - OK",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"GET positions status code is 200\", () => {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"GET positions response body\", () => {",
													"  const body = pm.response.json();",
													"",
													"  pm.expect(body).to.have.property(\"positions\");",
													"",
													"  const positions = JSON.parse(pm.environment.get(\"positions\"));",
													"",
													"  pm.expect(body.positions.length).to.eq(positions.length);",
													"",
													"  for (let i = 0; i < body.positions.length; ++i) {",
													"    pm.expect(body.positions[i].id).to.eq(positions[i].id);",
													"    pm.expect(body.positions[i].name).to.eq(positions[i].name);",
													"    pm.expect(body.positions[i].code).to.eq(positions[i].code);",
													"    pm.expect(body.positions[i].maxCount).to.eq(positions[i].maxCount);",
													"    pm.expect(body.positions[i].defender).to.eq(positions[i].defender);",
													"    pm.expect(body.positions[i].sortOrder).to.eq(positions[i].sortOrder);",
													"  }",
													"",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/v2/positions",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"positions"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "seasons",
					"item": [
						{
							"name": "GET seasons",
							"item": [
								{
									"name": "200 OK",
									"item": [
										{
											"name": "GET seasons - OK",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"GET seasons status code is 200\", () => {",
															"  pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"GET seasons response body\", () => {",
															"  const body = pm.response.json();",
															"",
															"  pm.expect(body).to.have.property(\"seasons\");",
															"",
															"  pm.expect(body.seasons.length).to.eq(2);",
															"",
															"  const season = JSON.parse(pm.environment.get(\"season\"));",
															"  const currentSeason = JSON.parse(pm.environment.get(\"currentSeason\"));",
															"",
															"  pm.expect(body.seasons[0].id).to.eq(currentSeason.id);",
															"  pm.expect(body.seasons[0].name).to.eq(currentSeason.name);",
															"  pm.expect(body.seasons[0].shortName).to.eq(currentSeason.shortName);",
															"  pm.expect(body.seasons[0].d11TeamBudget).to.eq(currentSeason.d11TeamBudget);",
															"  pm.expect(body.seasons[0].d11TeamMaxTransfers).to.eq(currentSeason.d11TeamMaxTransfers);",
															"  pm.expect(body.seasons[0].status).to.eq(currentSeason.status);",
															"  pm.expect(body.seasons[0].date).to.eq(currentSeason.date);",
															"  pm.expect(body.seasons[0].legacy).to.eq(currentSeason.legacy);",
															"",
															"  pm.expect(body.seasons[1].id).to.eq(season.id);",
															"  pm.expect(body.seasons[1].name).to.eq(season.name);",
															"  pm.expect(body.seasons[1].shortName).to.eq(season.shortName);",
															"  pm.expect(body.seasons[1].d11TeamBudget).to.eq(season.d11TeamBudget);",
															"  pm.expect(body.seasons[1].d11TeamMaxTransfers).to.eq(season.d11TeamMaxTransfers);",
															"  pm.expect(body.seasons[1].status).to.eq(season.status);",
															"  pm.expect(body.seasons[1].date).to.eq(season.date);",
															"  pm.expect(body.seasons[1].legacy).to.eq(season.legacy);",
															"",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/v2/seasons",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"seasons"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "GET seasons/{seasonId}",
							"item": [
								{
									"name": "200 OK",
									"item": [
										{
											"name": "GET seasons/{seasonId} - OK",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"GET season status code is 200\", () => {",
															"  pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"GET season response body\", () => {",
															"  const body = pm.response.json();",
															"",
															"  pm.expect(body).to.have.property(\"season\");",
															"",
															"  const season = JSON.parse(pm.environment.get(\"season\"));",
															"",
															"  pm.expect(body.season.id).to.eq(season.id);",
															"  pm.expect(body.season.name).to.eq(season.name);",
															"  pm.expect(body.season.shortName).to.eq(season.shortName);",
															"  pm.expect(body.season.d11TeamBudget).to.eq(season.d11TeamBudget);",
															"  pm.expect(body.season.d11TeamMaxTransfers).to.eq(season.d11TeamMaxTransfers);",
															"  pm.expect(body.season.status).to.eq(season.status);",
															"  pm.expect(body.season.date).to.eq(season.date);",
															"  pm.expect(body.season.legacy).to.eq(season.legacy);",
															"",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/v2/seasons/{{seasonId}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"seasons",
														"{{seasonId}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "400 Bad Request",
									"item": [
										{
											"name": "GET seasons/{seasonId} - Bad Request Invalid Season Id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"GET season invalid season id status code is 400\", () => {",
															"  pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"GET season invalid season id response body\", () => {",
															"  const body = pm.response.json();",
															"",
															"  let timestamp = new Date(body.timestamp);",
															"  pm.expect(isNaN(timestamp.getTime())).to.eq(false);",
															"  pm.expect(body.error).to.eq(\"Bad Request\");",
															"  pm.expect(body.method).to.eq(\"GET\");",
															"  pm.expect(body.path).to.eq(\"/v2/seasons/invalid\");",
															"",
															"  pm.expect(body.validationErrors[0].property).to.eq(\"seasonId\");",
															"  pm.expect(body.validationErrors[0].error).to.eq(\"is invalid\");",
															"",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/v2/seasons/invalid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"seasons",
														"invalid"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "404 Not Found",
									"item": [
										{
											"name": "GET seasons/{seasonId} - Not Found",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"GET season not found status code is 404\", () => {",
															"  pm.response.to.have.status(404);",
															"});",
															"",
															"pm.test(\"GET season not found response body\", () => {",
															"  const body = pm.response.json();",
															"",
															"  let timestamp = new Date(body.timestamp);",
															"  pm.expect(isNaN(timestamp.getTime())).to.eq(false);",
															"  pm.expect(body.error).to.eq(\"Not Found\");",
															"  pm.expect(body.resource).to.eq('Season');",
															"  pm.expect(body.id).to.eq(0);",
															"  pm.expect(body.method).to.eq(\"GET\");",
															"  pm.expect(body.path).to.eq(\"/v2/seasons/0\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/v2/seasons/0",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"seasons",
														"0"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "GET seasons/current",
							"item": [
								{
									"name": "200 OK",
									"item": [
										{
											"name": "GET seasons/current - OK",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"GET season current status code is 200\", () => {",
															"  pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"GET season current response body\", () => {",
															"  const body = pm.response.json();",
															"",
															"  pm.expect(body).to.have.property(\"season\");",
															"",
															"  const currentSeason = JSON.parse(pm.environment.get(\"currentSeason\"));",
															"",
															"  pm.expect(body.season.id).to.eq(currentSeason.id);",
															"  pm.expect(body.season.name).to.eq(currentSeason.name);",
															"  pm.expect(body.season.shortName).to.eq(currentSeason.shortName);",
															"  pm.expect(body.season.d11TeamBudget).to.eq(currentSeason.d11TeamBudget);",
															"  pm.expect(body.season.d11TeamMaxTransfers).to.eq(currentSeason.d11TeamMaxTransfers);",
															"  pm.expect(body.season.status).to.eq(currentSeason.status);",
															"  pm.expect(body.season.date).to.eq(currentSeason.date);",
															"  pm.expect(body.season.legacy).to.eq(currentSeason.legacy);",
															"",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/v2/seasons/current",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"seasons",
														"current"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "PUT seasons/{seasonId}",
							"item": [
								{
									"name": "200 OK",
									"item": [
										{
											"name": "Setup - Login Admin",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Setup login admin status code is 200\", () => {",
															"  pm.response.to.have.status(200);",
															"});",
															"",
															"const body = pm.response.json();",
															"pm.environment.set(\"jwt\", body.jwt);",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\": \"{{adminUsername}}\",\n    \"password\": \"{{adminPassword}}\",\n    \"persistent\": true\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/security/authenticate",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"security",
														"authenticate"
													]
												}
											},
											"response": []
										},
										{
											"name": "PUT seasons/{seasonId} - OK",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"PUT season status code is 200\", () => {",
															"  pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"PUT season response body\", () => {",
															"  const body = pm.response.json();",
															"",
															"  pm.expect(body).to.have.property(\"season\");",
															"",
															"  const season = JSON.parse(pm.environment.get(\"season\"));",
															"",
															"  pm.expect(body.season.id).to.eq(season.id);",
															"  pm.expect(body.season.name).to.eq(\"1970-1971\");",
															"  pm.expect(body.season.shortName).to.eq(\"70-71\");",
															"  pm.expect(body.season.d11TeamBudget).to.eq(5);",
															"  pm.expect(body.season.d11TeamMaxTransfers).to.eq(1);",
															"  pm.expect(body.season.status).to.eq(\"Pending\");",
															"  pm.expect(body.season.date).to.eq(\"1970-01-01\");",
															"  pm.expect(body.season.legacy).to.eq(true);",
															"",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{jwt}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"season\": {\n        \"name\": \"1970-1971\",\n        \"d11TeamBudget\": 5,\n        \"d11TeamMaxTransfers\": 1,\n        \"status\": \"Pending\",\n        \"date\": \"1970-01-01\",\n        \"legacy\": true\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/seasons/{{seasonId}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"seasons",
														"{{seasonId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Rollback - PUT seasons/{seasonId}",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const season = JSON.parse(pm.environment.get(\"season\"));",
															"",
															"pm.variables.set(\"localSeasonName\", season.name);",
															"",
															"pm.variables.set(\"localSeasonName\", season.name);",
															"pm.variables.set(\"localSeasonD11TeamBudget\", season.d11TeamBudget);",
															"pm.variables.set(\"localSeasonD11TeamMaxTransfers\", season.d11TeamMaxTransfers);",
															"pm.variables.set(\"localSeasonStatus\", season.status);",
															"pm.variables.set(\"localSeasonDate\", season.date);",
															"pm.variables.set(\"localSeasonLegacy\", season.legacy);",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"PUT season status code is 200\", () => {",
															"  pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Rollback PUT season response body\", () => {",
															"  const body = pm.response.json();",
															"",
															"  pm.expect(body).to.have.property(\"season\");",
															"",
															"  const season = JSON.parse(pm.environment.get(\"season\"));",
															"",
															"  pm.expect(body.season.id).to.eq(season.id);",
															"  pm.expect(body.season.name).to.eq(season.name);",
															"  pm.expect(body.season.shortName).to.eq(season.shortName);",
															"  pm.expect(body.season.d11TeamBudget).to.eq(season.d11TeamBudget);",
															"  pm.expect(body.season.d11TeamMaxTransfers).to.eq(season.d11TeamMaxTransfers);",
															"  pm.expect(body.season.status).to.eq(season.status);",
															"  pm.expect(body.season.date).to.eq(season.date);",
															"  pm.expect(body.season.legacy).to.eq(season.legacy);",
															"",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{jwt}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"season\": {\n        \"name\": \"{{localSeasonName}}\",\n        \"d11TeamBudget\": {{localSeasonD11TeamBudget}},\n        \"d11TeamMaxTransfers\": {{localSeasonD11TeamMaxTransfers}},\n        \"status\": \"{{localSeasonStatus}}\",\n        \"date\": \"{{localSeasonDate}}\",\n        \"legacy\": {{localSeasonLegacy}}\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/seasons/{{seasonId}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"seasons",
														"{{seasonId}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "400 Bad Request",
									"item": [
										{
											"name": "PUT seasons/{seasonId} - Bad Request Missing Season",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"PUT season missing name status code is 400\", () => {",
															"  pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"PUT season missing name response body\", () => {",
															"  const body = pm.response.json();",
															"",
															"  let timestamp = new Date(body.timestamp);",
															"  pm.expect(isNaN(timestamp.getTime())).to.eq(false);",
															"  pm.expect(body.error).to.eq(\"Bad Request\");",
															"  pm.expect(body.method).to.eq(\"PUT\");",
															"  pm.expect(body.path).to.eq(\"/v2/seasons/\" + pm.environment.get(\"seasonId\"));",
															"",
															"  pm.expect(body.validationErrors[0].property).to.eq(\"season\");",
															"  pm.expect(body.validationErrors[0].error).to.eq(\"is missing\");  ",
															"",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{jwt}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/seasons/{{seasonId}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"seasons",
														"{{seasonId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "PUT seasons/{seasonId} - Bad Request Missing Properties",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"PUT season missing name status code is 400\", () => {",
															"  pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"PUT season missing name response body\", () => {",
															"  const body = pm.response.json();",
															"",
															"  let timestamp = new Date(body.timestamp);",
															"  pm.expect(isNaN(timestamp.getTime())).to.eq(false);",
															"  pm.expect(body.error).to.eq(\"Bad Request\");",
															"  pm.expect(body.method).to.eq(\"PUT\");",
															"  pm.expect(body.path).to.eq(\"/v2/seasons/\" + pm.environment.get(\"seasonId\"));",
															"",
															"  pm.expect(body.validationErrors[0].property).to.eq(\"season.d11TeamBudget\");",
															"  pm.expect(body.validationErrors[0].error).to.eq(\"is missing\");  ",
															"",
															"  pm.expect(body.validationErrors[1].property).to.eq(\"season.d11TeamMaxTransfers\");",
															"  pm.expect(body.validationErrors[1].error).to.eq(\"is missing\");  ",
															"",
															"  pm.expect(body.validationErrors[2].property).to.eq(\"season.date\");",
															"  pm.expect(body.validationErrors[2].error).to.eq(\"is missing\");  ",
															"",
															"  pm.expect(body.validationErrors[3].property).to.eq(\"season.name\");",
															"  pm.expect(body.validationErrors[3].error).to.eq(\"is missing\");  ",
															"",
															"  pm.expect(body.validationErrors[4].property).to.eq(\"season.status\");",
															"  pm.expect(body.validationErrors[4].error).to.eq(\"is missing\");  ",
															"",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{jwt}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"season\": {\n        \n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/seasons/{{seasonId}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"seasons",
														"{{seasonId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "PUT seasons/{seasonId} - Bad Request Invalid Season Id",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"PUT season invalid season id status code is 400\", () => {",
															"  pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"PUT season invalid season id response body\", () => {",
															"  const body = pm.response.json();",
															"",
															"  let timestamp = new Date(body.timestamp);",
															"  pm.expect(isNaN(timestamp.getTime())).to.eq(false);",
															"  pm.expect(body.error).to.eq(\"Bad Request\");",
															"  pm.expect(body.method).to.eq(\"PUT\");",
															"  pm.expect(body.path).to.eq(\"/v2/seasons/invalid\");",
															"",
															"  pm.expect(body.validationErrors[0].property).to.eq(\"seasonId\");",
															"  pm.expect(body.validationErrors[0].error).to.eq(\"is invalid\");  ",
															"",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"season\": {\n        \"name\": \"1970-1971\",\n        \"d11TeamBudget\": 5,\n        \"d11TeamMaxTransfers\": 1,\n        \"status\": \"Pending\",\n        \"date\": \"1970-01-01\",\n        \"legacy\": true\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/seasons/invalid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"seasons",
														"invalid"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "401 Unauthorized",
									"item": [
										{
											"name": "PUT seasons - Unauthorized No Auth",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"PUT season no auth status code is 401\", () => {",
															"  pm.response.to.have.status(401);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"season\": {\n        \"name\": \"1970-1971\",\n        \"d11TeamBudget\": 5,\n        \"d11TeamMaxTransfers\": 1,\n        \"status\": \"Pending\",\n        \"date\": \"1970-01-01\",\n        \"legacy\": false\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/seasons/{{seasonId}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"seasons",
														"{{seasonId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "PUT seasons - Unauthorized Invalid Auth",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"PUT season invalid auth status code is 401\", () => {",
															"  pm.response.to.have.status(401);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{expiredJwt}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"season\": {\n        \"name\": \"1970-1971\",\n        \"d11TeamBudget\": 5,\n        \"d11TeamMaxTransfers\": 1,\n        \"status\": \"Pending\",\n        \"date\": \"1970-01-01\",\n        \"legacy\": false\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/seasons/{{seasonId}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"seasons",
														"{{seasonId}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "403 Forbidden",
									"item": [
										{
											"name": "Setup - Login User",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Setup login user status code is 200\", () => {",
															"  pm.response.to.have.status(200);",
															"});",
															"",
															"const body = pm.response.json();",
															"pm.environment.set(\"jwt\", body.jwt);",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\": \"{{userUsername}}\",\n    \"password\": \"{{userPassword}}\",\n    \"persistent\": true\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/security/authenticate",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"security",
														"authenticate"
													]
												}
											},
											"response": []
										},
										{
											"name": "PUT seasons - Forbidden",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"PUT season forbidden status code is 403\", () => {",
															"  pm.response.to.have.status(403);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{jwt}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"season\": {\n        \"name\": \"1970-1971\",\n        \"d11TeamBudget\": 5,\n        \"d11TeamMaxTransfers\": 1,\n        \"status\": \"Pending\",\n        \"date\": \"1970-01-01\",\n        \"legacy\": false\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/seasons/{{seasonId}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"seasons",
														"{{seasonId}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "404 Not Found",
									"item": [
										{
											"name": "Setup - Login Admin",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Setup login admin status code is 200\", () => {",
															"  pm.response.to.have.status(200);",
															"});",
															"",
															"const body = pm.response.json();",
															"pm.environment.set(\"jwt\", body.jwt);",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\": \"{{adminUsername}}\",\n    \"password\": \"{{adminPassword}}\",\n    \"persistent\": true\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/security/authenticate",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"security",
														"authenticate"
													]
												}
											},
											"response": []
										},
										{
											"name": "PUT seasons - Not Found",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"PUT season not found status code is 404\", () => {",
															"  pm.response.to.have.status(404);",
															"});",
															"",
															"pm.test(\"PUT season not found response body\", () => {",
															"  const body = pm.response.json();",
															"  let timestamp = new Date(body.timestamp);",
															"  pm.expect(isNaN(timestamp.getTime())).to.eq(false);",
															"  pm.expect(body.error).to.eq(\"Not Found\");",
															"  pm.expect(body.resource).to.eq('Season');",
															"  pm.expect(body.id).to.eq(0);",
															"  pm.expect(body.method).to.eq(\"PUT\");",
															"  pm.expect(body.path).to.eq(\"/v2/seasons/0\");",
															"",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{jwt}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"season\": {\n        \"name\": \"1970-1971\",\n        \"d11TeamBudget\": 5,\n        \"d11TeamMaxTransfers\": 1,\n        \"status\": \"Pending\",\n        \"date\": \"1970-01-01\",\n        \"legacy\": false\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/seasons/0",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"seasons",
														"0"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "match-weeks",
					"item": [
						{
							"name": "GET match-weeks?seasonId={seasonId}",
							"item": [
								{
									"name": "200 OK",
									"item": [
										{
											"name": "GET match-weeks?seasonId={seasonId} - OK",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"GET match weeks status code is 200\", () => {",
															"  pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"GET match weeks response body\", () => {",
															"  const body = pm.response.json();",
															"",
															"  pm.expect(body).to.have.property(\"matchWeeks\");",
															"",
															"  const matchWeeks = JSON.parse(pm.environment.get(\"matchWeeks\"));",
															"",
															"  pm.expect(body.matchWeeks.length).to.eq(matchWeeks.length);",
															"",
															"  for (let i = 0; i < body.matchWeeks.length; ++i) {",
															"    expect.matchWeekToEq(pm, body.matchWeeks[i], matchWeeks[i]);",
															"  }",
															"",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/v2/match-weeks?seasonId={{seasonId}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"match-weeks"
													],
													"query": [
														{
															"key": "seasonId",
															"value": "{{seasonId}}"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "400 Bad Request",
									"item": [
										{
											"name": "GET match-weeks?seasonId={seasonId} - Bad Request Invalid Season Id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"GET match weeks invalid season id status code is 400\", () => {",
															"  pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"GET match weeks invalid season id response body\", () => {",
															"  const body = pm.response.json();",
															"",
															"  let timestamp = new Date(body.timestamp);",
															"  pm.expect(isNaN(timestamp.getTime())).to.eq(false);",
															"  pm.expect(body.error).to.eq(\"Bad Request\");",
															"  pm.expect(body.method).to.eq(\"GET\");",
															"  pm.expect(body.path).to.eq(\"/v2/match-weeks\");",
															"",
															"  pm.expect(body.validationErrors[0].property).to.eq(\"seasonId\");",
															"  pm.expect(body.validationErrors[0].error).to.eq(\"is invalid\");",
															"",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/v2/match-weeks?seasonId=invalid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"match-weeks"
													],
													"query": [
														{
															"key": "seasonId",
															"value": "invalid"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "GET match-weeks?seasonId={seasonId} - Bad Request Missing Season Id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"GET match weeks invalid season id status code is 400\", () => {",
															"  pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"GET match weeks invalid season id response body\", () => {",
															"  const body = pm.response.json();",
															"",
															"  let timestamp = new Date(body.timestamp);",
															"  pm.expect(isNaN(timestamp.getTime())).to.eq(false);",
															"  pm.expect(body.error).to.eq(\"Bad Request\");",
															"  pm.expect(body.method).to.eq(\"GET\");",
															"  pm.expect(body.path).to.eq(\"/v2/match-weeks\");",
															"",
															"  pm.expect(body.validationErrors[0].property).to.eq(\"seasonId\");",
															"  pm.expect(body.validationErrors[0].error).to.eq(\"is missing\");",
															"",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/v2/match-weeks",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"match-weeks"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "GET match-weeks/{matchWeekId}",
							"item": [
								{
									"name": "200 OK",
									"item": [
										{
											"name": "GET match-weeks/{matchWeekId} - OK",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"GET match week status code is 200\", () => {",
															"  pm.response.to.have.status(200);",
															"});",
															"",
															"",
															"pm.test(\"GET match response body\", () => {",
															"  const body = pm.response.json();",
															"",
															"  pm.expect(body).to.have.property(\"matchWeek\");",
															"",
															"  const matchWeek = JSON.parse(pm.environment.get(\"matchWeek\"));",
															"",
															"  expect.matchWeekToEq(pm, body.matchWeek, matchWeek);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/v2/match-weeks/{{matchWeekId}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"match-weeks",
														"{{matchWeekId}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "400 Bad Request",
									"item": [
										{
											"name": "GET match-weeks/{matchWeekId} - Bad Request Invalid Match Week Id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"GET match week invalid match week id status code is 400\", () => {",
															"  pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"GET match week invalid match week id response body\", () => {",
															"  const body = pm.response.json();",
															"",
															"  let timestamp = new Date(body.timestamp);",
															"  pm.expect(isNaN(timestamp.getTime())).to.eq(false);",
															"  pm.expect(body.error).to.eq(\"Bad Request\");",
															"  pm.expect(body.method).to.eq(\"GET\");",
															"  pm.expect(body.path).to.eq(\"/v2/match-weeks/invalid\");",
															"",
															"  pm.expect(body.validationErrors[0].property).to.eq(\"matchWeekId\");",
															"  pm.expect(body.validationErrors[0].error).to.eq(\"is invalid\");",
															"",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/v2/match-weeks/invalid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"match-weeks",
														"invalid"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "404 Not Found",
									"item": [
										{
											"name": "GET match-weeks/{matchWeekId} - Not Found",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"GET match week not found status code is 404\", () => {",
															"  pm.response.to.have.status(404);",
															"});",
															"",
															"pm.test(\"GET match week not found response body\", () => {",
															"  const body = pm.response.json();",
															"",
															"  let timestamp = new Date(body.timestamp);",
															"  pm.expect(isNaN(timestamp.getTime())).to.eq(false);",
															"  pm.expect(body.error).to.eq(\"Not Found\");",
															"  pm.expect(body.resource).to.eq('MatchWeek');",
															"  pm.expect(body.id).to.eq(0);",
															"  pm.expect(body.method).to.eq(\"GET\");",
															"  pm.expect(body.path).to.eq(\"/v2/match-weeks/0\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/v2/match-weeks/0",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"match-weeks",
														"0"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "GET match-weeks/current",
							"item": [
								{
									"name": "200 OK",
									"item": [
										{
											"name": "GET match-weeks/current - OK",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"GET match week status code is 200\", () => {",
															"  pm.response.to.have.status(200);",
															"});",
															"",
															"",
															"pm.test(\"GET match response body\", () => {",
															"  const body = pm.response.json();",
															"",
															"  pm.expect(body).to.have.property(\"matchWeek\");",
															"",
															"  const currentMatchWeek = JSON.parse(pm.environment.get(\"currentMatchWeek\"));",
															"",
															"  expect.matchWeekToEq(pm, body.matchWeek, currentMatchWeek);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/v2/match-weeks/current",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"match-weeks",
														"current"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "matches",
					"item": [
						{
							"name": "GET matches/{matchId}",
							"item": [
								{
									"name": "200 OK",
									"item": [
										{
											"name": "GET matches/{matchId} - OK",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"GET match status code is 200\", () => {",
															"  pm.response.to.have.status(200);",
															"});",
															"",
															"",
															"pm.test(\"GET match response body\", () => {",
															"  const body = pm.response.json();",
															"",
															"  pm.expect(body).to.have.property(\"match\");",
															"",
															"  const match = JSON.parse(pm.environment.get(\"match\"));",
															"",
															"  // Check match",
															"  expect.matchToEq(pm, body.match, match);",
															"",
															"  // Check teams",
															"  expect.teamToEq(pm, body.match.homeTeam, match.homeTeam);",
															"  expect.teamToEq(pm, body.match.awayTeam, match.awayTeam);",
															"",
															"  // Check match week",
															"  pm.expect(body.match.matchWeek.id).to.eq(match.matchWeek.id);",
															"  pm.expect(body.match.matchWeek.matchWeekNumber).to.eq(match.matchWeek.matchWeekNumber);",
															"",
															"  // Check home team goals",
															"  pm.expect(body.match.homeTeamGoals.length).to.eq(match.homeTeamGoals.length);",
															"",
															"  for (let i = 0; i < body.match.homeTeamGoals.length; ++i) {",
															"    expect.goalToEq(pm, body.match.homeTeamGoals[i], match.homeTeamGoals[i]);",
															"    expect.playerToEq(pm, body.match.homeTeamGoals[i].player, match.homeTeamGoals[i].player);",
															"  }",
															"",
															"  // Check away team goals",
															"  pm.expect(body.match.awayTeamGoals.length).to.eq(match.awayTeamGoals.length);",
															"",
															"  for (let i = 0; i < body.match.awayTeamGoals.length; ++i) {",
															"    expect.goalToEq(pm, body.match.awayTeamGoals[i], match.awayTeamGoals[i]);",
															"    expect.playerToEq(pm, body.match.awayTeamGoals[i].player, match.awayTeamGoals[i].player);",
															"  }",
															"",
															"  // Check stadium",
															"  const stadium = JSON.parse(pm.environment.get(\"stadium\"));",
															"  ",
															"  expect.stadiumToEq(pm, body.stadium, stadium);",
															"",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/v2/matches/{{matchId}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"matches",
														"{{matchId}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "400 Bad Request",
									"item": [
										{
											"name": "GET matches/{matchd} - Bad Request Invalid Match Id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"GET match invalid match id status code is 400\", () => {",
															"  pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"GET match invalid match id response body\", () => {",
															"  const body = pm.response.json();",
															"",
															"  let timestamp = new Date(body.timestamp);",
															"  pm.expect(isNaN(timestamp.getTime())).to.eq(false);",
															"  pm.expect(body.error).to.eq(\"Bad Request\");",
															"  pm.expect(body.method).to.eq(\"GET\");",
															"  pm.expect(body.path).to.eq(\"/v2/matches/invalid\");",
															"",
															"  pm.expect(body.validationErrors[0].property).to.eq(\"matchId\");",
															"  pm.expect(body.validationErrors[0].error).to.eq(\"is invalid\");",
															"",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/v2/matches/invalid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"matches",
														"invalid"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "404 Not Found",
									"item": [
										{
											"name": "GET matches/{matchId} - Not Found",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"GET match not found status code is 404\", () => {",
															"  pm.response.to.have.status(404);",
															"});",
															"",
															"pm.test(\"GET match not found response body\", () => {",
															"  const body = pm.response.json();",
															"",
															"  let timestamp = new Date(body.timestamp);",
															"  pm.expect(isNaN(timestamp.getTime())).to.eq(false);",
															"  pm.expect(body.error).to.eq(\"Not Found\");",
															"  pm.expect(body.resource).to.eq('Match');",
															"  pm.expect(body.id).to.eq(0);",
															"  pm.expect(body.method).to.eq(\"GET\");",
															"  pm.expect(body.path).to.eq(\"/v2/matches/0\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/v2/matches/0",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"matches",
														"0"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "d11-matches",
					"item": [
						{
							"name": "GET d11-matches/{d11MatchId}",
							"item": [
								{
									"name": "200 OK",
									"item": [
										{
											"name": "GET d11-matches/{d11MatchId} - OK",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"GET D11 match status code is 200\", () => {",
															"  pm.response.to.have.status(200);",
															"});",
															"",
															"",
															"pm.test(\"GET D11 match response body\", () => {",
															"  const body = pm.response.json();",
															"",
															"  pm.expect(body).to.have.property(\"d11Match\");",
															"",
															"  const d11Match = JSON.parse(pm.environment.get(\"d11Match\"));",
															"",
															"  // Check D11 match",
															"  expect.d11MatchToEq(pm, body.d11Match, d11Match);",
															"",
															"  // Check D11 teams",
															"  expect.d11TeamToEq(pm, body.d11Match.homeD11Team, d11Match.homeD11Team);",
															"  expect.d11TeamToEq(pm, body.d11Match.awayD11Team, d11Match.awayD11Team);",
															"",
															"  // Check match week",
															"  pm.expect(body.d11Match.matchWeek.id).to.eq(d11Match.matchWeek.id);",
															"  pm.expect(body.d11Match.matchWeek.matchWeekNumber).to.eq(d11Match.matchWeek.matchWeekNumber);",
															"",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/v2/d11-matches/{{d11MatchId}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"d11-matches",
														"{{d11MatchId}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "400 Bad Request",
									"item": [
										{
											"name": "GET d11-matches/{d11Matchd} - Bad Request Invalid D11 Match Id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"GET D11 match invalid match id status code is 400\", () => {",
															"  pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"GET D11 match invalid match id response body\", () => {",
															"  const body = pm.response.json();",
															"",
															"  let timestamp = new Date(body.timestamp);",
															"  pm.expect(isNaN(timestamp.getTime())).to.eq(false);",
															"  pm.expect(body.error).to.eq(\"Bad Request\");",
															"  pm.expect(body.method).to.eq(\"GET\");",
															"  pm.expect(body.path).to.eq(\"/v2/d11-matches/invalid\");",
															"",
															"  pm.expect(body.validationErrors[0].property).to.eq(\"d11MatchId\");",
															"  pm.expect(body.validationErrors[0].error).to.eq(\"is invalid\");",
															"",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/v2/d11-matches/invalid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"d11-matches",
														"invalid"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "404 Not Found",
									"item": [
										{
											"name": "GET d11-matches/{d11MatchId} - Not Found",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"GET D11 match not found status code is 404\", () => {",
															"  pm.response.to.have.status(404);",
															"});",
															"",
															"pm.test(\"GET D11 match not found response body\", () => {",
															"  const body = pm.response.json();",
															"",
															"  let timestamp = new Date(body.timestamp);",
															"  pm.expect(isNaN(timestamp.getTime())).to.eq(false);",
															"  pm.expect(body.error).to.eq(\"Not Found\");",
															"  pm.expect(body.resource).to.eq('D11Match');",
															"  pm.expect(body.id).to.eq(0);",
															"  pm.expect(body.method).to.eq(\"GET\");",
															"  pm.expect(body.path).to.eq(\"/v2/d11-matches/0\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/v2/d11-matches/0",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"d11-matches",
														"0"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "players",
					"item": [
						{
							"name": "GET players/{playerId}",
							"item": [
								{
									"name": "200 OK",
									"item": [
										{
											"name": "GET players/{playerId} - OK",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"GET player status code is 200\", () => {",
															"  pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"GET player response body\", () => {",
															"  const body = pm.response.json();",
															"",
															"  pm.expect(body).to.have.property(\"player\");",
															"",
															"  const player = JSON.parse(pm.environment.get(\"player\"));",
															"",
															"  pm.expect(body.player.id).to.eq(player.id);",
															"",
															"  expect.playerToEq(pm, body.player, player);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/v2/players/{{playerId}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"players",
														"{{playerId}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "400 Bad Request",
									"item": [
										{
											"name": "GET players/{playerId} - Bad Request Invalid Season Id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"GET player invalid player id status code is 400\", () => {",
															"  pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"GET player invalid player id response body\", () => {",
															"  const body = pm.response.json();",
															"",
															"  let timestamp = new Date(body.timestamp);",
															"  pm.expect(isNaN(timestamp.getTime())).to.eq(false);",
															"  pm.expect(body.error).to.eq(\"Bad Request\");",
															"  pm.expect(body.method).to.eq(\"GET\");",
															"  pm.expect(body.path).to.eq(\"/v2/players/invalid\");",
															"",
															"  pm.expect(body.validationErrors[0].property).to.eq(\"playerId\");",
															"  pm.expect(body.validationErrors[0].error).to.eq(\"is invalid\");",
															"",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/v2/players/invalid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"players",
														"invalid"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "404 Not Found",
									"item": [
										{
											"name": "GET players/{playerId} - Not Found",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"GET players not found status code is 404\", () => {",
															"  pm.response.to.have.status(404);",
															"});",
															"",
															"pm.test(\"GET player not found response body\", () => {",
															"  const body = pm.response.json();",
															"",
															"  let timestamp = new Date(body.timestamp);",
															"  pm.expect(isNaN(timestamp.getTime())).to.eq(false);",
															"  pm.expect(body.error).to.eq(\"Not Found\");",
															"  pm.expect(body.resource).to.eq('Player');",
															"  pm.expect(body.id).to.eq(0);",
															"  pm.expect(body.method).to.eq(\"GET\");",
															"  pm.expect(body.path).to.eq(\"/v2/players/0\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/v2/players/0",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"players",
														"0"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "GET players/search?name={name}",
							"item": [
								{
									"name": "200 OK",
									"item": [
										{
											"name": "GET players/search?name={name} - OK Like",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"GET player search like status code is 200\", () => {",
															"  pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"GET player search like response body\", () => {",
															"  const body = pm.response.json();",
															"",
															"  pm.expect(body).to.have.property(\"players\");",
															"",
															"  const players = JSON.parse(pm.environment.get(\"playerSearchResultLike\"));",
															"",
															"  pm.expect(body.players.length).to.eq(players.length);",
															"",
															"  for (let i = 0; i < body.players.length; ++i) {",
															"    pm.expect(body.players[i].id).to.eq(players[i].id);",
															"  }",
															"",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/v2/players/search?name={{playerSearchName}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"players",
														"search"
													],
													"query": [
														{
															"key": "name",
															"value": "{{playerSearchName}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "GET players/search?name={name} - OK Exact",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"GET player search exact status code is 200\", () => {",
															"  pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"GET player search exact response body\", () => {",
															"  const body = pm.response.json();",
															"",
															"  pm.expect(body).to.have.property(\"players\");",
															"",
															"  const players = JSON.parse(pm.environment.get(\"playerSearchResultExact\"));",
															"",
															"  pm.expect(body.players.length).to.eq(players.length);",
															"",
															"  for (let i = 0; i < body.players.length; ++i) {",
															"    pm.expect(body.players[i].id).to.eq(players[i].id);",
															"  }",
															"",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/v2/players/search?name=\"{{playerSearchName}}\"",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"players",
														"search"
													],
													"query": [
														{
															"key": "name",
															"value": "\"{{playerSearchName}}\""
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "400 Bad Request",
									"item": [
										{
											"name": "GET players/search?name={name} - Bad Request Missing Name",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"GET player search missing name status code is 400\", () => {",
															"  pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"GET player search missing name response body\", () => {",
															"  const body = pm.response.json();",
															"",
															"  let timestamp = new Date(body.timestamp);",
															"  pm.expect(isNaN(timestamp.getTime())).to.eq(false);",
															"  pm.expect(body.error).to.eq(\"Bad Request\");",
															"  pm.expect(body.method).to.eq(\"GET\");",
															"  pm.expect(body.path).to.eq(\"/v2/players/search\");",
															"",
															"  pm.expect(body.validationErrors[0].property).to.eq(\"name\");",
															"  pm.expect(body.validationErrors[0].error).to.eq(\"is missing\");",
															"",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/v2/players/search",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"players",
														"search"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "player-season-stats",
					"item": [
						{
							"name": "GET player-season-stats?seasonId={seasonId}&page={page}",
							"item": [
								{
									"name": "200 OK",
									"item": [
										{
											"name": "GET player-season-stats?seasonId={seasonId}&page={page} - OK",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"GET player season stats status code is 200\", () => {",
															"  pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"GET player season stats response body\", () => {",
															"  const body = pm.response.json();",
															"",
															"  pm.expect(body).to.have.property(\"playerSeasonStats\");",
															"",
															"  const playerSeasonStats = JSON.parse(pm.environment.get(\"playerSeasonStats\"));",
															"",
															"  pm.expect(body.playerSeasonStats.length).to.eq(playerSeasonStats.length);",
															"",
															"  for (let i = 0; i < body.playerSeasonStats.length; ++i) {",
															"    expect.playerSeasonStatToEq(pm, body.playerSeasonStats[i], playerSeasonStats[i]);",
															"  }",
															"",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/v2/player-season-stats?seasonId={{seasonId}}&page=0",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"player-season-stats"
													],
													"query": [
														{
															"key": "seasonId",
															"value": "{{seasonId}}"
														},
														{
															"key": "page",
															"value": "0"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "400 Bad Request",
									"item": [
										{
											"name": "GET player-season-stats?seasonId={seasonId}&page={page} - Bad Request Invalid Season Id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"GET player season stats invalid season id status code is 400\", () => {",
															"  pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"GET player season stats invalid season id response body\", () => {",
															"  const body = pm.response.json();",
															"",
															"  let timestamp = new Date(body.timestamp);",
															"  pm.expect(isNaN(timestamp.getTime())).to.eq(false);",
															"  pm.expect(body.error).to.eq(\"Bad Request\");",
															"  pm.expect(body.method).to.eq(\"GET\");",
															"  pm.expect(body.path).to.eq(\"/v2/player-season-stats\");",
															"",
															"  pm.expect(body.validationErrors[0].property).to.eq(\"seasonId\");",
															"  pm.expect(body.validationErrors[0].error).to.eq(\"is invalid\");",
															"",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/v2/player-season-stats?seasonId=invalid&page=0",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"player-season-stats"
													],
													"query": [
														{
															"key": "seasonId",
															"value": "invalid"
														},
														{
															"key": "page",
															"value": "0"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "GET player-season-stats?seasonId={seasonId}&page={page} - Bad Request Missing Season Id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"GET player season stats missing season id status code is 400\", () => {",
															"  pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"GET player season stats missing season id response body\", () => {",
															"  const body = pm.response.json();",
															"",
															"  let timestamp = new Date(body.timestamp);",
															"  pm.expect(isNaN(timestamp.getTime())).to.eq(false);",
															"  pm.expect(body.error).to.eq(\"Bad Request\");",
															"  pm.expect(body.method).to.eq(\"GET\");",
															"  pm.expect(body.path).to.eq(\"/v2/player-season-stats\");",
															"",
															"  pm.expect(body.validationErrors[0].property).to.eq(\"seasonId\");",
															"  pm.expect(body.validationErrors[0].error).to.eq(\"is missing\");",
															"",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/v2/player-season-stats?page=0",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"player-season-stats"
													],
													"query": [
														{
															"key": "page",
															"value": "0"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "GET player-season-stats?seasonId={seasonId}&page={page} - Bad Request Invalid Page",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"GET player season stats invalid page status code is 400\", () => {",
															"  pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"GET player season stats invalid page response body\", () => {",
															"  const body = pm.response.json();",
															"",
															"  let timestamp = new Date(body.timestamp);",
															"  pm.expect(isNaN(timestamp.getTime())).to.eq(false);",
															"  pm.expect(body.error).to.eq(\"Bad Request\");",
															"  pm.expect(body.method).to.eq(\"GET\");",
															"  pm.expect(body.path).to.eq(\"/v2/player-season-stats\");",
															"",
															"  pm.expect(body.validationErrors[0].property).to.eq(\"page\");",
															"  pm.expect(body.validationErrors[0].error).to.eq(\"is invalid\");",
															"",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/v2/player-season-stats?seasonId={{seasonId}}&page=invalid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"player-season-stats"
													],
													"query": [
														{
															"key": "seasonId",
															"value": "{{seasonId}}"
														},
														{
															"key": "page",
															"value": "invalid"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "GET player-season-stats?seasonId={seasonId}&page={page} - Bad Request Missing Page",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"GET player season stats missing page status code is 400\", () => {",
															"  pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"GET player season stats missing page response body\", () => {",
															"  const body = pm.response.json();",
															"",
															"  let timestamp = new Date(body.timestamp);",
															"  pm.expect(isNaN(timestamp.getTime())).to.eq(false);",
															"  pm.expect(body.error).to.eq(\"Bad Request\");",
															"  pm.expect(body.method).to.eq(\"GET\");",
															"  pm.expect(body.path).to.eq(\"/v2/player-season-stats\");",
															"",
															"  pm.expect(body.validationErrors[0].property).to.eq(\"page\");",
															"  pm.expect(body.validationErrors[0].error).to.eq(\"is missing\");",
															"",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/v2/player-season-stats?seasonId={{seasonId}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"player-season-stats"
													],
													"query": [
														{
															"key": "seasonId",
															"value": "{{seasonId}}"
														}
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "team-season-stats",
					"item": [
						{
							"name": "GET team-season-stats?seasonId={seasonId}",
							"item": [
								{
									"name": "200 OK",
									"item": [
										{
											"name": "GET team-season-stats?seasonId={seasonId} - OK",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"GET team season stats status code is 200\", () => {",
															"  pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"GET team season stats response body\", () => {",
															"  const body = pm.response.json();",
															"",
															"  pm.expect(body).to.have.property(\"teamSeasonStats\");",
															"",
															"  const teamSeasonStats = JSON.parse(pm.environment.get(\"teamSeasonStats\"));",
															"",
															"  pm.expect(body.teamSeasonStats.length).to.eq(teamSeasonStats.length);",
															"",
															"  for (let i = 0; i < body.teamSeasonStats.length; ++i) {",
															"    expect.teamSeasonStatToEq(pm, body.teamSeasonStats[i], teamSeasonStats[i]);",
															"  }",
															"",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/v2/team-season-stats?seasonId={{seasonId}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"team-season-stats"
													],
													"query": [
														{
															"key": "seasonId",
															"value": "{{seasonId}}"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "400 Bad Request",
									"item": [
										{
											"name": "GET team-season-stats?seasonId={seasonId} - Bad Request Invalid Season Id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"GET team season stats invalid season id status code is 400\", () => {",
															"  pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"GET team season stats invalid season id response body\", () => {",
															"  const body = pm.response.json();",
															"",
															"  let timestamp = new Date(body.timestamp);",
															"  pm.expect(isNaN(timestamp.getTime())).to.eq(false);",
															"  pm.expect(body.error).to.eq(\"Bad Request\");",
															"  pm.expect(body.method).to.eq(\"GET\");",
															"  pm.expect(body.path).to.eq(\"/v2/team-season-stats\");",
															"",
															"  pm.expect(body.validationErrors[0].property).to.eq(\"seasonId\");",
															"  pm.expect(body.validationErrors[0].error).to.eq(\"is invalid\");",
															"",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/v2/team-season-stats?seasonId=invalid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"team-season-stats"
													],
													"query": [
														{
															"key": "seasonId",
															"value": "invalid"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "GET team-season-stats?seasonId={seasonId} - Bad Request Missing Season Id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"GET team season stats invalid season id status code is 400\", () => {",
															"  pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"GET team season stats invalid season id response body\", () => {",
															"  const body = pm.response.json();",
															"",
															"  let timestamp = new Date(body.timestamp);",
															"  pm.expect(isNaN(timestamp.getTime())).to.eq(false);",
															"  pm.expect(body.error).to.eq(\"Bad Request\");",
															"  pm.expect(body.method).to.eq(\"GET\");",
															"  pm.expect(body.path).to.eq(\"/v2/team-season-stats\");",
															"",
															"  pm.expect(body.validationErrors[0].property).to.eq(\"seasonId\");",
															"  pm.expect(body.validationErrors[0].error).to.eq(\"is missing\");",
															"",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/v2/team-season-stats",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"team-season-stats"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "d11-team-season-stats",
					"item": [
						{
							"name": "GET d11-team-season-stats?seasonId={seasonId}",
							"item": [
								{
									"name": "200 OK",
									"item": [
										{
											"name": "GET d11-team-season-stats?seasonId={seasonId} - OK",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"GET D11 team season stats status code is 200\", () => {",
															"  pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"GET D11 team season stats response body\", () => {",
															"  const body = pm.response.json();",
															"",
															"  pm.expect(body).to.have.property(\"d11TeamSeasonStats\");",
															"",
															"  const d11TeamSeasonStats = JSON.parse(pm.environment.get(\"d11TeamSeasonStats\"));",
															"",
															"  pm.expect(body.d11TeamSeasonStats.length).to.eq(d11TeamSeasonStats.length);",
															"",
															"  for (let i = 0; i < body.d11TeamSeasonStats.length; ++i) {",
															"    expect.d11TeamSeasonStatToEq(pm, body.d11TeamSeasonStats[i], d11TeamSeasonStats[i]);",
															"  }",
															"",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/v2/d11-team-season-stats?seasonId={{seasonId}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"d11-team-season-stats"
													],
													"query": [
														{
															"key": "seasonId",
															"value": "{{seasonId}}"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "400 Bad Request",
									"item": [
										{
											"name": "GET d11-team-season-stats?seasonId={seasonId} - Bad Request Invalid Season Id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"GET D11 team season stats invalid season id status code is 400\", () => {",
															"  pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"GET D11 team season stats invalid season id response body\", () => {",
															"  const body = pm.response.json();",
															"",
															"  let timestamp = new Date(body.timestamp);",
															"  pm.expect(isNaN(timestamp.getTime())).to.eq(false);",
															"  pm.expect(body.error).to.eq(\"Bad Request\");",
															"  pm.expect(body.method).to.eq(\"GET\");",
															"  pm.expect(body.path).to.eq(\"/v2/d11-team-season-stats\");",
															"",
															"  pm.expect(body.validationErrors[0].property).to.eq(\"seasonId\");",
															"  pm.expect(body.validationErrors[0].error).to.eq(\"is invalid\");",
															"",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/v2/d11-team-season-stats?seasonId=invalid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"d11-team-season-stats"
													],
													"query": [
														{
															"key": "seasonId",
															"value": "invalid"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "GET d11-team-season-stats?seasonId={seasonId} - Bad Request Missing Season Id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"GET D11 team season stats invalid season id status code is 400\", () => {",
															"  pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"GET D11 team season stats invalid season id response body\", () => {",
															"  const body = pm.response.json();",
															"",
															"  let timestamp = new Date(body.timestamp);",
															"  pm.expect(isNaN(timestamp.getTime())).to.eq(false);",
															"  pm.expect(body.error).to.eq(\"Bad Request\");",
															"  pm.expect(body.method).to.eq(\"GET\");",
															"  pm.expect(body.path).to.eq(\"/v2/d11-team-season-stats\");",
															"",
															"  pm.expect(body.validationErrors[0].property).to.eq(\"seasonId\");",
															"  pm.expect(body.validationErrors[0].error).to.eq(\"is missing\");",
															"",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/v2/d11-team-season-stats",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"d11-team-season-stats"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "transfer-windows",
					"item": [
						{
							"name": "GET transfer-windows/{transferWindowId}",
							"item": [
								{
									"name": "200 OK",
									"item": [
										{
											"name": "GET transfer-windows/{{transferWindowId}}",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"GET transfer window status code is 200\", () => {",
															"  pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"GET transfer window response body\", () => {",
															"",
															"  const body = pm.response.json();",
															"  const transferWindow = JSON.parse(pm.environment.get(\"transferWindow\"));",
															"",
															"  pm.expect(body).to.have.property(\"transferWindow\");",
															"",
															"  pm.expect(body.transferWindow.id).to.eq(transferWindow.id);",
															"  pm.expect(body.transferWindow.transferWindowNumber).to.eq(transferWindow.transferWindowNumber);",
															"  pm.expect(body.transferWindow.draft).to.eq(transferWindow.draft);",
															"  pm.expect(body.transferWindow.status).to.eq(transferWindow.status);",
															"  pm.expect(body.transferWindow.datetime).to.eq(pm.globals.get(\"datetimeMinus2\"));",
															"",
															"  pm.expect(body).to.have.property(\"matchWeek\");",
															"",
															"  const transferWindowMatchWeek = JSON.parse(pm.environment.get(\"transferWindowMatchWeek\"));",
															"",
															"  pm.expect(body.matchWeek.id).to.eq(transferWindowMatchWeek.id);",
															"  pm.expect(body.matchWeek.matchWeekNumber).to.eq(transferWindowMatchWeek.matchWeekNumber);",
															"",
															"  pm.expect(body).to.have.property(\"transferDays\");",
															"",
															"  const transferWindowTransferDays = JSON.parse(pm.environment.get(\"transferWindowTransferDays\"));",
															"  ",
															"  pm.expect(body.transferDays.length).to.eq(2);",
															"",
															"  for (let i = 0; i < body.transferDays.length; i++) {",
															"    pm.expect(body.transferDays[i].id).to.eq(transferWindowTransferDays[i].id);",
															"    pm.expect(body.transferDays[i].transferDayNumber).to.eq(transferWindowTransferDays[i].transferDayNumber);",
															"    pm.expect(body.transferDays[i].status).to.eq(transferWindowTransferDays[i].status);",
															"  }",
															"  ",
															"  pm.expect(body.transferDays[0].datetime).to.eq(pm.globals.get(\"datetimeMinus6\"));",
															"  pm.expect(body.transferDays[1].datetime).to.eq(pm.globals.get(\"datetimeMinus5\"));",
															"",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/v2/transfer-windows/{{transferWindowId}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"transfer-windows",
														"{{transferWindowId}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "400 Bad Request",
									"item": [
										{
											"name": "GET transfer-windows/{transferWindowId} - Bad Request Invalid Transfer Window Id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"GET transfer window invalid transfer window id status code is 400\", () => {",
															"  pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"GET transfer window invalid transfer window id response body\", () => {",
															"  const body = pm.response.json();",
															"",
															"  let timestamp = new Date(body.timestamp);",
															"  pm.expect(isNaN(timestamp.getTime())).to.eq(false);",
															"  pm.expect(body.error).to.eq(\"Bad Request\");",
															"  pm.expect(body.method).to.eq(\"GET\");",
															"  pm.expect(body.path).to.eq(\"/v2/transfer-windows/invalid\");",
															"",
															"  pm.expect(body.validationErrors[0].property).to.eq(\"transferWindowId\");",
															"  pm.expect(body.validationErrors[0].error).to.eq(\"is invalid\");  ",
															"",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/v2/transfer-windows/invalid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"transfer-windows",
														"invalid"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "404 Not Found",
									"item": [
										{
											"name": "GET transfer-windows/{transferWindowId} - Not Found",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"GET transfer window not found status code is 404\", () => {",
															"  pm.response.to.have.status(404);",
															"});",
															"",
															"pm.test(\"GET transfer window not found response body\", () => {",
															"  const body = pm.response.json();",
															"",
															"  let timestamp = new Date(body.timestamp);",
															"  pm.expect(isNaN(timestamp.getTime())).to.eq(false);",
															"  pm.expect(body.error).to.eq(\"Not Found\");",
															"  pm.expect(body.resource).to.eq('TransferWindow');",
															"  pm.expect(body.id).to.eq(0);",
															"  pm.expect(body.method).to.eq(\"GET\");",
															"  pm.expect(body.path).to.eq(\"/v2/transfer-windows/0\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/v2/transfer-windows/0",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"transfer-windows",
														"0"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "POST transfer-windows",
							"item": [
								{
									"name": "201 Created",
									"item": [
										{
											"name": "Setup - Login Admin",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Setup login admin status code is 200\", () => {",
															"  pm.response.to.have.status(200);",
															"});",
															"",
															"const body = pm.response.json();",
															"pm.environment.set(\"jwt\", body.jwt);",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\": \"{{adminUsername}}\",\n    \"password\": \"{{adminPassword}}\",\n    \"persistent\": true\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/security/authenticate",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"security",
														"authenticate"
													]
												}
											},
											"response": []
										},
										{
											"name": "POST transfer-windows - OK",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"POST transfer window status code is 201\", () => {",
															"  pm.response.to.have.status(201);",
															"});",
															"",
															"pm.test(\"POST transfer window response body\", () => {",
															"  const body = pm.response.json();",
															"  ",
															"  const currentTransferWindow = JSON.parse(pm.environment.get(\"currentTransferWindow\"));",
															"",
															"  pm.expect(body).to.have.property(\"transferWindow\");",
															"",
															"  pm.expect(body.transferWindow).to.have.property(\"id\");",
															"  pm.environment.set(\"tempTransferWindowId\", body.transferWindow.id);  ",
															"  pm.expect(body.transferWindow.transferWindowNumber).to.eq(currentTransferWindow.transferWindowNumber + 1);",
															"  pm.expect(body.transferWindow.draft).to.eq(false);",
															"  pm.expect(body.transferWindow.status).to.eq(\"Pending\");",
															"  pm.expect(body.transferWindow.datetime).to.eq(pm.globals.get(\"datetimePlus1\"));",
															"",
															"  pm.expect(body).to.have.property(\"matchWeek\");",
															"",
															"  const currentTransferWindowMatchWeek = JSON.parse(pm.environment.get(\"currentTransferWindowMatchWeek\"));",
															"",
															"  pm.expect(body.matchWeek.matchWeekNumber).to.eq(currentTransferWindowMatchWeek.matchWeekNumber + 1);",
															"",
															"  pm.expect(body).to.have.property(\"transferDays\");",
															"",
															"  pm.expect(body.transferDays.length).to.eq(1);",
															"",
															"  pm.expect(body.transferDays[0].transferDayNumber).to.eq(1);",
															"  pm.expect(body.transferDays[0].status).to.eq('Pending');",
															"  pm.expect(body.transferDays[0].datetime).to.eq(pm.globals.get(\"datetimePlus2\"));",
															"",
															"});",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{jwt}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"datetime\": \"{{datetimePlus1}}\",\n    \"transferDayDelay\": 1\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/transfer-windows",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"transfer-windows"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "400 Bad Request",
									"item": [
										{
											"name": "Setup - Login Admin",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Setup login admin status code is 200\", () => {",
															"  pm.response.to.have.status(200);",
															"});",
															"",
															"const body = pm.response.json();",
															"pm.environment.set(\"jwt\", body.jwt);",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\": \"{{adminUsername}}\",\n    \"password\": \"{{adminPassword}}\",\n    \"persistent\": true\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/security/authenticate",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"security",
														"authenticate"
													]
												}
											},
											"response": []
										},
										{
											"name": "POST transfer-windows - Bad Request Missing Properties",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"POST transfer window invalid datetime status code is 400\", () => {",
															"  pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"POST transfer window invalid datetime response body\", () => {",
															"  const body = pm.response.json();",
															"",
															"  let timestamp = new Date(body.timestamp);",
															"  pm.expect(isNaN(timestamp.getTime())).to.eq(false);",
															"  pm.expect(body.error).to.eq(\"Bad Request\");",
															"  pm.expect(body.method).to.eq(\"POST\");",
															"  pm.expect(body.path).to.eq(\"/v2/transfer-windows\");",
															"",
															"  pm.expect(body.validationErrors[0].property).to.eq(\"datetime\");",
															"  pm.expect(body.validationErrors[0].error).to.eq(\"is missing\");  ",
															"",
															"  pm.expect(body.validationErrors[1].property).to.eq(\"transferDayDelay\");",
															"  pm.expect(body.validationErrors[1].error).to.eq(\"is missing\");  ",
															"",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{jwt}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/transfer-windows",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"transfer-windows"
													]
												}
											},
											"response": []
										},
										{
											"name": "POST transfer-windows - Bad Request Invalid Datetime",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"POST transfer window invalid datetime status code is 400\", () => {",
															"  pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"POST transfer window invalid datetime response body\", () => {",
															"  const body = pm.response.json();",
															"  let timestamp = new Date(body.timestamp);",
															"  pm.expect(isNaN(timestamp.getTime())).to.eq(false);",
															"  pm.expect(body.error).to.eq(\"Bad Request\");",
															"  pm.expect(body.method).to.eq(\"POST\");",
															"  pm.expect(body.path).to.eq(\"/v2/transfer-windows\");",
															"",
															"  pm.expect(body.validationErrors[0].property).to.eq(\"datetime\");",
															"  pm.expect(body.validationErrors[0].error).to.eq(\"must be after current datetime\");  ",
															"",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{jwt}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"datetime\": \"1970-01-01T00:00:00\",\n    \"transferDayDelay\": 1\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/transfer-windows",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"transfer-windows"
													]
												}
											},
											"response": []
										},
										{
											"name": "POST transfer-windows - Bad Request Negative Transfer Day Delay",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"POST transfer window invalid transfer day delay status code is 400\", () => {",
															"  pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"POST transfer window invalid transfer day delay response body\", () => {",
															"const body = pm.response.json();",
															"  let timestamp = new Date(body.timestamp);",
															"  pm.expect(isNaN(timestamp.getTime())).to.eq(false);",
															"  pm.expect(body.error).to.eq(\"Bad Request\");",
															"  pm.expect(body.method).to.eq(\"POST\");",
															"  pm.expect(body.path).to.eq(\"/v2/transfer-windows\");",
															"",
															"  pm.expect(body.validationErrors[0].property).to.eq(\"transferDayDelay\");",
															"  pm.expect(body.validationErrors[0].error).to.eq(\"must be positive\");  ",
															"",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{jwt}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"datetime\": \"{{datetimePlus1}}\",\n    \"transferDayDelay\": -1\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/transfer-windows",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"transfer-windows"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "401 Unauthorized",
									"item": [
										{
											"name": "POST transfer-windows - Unauthorized No Auth",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"POST transfer window no auth status code is 401\", () => {",
															"  pm.response.to.have.status(401);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"datetime\": \"{{tomorrow}}\",\n    \"transferDayDelay\": 1\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/transfer-windows",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"transfer-windows"
													]
												}
											},
											"response": []
										},
										{
											"name": "POST transfer-windows - Unauthorized Invalid Auth",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"POST transfer window invalid auth status code is 401\", () => {",
															"  pm.response.to.have.status(401);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{expiredJwt}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"datetime\": \"{{tomorrow}}\",\n    \"transferDayDelay\": 1\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/transfer-windows",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"transfer-windows"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "403 Forbidden",
									"item": [
										{
											"name": "Setup - Login User",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Setup login user status code is 200\", () => {",
															"  pm.response.to.have.status(200);",
															"});",
															"",
															"const body = pm.response.json();",
															"pm.environment.set(\"jwt\", body.jwt);",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\": \"{{userUsername}}\",\n    \"password\": \"{{userPassword}}\",\n    \"persistent\": true\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/security/authenticate",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"security",
														"authenticate"
													]
												}
											},
											"response": []
										},
										{
											"name": "POST transfer-windows - Forbidden",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"POST transfer window forbidden status code is 403\", () => {",
															"  pm.response.to.have.status(403);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{jwt}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"datetime\": \"{{tomorrow}}\",\n    \"transferDayDelay\": 1\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/transfer-windows",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"transfer-windows"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "409 Conflict",
									"item": [
										{
											"name": "Setup - Login Admin",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Setup login admin status code is 200\", () => {",
															"  pm.response.to.have.status(200);",
															"});",
															"",
															"const body = pm.response.json();",
															"pm.environment.set(\"jwt\", body.jwt);",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\": \"{{adminUsername}}\",\n    \"password\": \"{{adminPassword}}\",\n    \"persistent\": true\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/security/authenticate",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"security",
														"authenticate"
													]
												}
											},
											"response": []
										},
										{
											"name": "POST transfer-windows - Conflict No Match Week Found After Datetime",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"POST transfer window no match week found after datetime status code is 409\", () => {",
															"  pm.response.to.have.status(409);",
															"});",
															"",
															"pm.test(\"POST transfer window no match week found after datetime response body\", () => {",
															"  const body = pm.response.json();",
															"",
															"  let timestamp = new Date(body.timestamp);",
															"  pm.expect(isNaN(timestamp.getTime())).to.eq(false);",
															"  pm.expect(body.error).to.eq(\"Conflict\");",
															"  pm.expect(body.message).to.eq('No match week found after 2025-01-01');",
															"  pm.expect(body.method).to.eq(\"POST\");",
															"  pm.expect(body.path).to.eq(\"/v2/transfer-windows\");",
															"",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{jwt}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"datetime\": \"2025-01-01T00:00:00\",\n    \"transferDayDelay\": 1\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/transfer-windows",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"transfer-windows"
													]
												}
											},
											"response": []
										},
										{
											"name": "POST transfer-windows - Conflict Current Transfer Window Not Finished",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"POST transfer window current transfer window not finished status code is 409\", () => {",
															"  pm.response.to.have.status(409);",
															"});",
															"",
															"pm.test(\"POST transfer window current transfer window not finished response body\", () => {",
															"  const body = pm.response.json();",
															"",
															"  let timestamp = new Date(body.timestamp);",
															"  pm.expect(isNaN(timestamp.getTime())).to.eq(false);",
															"  pm.expect(body.error).to.eq(\"Conflict\");",
															"  pm.expect(body.message).to.match(/Current transfer window status is (Pending|Active)/);",
															"  pm.expect(body.method).to.eq(\"POST\");",
															"  pm.expect(body.path).to.eq(\"/v2/transfer-windows\");",
															"",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{jwt}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"datetime\": \"{{datetimePlus1}}\",\n    \"transferDayDelay\": 1\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/transfer-windows",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"transfer-windows"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "DELETE transfer-windows",
							"item": [
								{
									"name": "200 OK",
									"item": [
										{
											"name": "Setup - Login Admin",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Setup login admin status code is 200\", () => {",
															"  pm.response.to.have.status(200);",
															"});",
															"",
															"const body = pm.response.json();",
															"pm.environment.set(\"jwt\", body.jwt);",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\": \"{{adminUsername}}\",\n    \"password\": \"{{adminPassword}}\",\n    \"persistent\": true\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/security/authenticate",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"security",
														"authenticate"
													]
												}
											},
											"response": []
										},
										{
											"name": "DELETE transfer-windows - OK",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"DELETE transfer window status code is 204\", () => {",
															"  pm.response.to.have.status(204);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{jwt}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/v2/transfer-windows/{{tempTransferWindowId}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"transfer-windows",
														"{{tempTransferWindowId}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "400 Bad Request",
									"item": [
										{
											"name": "Setup - Login Admin",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Setup login admin status code is 200\", () => {",
															"  pm.response.to.have.status(200);",
															"});",
															"",
															"const body = pm.response.json();",
															"pm.environment.set(\"jwt\", body.jwt);",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\": \"{{adminUsername}}\",\n    \"password\": \"{{adminPassword}}\",\n    \"persistent\": true\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/security/authenticate",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"security",
														"authenticate"
													]
												}
											},
											"response": []
										},
										{
											"name": "DELETE transfer-windows - Bad Request Invalid Transfer Window Id",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"DELETE transfer window invalid transfer window id status code is 400\", () => {",
															"  pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"DELETE transfer window invalid transfer window id response body\", () => {",
															"  const body = pm.response.json();",
															"",
															"  let timestamp = new Date(body.timestamp);",
															"  pm.expect(isNaN(timestamp.getTime())).to.eq(false);",
															"  pm.expect(body.error).to.eq(\"Bad Request\");",
															"  pm.expect(body.method).to.eq(\"DELETE\");",
															"  pm.expect(body.path).to.eq(\"/v2/transfer-windows/invalid\");",
															"",
															"  pm.expect(body.validationErrors[0].property).to.eq(\"transferWindowId\");",
															"  pm.expect(body.validationErrors[0].error).to.eq(\"is invalid\");  ",
															"",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{jwt}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/v2/transfer-windows/invalid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"transfer-windows",
														"invalid"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "401 Unauthorized",
									"item": [
										{
											"name": "DELETE transfer-windows - Unauthorized No Auth",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"DELETE transfer window no auth status code is 401\", () => {",
															"  pm.response.to.have.status(401);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/v2/transfer-windows/{{currentTransferWindowId}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"transfer-windows",
														"{{currentTransferWindowId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "DELETE transfer-windows - Unauthorized Invalid Auth",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"DELETE transfer window invalid auth status code is 401\", () => {",
															"  pm.response.to.have.status(401);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{expiredJwt}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/v2/transfer-windows/{{currentTransferWindowId}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"transfer-windows",
														"{{currentTransferWindowId}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "403 Forbidden",
									"item": [
										{
											"name": "Setup - Login User",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Setup login user status code is 200\", () => {",
															"  pm.response.to.have.status(200);",
															"});",
															"",
															"const body = pm.response.json();",
															"pm.environment.set(\"jwt\", body.jwt);",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\": \"{{userUsername}}\",\n    \"password\": \"{{userPassword}}\",\n    \"persistent\": true\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/security/authenticate",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"security",
														"authenticate"
													]
												}
											},
											"response": []
										},
										{
											"name": "DELETE transfer-windows - Forbidden",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"DELETE transfer window forbidden status code is 403\", () => {",
															"  pm.response.to.have.status(403);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{jwt}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/v2/transfer-windows/{{currentTransferWindowId}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"transfer-windows",
														"{{currentTransferWindowId}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "404 Not Found",
									"item": [
										{
											"name": "Setup - Login Admin",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Setup login admin status code is 200\", () => {",
															"  pm.response.to.have.status(200);",
															"});",
															"",
															"const body = pm.response.json();",
															"pm.environment.set(\"jwt\", body.jwt);",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\": \"{{adminUsername}}\",\n    \"password\": \"{{adminPassword}}\",\n    \"persistent\": true\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/security/authenticate",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"security",
														"authenticate"
													]
												}
											},
											"response": []
										},
										{
											"name": "DELETE transfer-windows - Not Found",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"DELETE transfer window not found status code is 404\", () => {",
															"  pm.response.to.have.status(404);",
															"});",
															"",
															"pm.test(\"DELETE transfer window not found response body\", () => {",
															"  const body = pm.response.json();",
															"",
															"  let timestamp = new Date(body.timestamp);",
															"  pm.expect(isNaN(timestamp.getTime())).to.eq(false);",
															"  pm.expect(body.error).to.eq(\"Not Found\");",
															"  pm.expect(body.resource).to.eq('TransferWindow');",
															"  pm.expect(body.id).to.eq(0);",
															"  pm.expect(body.method).to.eq(\"DELETE\");",
															"  pm.expect(body.path).to.eq(\"/v2/transfer-windows/0\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{jwt}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/v2/transfer-windows/0",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"transfer-windows",
														"0"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "409 Conflict",
									"item": [
										{
											"name": "Setup - Login Admin",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Setup login admin status code is 200\", () => {",
															"  pm.response.to.have.status(200);",
															"});",
															"",
															"const body = pm.response.json();",
															"pm.environment.set(\"jwt\", body.jwt);",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\": \"{{adminUsername}}\",\n    \"password\": \"{{adminPassword}}\",\n    \"persistent\": true\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/security/authenticate",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"security",
														"authenticate"
													]
												}
											},
											"response": []
										},
										{
											"name": "DELETE transfer-windows - Status Not Pending",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"DELETE transfer window status not pending status code is 409\", () => {",
															"  pm.response.to.have.status(409);",
															"});",
															"",
															"pm.test(\"DELETE transfer window status not pending response body\", () => {",
															"  const body = pm.response.json();",
															"",
															"  let timestamp = new Date(body.timestamp);",
															"  pm.expect(isNaN(timestamp.getTime())).to.eq(false);",
															"  pm.expect(body.error).to.eq(\"Conflict\");",
															"  pm.expect(body.message).to.match(/Transfer window status is (Active|Finished)/);",
															"  pm.expect(body.method).to.eq(\"DELETE\");",
															"  pm.expect(body.path).to.eq(\"/v2/transfer-windows/\" + pm.environment.get(\"currentTransferWindowId\"));",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{jwt}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/v2/transfer-windows/{{currentTransferWindowId}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"transfer-windows",
														"{{currentTransferWindowId}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "transfer-days",
					"item": [
						{
							"name": "GET transfer-days/{transferDayId}",
							"item": [
								{
									"name": "200 OK",
									"item": [
										{
											"name": "GET transfer-days/{transferDayId} - OK",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"GET transfer day status code is 200\", () => {",
															"  pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"GET transfer day response body\", () => {",
															"  const body = pm.response.json();",
															"",
															"  pm.expect(body).to.have.property(\"transferDay\");",
															"",
															"  // CHeck transfer day",
															"  const transferDay = JSON.parse(pm.environment.get(\"transferDay\"));",
															"  expect.transferDayToEq(pm, body.transferDay, transferDay)",
															"",
															"  // Check transfer window",
															"  const transferWindow = JSON.parse(pm.environment.get(\"transferDayTransferWindow\"));",
															"  expect.transferWindowToEq(pm, body.transferWindow, transferWindow)",
															"",
															"  // Check match week",
															"  const matchWeek = JSON.parse(pm.environment.get(\"transferDayMatchWeek\"));",
															"  expect.matchWeekToEq(pm, body.matchWeek, matchWeek)",
															"",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/v2/transfer-days/{{transferDayId}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"transfer-days",
														"{{transferDayId}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "400 Bad Request",
									"item": [
										{
											"name": "GET transfer-days/{transferDayId} - Bad Request Invalid Transfer Day Id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"GET transfer invalid transfer day id status code is 400\", () => {",
															"  pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"GET transfer invalid transfer day response body\", () => {",
															"  const body = pm.response.json();",
															"",
															"  let timestamp = new Date(body.timestamp);",
															"  pm.expect(isNaN(timestamp.getTime())).to.eq(false);",
															"  pm.expect(body.error).to.eq(\"Bad Request\");",
															"  pm.expect(body.method).to.eq(\"GET\");",
															"  pm.expect(body.path).to.eq(\"/v2/transfer-days/invalid\");",
															"",
															"  pm.expect(body.validationErrors[0].property).to.eq(\"transferDayId\");",
															"  pm.expect(body.validationErrors[0].error).to.eq(\"is invalid\");",
															"",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/v2/transfer-days/invalid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"transfer-days",
														"invalid"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "404 Not Found",
									"item": [
										{
											"name": "GET transfer-days/{transferDayId} - Not Found",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"GET transfer day not found status code is 404\", () => {",
															"  pm.response.to.have.status(404);",
															"});",
															"",
															"pm.test(\"GET transfer day not found response body\", () => {",
															"  const body = pm.response.json();",
															"",
															"  let timestamp = new Date(body.timestamp);",
															"  pm.expect(isNaN(timestamp.getTime())).to.eq(false);",
															"  pm.expect(body.error).to.eq(\"Not Found\");",
															"  pm.expect(body.resource).to.eq('TransferDay');",
															"  pm.expect(body.id).to.eq(0);",
															"  pm.expect(body.method).to.eq(\"GET\");",
															"  pm.expect(body.path).to.eq(\"/v2/transfer-days/0\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/v2/transfer-days/0",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"transfer-days",
														"0"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "transfer-listings",
					"item": [
						{
							"name": "GET transfer-listings?transferDayId={transferDayId}&page={page}",
							"item": [
								{
									"name": "200 OK",
									"item": [
										{
											"name": "GET transfer-listings?transferDayId={transferDayId}&page={page} - OK",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"GET transfer listings status code is 200\", () => {",
															"  pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"GET transfer listings response body\", () => {",
															"  const body = pm.response.json();",
															"",
															"  const transferListings = JSON.parse(pm.environment.get(\"transferDayTransferListings\"));",
															"",
															"  pm.expect(body.transferListings.length).to.gt(0);",
															"  pm.expect(body.transferListings.length).to.eq(transferListings.length);",
															"",
															"  for (let i = 0; i < body.transferListings.length; ++i) {",
															"    expect.transferListingToEq(pm, body.transferListings[i], transferListings[i]);",
															"  }",
															"",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/v2/transfer-listings?transferDayId={{transferDayId}}&page=0",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"transfer-listings"
													],
													"query": [
														{
															"key": "transferDayId",
															"value": "{{transferDayId}}"
														},
														{
															"key": "page",
															"value": "0"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "400 Bad Request",
									"item": [
										{
											"name": "GET transfer-listings?transferDayId={transferDayId}&page={page} - Bad Request Missing Transfer Day Id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"GET transfer listings missing transfer day id status code is 400\", () => {",
															"  pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"GET transfer listings missing transfer day id response body\", () => {",
															"  const body = pm.response.json();",
															"",
															"  let timestamp = new Date(body.timestamp);",
															"  pm.expect(isNaN(timestamp.getTime())).to.eq(false);",
															"  pm.expect(body.error).to.eq(\"Bad Request\");",
															"  pm.expect(body.method).to.eq(\"GET\");",
															"  pm.expect(body.path).to.eq(\"/v2/transfer-listings\");",
															"",
															"  pm.expect(body.validationErrors[0].property).to.eq(\"transferDayId\");",
															"  pm.expect(body.validationErrors[0].error).to.eq(\"is missing\");",
															"",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/v2/transfer-listings?page=0",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"transfer-listings"
													],
													"query": [
														{
															"key": "page",
															"value": "0"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "GET transfer-listings?transferDayId={transferDayId}&page={page} - Bad Request Invalid Transfer Day Id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"GET transfer listings invalid transfer day id status code is 400\", () => {",
															"  pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"GET transfer listings invalid transfer day id response body\", () => {",
															"  const body = pm.response.json();",
															"",
															"  let timestamp = new Date(body.timestamp);",
															"  pm.expect(isNaN(timestamp.getTime())).to.eq(false);",
															"  pm.expect(body.error).to.eq(\"Bad Request\");",
															"  pm.expect(body.method).to.eq(\"GET\");",
															"  pm.expect(body.path).to.eq(\"/v2/transfer-listings\");",
															"",
															"  pm.expect(body.validationErrors[0].property).to.eq(\"transferDayId\");",
															"  pm.expect(body.validationErrors[0].error).to.eq(\"is invalid\");",
															"",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/v2/transfer-listings?transferDayId=invalid&page=0",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"transfer-listings"
													],
													"query": [
														{
															"key": "transferDayId",
															"value": "invalid"
														},
														{
															"key": "page",
															"value": "0"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "GET transfer-listings?transferDayId={transferDayId}&page={page} - Bad Request Negative Transfer Day Id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"GET transfer listings non positive transfer day id status code is 400\", () => {",
															"  pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"GET transfer listings non positive transfer day id response body\", () => {",
															"  const body = pm.response.json();",
															"",
															"  let timestamp = new Date(body.timestamp);",
															"  pm.expect(isNaN(timestamp.getTime())).to.eq(false);",
															"  pm.expect(body.error).to.eq(\"Bad Request\");",
															"  pm.expect(body.method).to.eq(\"GET\");",
															"  pm.expect(body.path).to.eq(\"/v2/transfer-listings\");",
															"",
															"  pm.expect(body.validationErrors[0].property).to.eq(\"transferDayId\");",
															"  pm.expect(body.validationErrors[0].error).to.eq(\"must be positive\");",
															"",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/v2/transfer-listings?transferDayId=-1&page=0",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"transfer-listings"
													],
													"query": [
														{
															"key": "transferDayId",
															"value": "-1"
														},
														{
															"key": "page",
															"value": "0"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "GET transfer-listings?transferDayId={transferDayId}&page={page} - Bad Request Missing Page",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"GET transfer listings missing page status code is 400\", () => {",
															"  pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"GET transfer listings missing page response body\", () => {",
															"  const body = pm.response.json();",
															"",
															"  let timestamp = new Date(body.timestamp);",
															"  pm.expect(isNaN(timestamp.getTime())).to.eq(false);",
															"  pm.expect(body.error).to.eq(\"Bad Request\");",
															"  pm.expect(body.method).to.eq(\"GET\");",
															"  pm.expect(body.path).to.eq(\"/v2/transfer-listings\");",
															"",
															"  pm.expect(body.validationErrors[0].property).to.eq(\"page\");",
															"  pm.expect(body.validationErrors[0].error).to.eq(\"is missing\");",
															"",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/v2/transfer-listings?transferDayId={{transferDayId}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"transfer-listings"
													],
													"query": [
														{
															"key": "transferDayId",
															"value": "{{transferDayId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "GET transfer-listings?transferDayId={transferDayId}&page={page} - Bad Request Invalid Page",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"GET transfer listings invalid page status code is 400\", () => {",
															"  pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"GET transfer listings invalid page response body\", () => {",
															"  const body = pm.response.json();",
															"",
															"  let timestamp = new Date(body.timestamp);",
															"  pm.expect(isNaN(timestamp.getTime())).to.eq(false);",
															"  pm.expect(body.error).to.eq(\"Bad Request\");",
															"  pm.expect(body.method).to.eq(\"GET\");",
															"  pm.expect(body.path).to.eq(\"/v2/transfer-listings\");",
															"",
															"  pm.expect(body.validationErrors[0].property).to.eq(\"page\");",
															"  pm.expect(body.validationErrors[0].error).to.eq(\"is invalid\");",
															"",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/v2/transfer-listings?transferDayId={{transferDayId}}&page=invalid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"transfer-listings"
													],
													"query": [
														{
															"key": "transferDayId",
															"value": "{{transferDayId}}"
														},
														{
															"key": "page",
															"value": "invalid"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "GET transfer-listings?transferDayId={transferDayId}&page={page} - Bad Request Negative Page",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"GET transfer listings negative page status code is 400\", () => {",
															"  pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"GET transfer listings negative page response body\", () => {",
															"  const body = pm.response.json();",
															"",
															"  let timestamp = new Date(body.timestamp);",
															"  pm.expect(isNaN(timestamp.getTime())).to.eq(false);",
															"  pm.expect(body.error).to.eq(\"Bad Request\");",
															"  pm.expect(body.method).to.eq(\"GET\");",
															"  pm.expect(body.path).to.eq(\"/v2/transfer-listings\");",
															"",
															"  pm.expect(body.validationErrors[0].property).to.eq(\"page\");",
															"  pm.expect(body.validationErrors[0].error).to.eq(\"must be non-negative\");",
															"",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/v2/transfer-listings?transferDayId={{transferDayId}}&page=-1",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"transfer-listings"
													],
													"query": [
														{
															"key": "transferDayId",
															"value": "{{transferDayId}}"
														},
														{
															"key": "page",
															"value": "-1"
														}
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "transfer-bids",
					"item": [
						{
							"name": "GET transfer-bids?transferDayId={transferDayId}",
							"item": [
								{
									"name": "200 OK",
									"item": [
										{
											"name": "GET transfer-bids?transferDayId={transferDayId} - OK",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"GET transfer bids status code is 200\", () => {",
															"  pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"GET transfer bids response body\", () => {",
															"  const body = pm.response.json();",
															"",
															"  const transferBids = JSON.parse(pm.environment.get(\"transferDayTransferBids\"));",
															"",
															"  pm.expect(body.transferBids.length).to.gt(0);",
															"  pm.expect(body.transferBids.length).to.eq(transferBids.length);",
															"",
															"  for (let i = 0; i < body.transferBids.length; ++i) {",
															"    expect.transferBidToEq(pm, body.transferBids[i], transferBids[i]);",
															"  }",
															"",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/v2/transfer-bids?transferDayId={{transferDayId}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"transfer-bids"
													],
													"query": [
														{
															"key": "transferDayId",
															"value": "{{transferDayId}}"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "400 Bad Request",
									"item": [
										{
											"name": "GET transfer-bids?transferDayId={transferDayId} - Bad Request Missing Transfer Day Id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"GET transfer bids missing transfer day id status code is 400\", () => {",
															"  pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"GET transfer bids missing transfer day id response body\", () => {",
															"  const body = pm.response.json();",
															"",
															"  let timestamp = new Date(body.timestamp);",
															"  pm.expect(isNaN(timestamp.getTime())).to.eq(false);",
															"  pm.expect(body.error).to.eq(\"Bad Request\");",
															"  pm.expect(body.method).to.eq(\"GET\");",
															"  pm.expect(body.path).to.eq(\"/v2/transfer-bids\");",
															"",
															"  pm.expect(body.validationErrors[0].property).to.eq(\"transferDayId\");",
															"  pm.expect(body.validationErrors[0].error).to.eq(\"is missing\");",
															"",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/v2/transfer-bids?page=0",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"transfer-bids"
													],
													"query": [
														{
															"key": "page",
															"value": "0"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "GET transfer-bids?transferDayId={transferDayId} - Bad Request Invalid Transfer Day Id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"GET transfer bids invalid transfer day id status code is 400\", () => {",
															"  pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"GET transfer bids invalid transfer day id response body\", () => {",
															"  const body = pm.response.json();",
															"",
															"  let timestamp = new Date(body.timestamp);",
															"  pm.expect(isNaN(timestamp.getTime())).to.eq(false);",
															"  pm.expect(body.error).to.eq(\"Bad Request\");",
															"  pm.expect(body.method).to.eq(\"GET\");",
															"  pm.expect(body.path).to.eq(\"/v2/transfer-bids\");",
															"",
															"  pm.expect(body.validationErrors[0].property).to.eq(\"transferDayId\");",
															"  pm.expect(body.validationErrors[0].error).to.eq(\"is invalid\");",
															"",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/v2/transfer-bids?transferDayId=invalid&page=0",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"transfer-bids"
													],
													"query": [
														{
															"key": "transferDayId",
															"value": "invalid"
														},
														{
															"key": "page",
															"value": "0"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "GET transfer-bids?transferDayId={transferDayId} - Bad Request Negative Transfer Day Id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"GET transfer bids non positive transfer day id status code is 400\", () => {",
															"  pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"GET transfer bids non positive transfer day id response body\", () => {",
															"  const body = pm.response.json();",
															"",
															"  let timestamp = new Date(body.timestamp);",
															"  pm.expect(isNaN(timestamp.getTime())).to.eq(false);",
															"  pm.expect(body.error).to.eq(\"Bad Request\");",
															"  pm.expect(body.method).to.eq(\"GET\");",
															"  pm.expect(body.path).to.eq(\"/v2/transfer-bids\");",
															"",
															"  pm.expect(body.validationErrors[0].property).to.eq(\"transferDayId\");",
															"  pm.expect(body.validationErrors[0].error).to.eq(\"must be positive\");",
															"",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/v2/transfer-bids?transferDayId=-1",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"transfer-bids"
													],
													"query": [
														{
															"key": "transferDayId",
															"value": "-1"
														}
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "transfers",
					"item": [
						{
							"name": "GET transfers?transferDayId={transferDayId}",
							"item": [
								{
									"name": "200 OK",
									"item": [
										{
											"name": "GET transfers?transferDayId={transferDayId} - OK",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"GET transfers status code is 200\", () => {",
															"  pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"GET transfers response body\", () => {",
															"  const body = pm.response.json();",
															"",
															"  const transfers = JSON.parse(pm.environment.get(\"transferDayTransfers\"));",
															"",
															"  pm.expect(body.transfers.length).to.gt(0);",
															"  pm.expect(body.transfers.length).to.eq(transfers.length);",
															"",
															"  for (let i = 0; i < body.transfers.length; ++i) {",
															"    expect.transferToEq(pm, body.transfers[i], transfers[i]);",
															"  }",
															"",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/v2/transfers?transferDayId={{transferDayId}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"transfers"
													],
													"query": [
														{
															"key": "transferDayId",
															"value": "{{transferDayId}}"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "400 Bad Request",
									"item": [
										{
											"name": "GET transfers?transferDayId={transferDayId} - Bad Request Missing Transfer Day Id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"GET transfers missing transfer day id status code is 400\", () => {",
															"  pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"GET transfers missing transfer day id response body\", () => {",
															"  const body = pm.response.json();",
															"",
															"  let timestamp = new Date(body.timestamp);",
															"  pm.expect(isNaN(timestamp.getTime())).to.eq(false);",
															"  pm.expect(body.error).to.eq(\"Bad Request\");",
															"  pm.expect(body.method).to.eq(\"GET\");",
															"  pm.expect(body.path).to.eq(\"/v2/transfers\");",
															"",
															"  pm.expect(body.validationErrors[0].property).to.eq(\"transferDayId\");",
															"  pm.expect(body.validationErrors[0].error).to.eq(\"is missing\");",
															"",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/v2/transfers?page=0",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"transfers"
													],
													"query": [
														{
															"key": "page",
															"value": "0"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "GET transfers?transferDayId={transferDayId} - Bad Request Invalid Transfer Day Id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"GET transfers invalid transfer day id status code is 400\", () => {",
															"  pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"GET transfers invalid transfer day id response body\", () => {",
															"  const body = pm.response.json();",
															"",
															"  let timestamp = new Date(body.timestamp);",
															"  pm.expect(isNaN(timestamp.getTime())).to.eq(false);",
															"  pm.expect(body.error).to.eq(\"Bad Request\");",
															"  pm.expect(body.method).to.eq(\"GET\");",
															"  pm.expect(body.path).to.eq(\"/v2/transfers\");",
															"",
															"  pm.expect(body.validationErrors[0].property).to.eq(\"transferDayId\");",
															"  pm.expect(body.validationErrors[0].error).to.eq(\"is invalid\");",
															"",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/v2/transfers?transferDayId=invalid&page=0",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"transfers"
													],
													"query": [
														{
															"key": "transferDayId",
															"value": "invalid"
														},
														{
															"key": "page",
															"value": "0"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "GET transfers?transferDayId={transferDayId} - Bad Request Negative Transfer Day Id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"GET transfers non positive transfer day id status code is 400\", () => {",
															"  pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"GET transfers non positive transfer day id response body\", () => {",
															"  const body = pm.response.json();",
															"",
															"  let timestamp = new Date(body.timestamp);",
															"  pm.expect(isNaN(timestamp.getTime())).to.eq(false);",
															"  pm.expect(body.error).to.eq(\"Bad Request\");",
															"  pm.expect(body.method).to.eq(\"GET\");",
															"  pm.expect(body.path).to.eq(\"/v2/transfers\");",
															"",
															"  pm.expect(body.validationErrors[0].property).to.eq(\"transferDayId\");",
															"  pm.expect(body.validationErrors[0].error).to.eq(\"must be positive\");",
															"",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/v2/transfers?transferDayId=-1",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"transfers"
													],
													"query": [
														{
															"key": "transferDayId",
															"value": "-1"
														}
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"const moment = require('moment');",
					"",
					"pm.globals.set(\"date\", moment().format(\"YYYY-MM-DD\"));",
					"",
					"// Add one minute to these so they'll always be later than database datetimes set to 00:00:00.",
					"// This will be useful whenever we're trying to create a current of anything and (hopefully)) not be a problem otherwise",
					"pm.globals.set(\"datetime\", moment()",
					" .add(1, 'minutes')",
					" .set(0, 'seconds')",
					" .format(\"YYYY-MM-DDTHH:mm:ss\"));",
					"",
					"for (let i = 1; i <= 10; i++) {",
					"  pm.globals.set(\"datePlus\" + i, moment()",
					"    .add(i, 'days')",
					"    .format(\"YYYY-MM-DD\"));",
					"",
					"  pm.globals.set(\"dateMinus\" + i, moment()",
					"    .subtract(i, 'days') ",
					"    .format(\"YYYY-MM-DD\"));",
					"",
					"  // See above",
					"  pm.globals.set(\"datetimePlus\" + i, moment()",
					"   .add(i, 'days')",
					"   .format(\"YYYY-MM-DDT00:01:00\"));",
					"",
					"  pm.globals.set(\"datetimeMinus\" + i, moment()",
					"   .subtract(i, 'days')",
					"   .format(\"YYYY-MM-DDT00:00:00\"));",
					"}",
					"",
					"expect = {",
					"    stadiumToEq: function(pm, stadium1, stadium2) {",
					"        pm.expect(stadium1.id).to.eq(stadium2.id);   ",
					"        pm.expect(stadium1.name).to.eq(stadium2.name);   ",
					"        pm.expect(stadium1.city).to.eq(stadium2.city);   ",
					"        pm.expect(stadium1.capacity).to.eq(stadium2.capacity);   ",
					"        pm.expect(stadium1.opened).to.eq(stadium2.opened);   ",
					"        pm.expect(stadium1.photoFileName).to.eq(stadium2.photoFileName);   ",
					"    },",
					"    positionToEq: function(pm, position1, position2) {",
					"        pm.expect(position1.id).to.eq(position2.id);   ",
					"        pm.expect(position1.name).to.eq(position2.name);   ",
					"        pm.expect(position1.code).to.eq(position2.code);   ",
					"        pm.expect(position1.maxCount).to.eq(position2.maxCount);   ",
					"        pm.expect(position1.defender).to.eq(position2.defender);   ",
					"        pm.expect(position1.sortOrder).to.eq(position2.sortOrder);   ",
					"    },",
					"    seasonToEq: function(pm, season1, season2) {",
					"        pm.expect(season1.id).to.eq(season2.id);",
					"        pm.expect(season1.name).to.eq(season2.name);",
					"        pm.expect(season1.shortName).to.eq(season2.shortName);",
					"        pm.expect(season1.d11TeamBudget).to.eq(season2.d11TeamBudget);",
					"        pm.expect(season1.d11TeamMaxTransfers).to.eq(season2.d11TeamMaxTransfers);",
					"        pm.expect(season1.status).to.eq(season2.status);",
					"        pm.expect(season1.date).to.eq(season2.date);",
					"        pm.expect(season1.legacy).to.eq(season2.legacy);",
					"    },",
					"    matchToEq: function(pm, match1, match2) {",
					"        pm.expect(match1.id).to.eq(match2.id);",
					"        pm.expect(match1.whoscoredId).to.eq(match2.whoscoredId);",
					"        pm.expect(match1.datetime).to.eq(match2.datetime);",
					"        pm.expect(match1.homeTeamGoalsScored).to.eq(match2.homeTeamGoalsScored);",
					"        pm.expect(match1.awayTeamGoalsScored).to.eq(match2.awayTeamGoalsScored);",
					"        pm.expect(match1.previousHomeTeamGoalsScored).to.eq(match2.previousHomeTeamGoalsScored);",
					"        pm.expect(match1.previousAwayTeamGoalsScored).to.eq(match2.previousAwayTeamGoalsScored);",
					"        pm.expect(match1.elapsed).to.eq(match2.elapsed);                        ",
					"        pm.expect(match1.status).to.eq(match2.status);",
					"    },",
					"    matchWeekToEq: function(pm, matchWeek1, matchWeek2) {",
					"        pm.expect(matchWeek1.id).to.eq(matchWeek2.id);",
					"        pm.expect(matchWeek1.id).to.eq(matchWeek2.id);",
					"        pm.expect(matchWeek1.matchWeekNumber).to.eq(matchWeek2.matchWeekNumber);",
					"        //pm.expect(matchWeek1.date).to.eq(matchWeek2.date);",
					"        pm.expect(matchWeek1.status).to.eq(matchWeek2.status);",
					"",
					"    pm.expect(matchWeek1.id).to.eq(matchWeek2.id);",
					"    pm.expect(matchWeek1.matchWeekNumber).to.eq(matchWeek2.matchWeekNumber);",
					"    //pm.expect(matchWeek1.date).to.eq(pm.globals.get(\"dateMinus\" + (2 - i)));",
					"    pm.expect(matchWeek1.elapsed).to.eq(matchWeek2.elapsed);",
					"    pm.expect(matchWeek1.status).to.eq(matchWeek2.status);",
					"",
					"    pm.expect(matchWeek1.mostValuablePlayer.points).to.eq(matchWeek2.mostValuablePlayer.points);",
					"    pm.expect(matchWeek1.mostValuablePlayer.goals).to.eq(matchWeek2.mostValuablePlayer.goals);",
					"",
					"    pm.expect(matchWeek1.mostValuablePlayer.player.id).to.eq(matchWeek2.mostValuablePlayer.player.id);",
					"    pm.expect(matchWeek1.mostValuablePlayer.player.firstName).to.eq(matchWeek2.mostValuablePlayer.player.firstName);",
					"    pm.expect(matchWeek1.mostValuablePlayer.player.lastName).to.eq(matchWeek2.mostValuablePlayer.player.lastName);",
					"    pm.expect(matchWeek1.mostValuablePlayer.player.name).to.eq(matchWeek2.mostValuablePlayer.player.name);",
					"    pm.expect(matchWeek1.mostValuablePlayer.player.shortName).to.eq(matchWeek2.mostValuablePlayer.player.shortName);",
					"    pm.expect(matchWeek1.mostValuablePlayer.player.parameterizedName).to.eq(matchWeek2.mostValuablePlayer.player.parameterizedName);",
					"    pm.expect(matchWeek1.mostValuablePlayer.player.photoFileName).to.eq(matchWeek2.mostValuablePlayer.player.photoFileName);",
					"",
					"    pm.expect(matchWeek1.mostValuablePlayer.team.id).to.eq(matchWeek2.mostValuablePlayer.team.id);",
					"    pm.expect(matchWeek1.mostValuablePlayer.team.name).to.eq(matchWeek2.mostValuablePlayer.team.name);",
					"    pm.expect(matchWeek1.mostValuablePlayer.team.shortName).to.eq(matchWeek2.mostValuablePlayer.team.shortName);",
					"    pm.expect(matchWeek1.mostValuablePlayer.team.code).to.eq(matchWeek2.mostValuablePlayer.team.code);",
					"    pm.expect(matchWeek1.mostValuablePlayer.team.dummy).to.eq(matchWeek2.mostValuablePlayer.team.dummy);",
					"    pm.expect(matchWeek1.mostValuablePlayer.team.photoFileName).to.eq(matchWeek2.mostValuablePlayer.team.photoFileName);",
					"",
					"    pm.expect(matchWeek1.mostValuablePlayer.d11Team.id).to.eq(matchWeek2.mostValuablePlayer.d11Team.id);",
					"    pm.expect(matchWeek1.mostValuablePlayer.d11Team.name).to.eq(matchWeek2.mostValuablePlayer.d11Team.name);",
					"    pm.expect(matchWeek1.mostValuablePlayer.d11Team.shortName).to.eq(matchWeek2.mostValuablePlayer.d11Team.shortName);",
					"    pm.expect(matchWeek1.mostValuablePlayer.d11Team.code).to.eq(matchWeek2.mostValuablePlayer.d11Team.code);",
					"    pm.expect(matchWeek1.mostValuablePlayer.d11Team.dummy).to.eq(matchWeek2.mostValuablePlayer.d11Team.dummy);",
					"    pm.expect(matchWeek1.mostValuablePlayer.d11Team.photoFileName).to.eq(matchWeek2.mostValuablePlayer.d11Team.photoFileName);",
					"",
					"    },",
					"    teamToEq: function(pm, team1, team2) {",
					"        pm.expect(team1.id).to.eq(team2.id);",
					"        pm.expect(team1.whoscoredId).to.eq(team2.whoscoredId);",
					"        pm.expect(team1.premierLeagueId).to.eq(team2.premierLeagueId);",
					"        pm.expect(team1.name).to.eq(team2.name);",
					"        pm.expect(team1.shortName).to.eq(team2.shortName);",
					"        pm.expect(team1.code).to.eq(team2.code);",
					"        pm.expect(team1.established).to.eq(team2.established);",
					"        pm.expect(team1.color).to.eq(team2.color);",
					"        pm.expect(team1.dummy).to.eq(team2.dummy);",
					"        pm.expect(team1.photoFileName).to.eq(team2.photoFileName);",
					"        pm.expect(team1.url).to.eq(team2.url);",
					"    },",
					"    teamSeasonStatToEq: function(pm, teamSeasonStat1, teamSeasonStat2) {",
					"        pm.expect(teamSeasonStat1.id).to.eq(teamSeasonStat2.id);",
					"        pm.expect(teamSeasonStat1.winCount).to.eq(teamSeasonStat2.winCount);",
					"        pm.expect(teamSeasonStat1.matchesPlayed).to.eq(teamSeasonStat2.matchesPlayed);",
					"        pm.expect(teamSeasonStat1.matchesWon).to.eq(teamSeasonStat2.matchesWon);",
					"        pm.expect(teamSeasonStat1.matchesDrawn).to.eq(teamSeasonStat2.matchesDrawn);",
					"        pm.expect(teamSeasonStat1.matchesLost).to.eq(teamSeasonStat2.matchesLost);",
					"        pm.expect(teamSeasonStat1.goalsFor).to.eq(teamSeasonStat2.goalsFor);",
					"        pm.expect(teamSeasonStat1.goalsAgainst).to.eq(teamSeasonStat2.goalsAgainst);",
					"        pm.expect(teamSeasonStat1.goalDifference).to.eq(teamSeasonStat2.goalDifference);",
					"        pm.expect(teamSeasonStat1.points).to.eq(teamSeasonStat2.points);",
					"        pm.expect(teamSeasonStat1.formPoints).to.eq(teamSeasonStat2.formPoints);        ",
					"        pm.expect(teamSeasonStat1.ranking).to.eq(teamSeasonStat2.ranking);",
					"        pm.expect(teamSeasonStat1.previousRanking).to.eq(teamSeasonStat2.previousRanking);",
					"",
					"        pm.expect(teamSeasonStat1.formMatchPoints.length).to.eq(teamSeasonStat2.formMatchPoints.length);",
					"        for (let i = 0; i < teamSeasonStat1.formMatchPoints.length; ++i) {",
					"            pm.expect(teamSeasonStat1.formMatchPoints[i]).to.eq(teamSeasonStat2.formMatchPoints[i]);",
					"        }   ",
					"",
					"        expect.teamToEq(pm, teamSeasonStat1.team, teamSeasonStat2.team);",
					"        expect.seasonToEq(pm, teamSeasonStat1.season, teamSeasonStat2.season);",
					"    },",
					"    goalToEq: function(pm, goal1, goal2) {",
					"        pm.expect(goal1.id).to.eq(goal2.id);",
					"        pm.expect(goal1.time).to.eq(goal2.time);",
					"        pm.expect(goal1.addedTime).to.eq(goal2.addedTime);",
					"        pm.expect(goal1.penalty).to.eq(goal2.penalty);",
					"        pm.expect(goal1.ownGoal).to.eq(goal2.ownGoal);",
					"    },",
					"    d11MatchToEq: function(pm, d11Match1, d11Match2) {",
					"        pm.expect(d11Match1.id).to.eq(d11Match2.id);",
					"        pm.expect(d11Match1.datetime).to.eq(d11Match2.datetime);",
					"        pm.expect(d11Match1.homeTeamGoalsScored).to.eq(d11Match2.homeTeamGoalsScored);",
					"        pm.expect(d11Match1.awayTeamGoalsScored).to.eq(d11Match2.awayTeamGoalsScored);",
					"        pm.expect(d11Match1.homeTeamPoints).to.eq(d11Match2.homeTeamPoints);",
					"        pm.expect(d11Match1.awayTeamPoints).to.eq(d11Match2.awayTeamPoints);",
					"        pm.expect(d11Match1.previousHomeTeamGoalsScored).to.eq(d11Match2.previousHomeTeamGoalsScored);",
					"        pm.expect(d11Match1.previousAwayTeamGoalsScored).to.eq(d11Match2.previousAwayTeamGoalsScored);",
					"        pm.expect(d11Match1.previousHomeTeamPoints).to.eq(d11Match2.previousHomeTeamPoints);",
					"        pm.expect(d11Match1.previousAwayTeamPoints).to.eq(d11Match2.previousAwayTeamPoints);",
					"",
					"        pm.expect(d11Match1.elapsed).to.eq(d11Match2.elapsed);                        ",
					"        pm.expect(d11Match1.status).to.eq(d11Match2.status);",
					"    },",
					"    d11TeamToEq: function(pm, d11Team1, d11Team2) {",
					"        pm.expect(d11Team1.id).to.eq(d11Team2.id);",
					"        pm.expect(d11Team1.name).to.eq(d11Team2.name);",
					"        pm.expect(d11Team1.shortName).to.eq(d11Team2.shortName);",
					"        pm.expect(d11Team1.code).to.eq(d11Team2.code);",
					"        pm.expect(d11Team1.dummy).to.eq(d11Team2.dummy);",
					"        pm.expect(d11Team1.photoFileName).to.eq(d11Team2.photoFileName);",
					"    },",
					"    playerToEq: function(pm, player1, player2) {",
					"        pm.expect(player1.id).to.eq(player2.id);",
					"        pm.expect(player1.whoscoredId).to.eq(player2.whoscoredId);",
					"        pm.expect(player1.premierLeagueId).to.eq(player2.premierLeagueId);",
					"        pm.expect(player1.firstName).to.eq(player2.firstName);",
					"        pm.expect(player1.lastName).to.eq(player2.lastName);",
					"        pm.expect(player1.name).to.eq(player2.name);",
					"        pm.expect(player1.shortName).to.eq(player2.shortName);",
					"        pm.expect(player1.fullName).to.eq(player2.fullName);",
					"        pm.expect(player1.parameterizedName).to.eq(player2.parameterizedName);",
					"        pm.expect(player1.dateOfBirth).to.eq(player2.dateOfBirth);",
					"        pm.expect(player1.height).to.eq(player2.height);",
					"        pm.expect(player1.photoFileName).to.eq(player2.photoFileName);",
					"        pm.expect(player1.verified).to.eq(player2.verified);        ",
					"    },",
					"    playerSeasonStatToEq: function(pm, playerSeasonStat1, playerSeasonStat2) {",
					"        pm.expect(playerSeasonStat1.id).to.eq(playerSeasonStat2.id);",
					"",
					"        pm.expect(playerSeasonStat1.shirtNumber).to.eq(playerSeasonStat2.shirtNumber);",
					"        pm.expect(playerSeasonStat1.fee).to.eq(playerSeasonStat2.fee);",
					"        pm.expect(playerSeasonStat1.winCount).to.eq(playerSeasonStat2.winCount);",
					"        pm.expect(playerSeasonStat1.ranking).to.eq(playerSeasonStat2.ranking);",
					"        pm.expect(playerSeasonStat1.points).to.eq(playerSeasonStat2.points);",
					"        pm.expect(playerSeasonStat1.formPoints).to.eq(playerSeasonStat2.formPoints);",
					"        pm.expect(playerSeasonStat1.pointsPerAppearance).to.eq(playerSeasonStat2.pointsPerAppearance);            ",
					"        pm.expect(playerSeasonStat1.goals).to.eq(playerSeasonStat2.goals);",
					"        pm.expect(playerSeasonStat1.goalAssists).to.eq(playerSeasonStat2.goalAssists);",
					"        pm.expect(playerSeasonStat1.ownGoals).to.eq(playerSeasonStat2.ownGoals);",
					"        pm.expect(playerSeasonStat1.goalsConceded).to.eq(playerSeasonStat2.goalsConceded);",
					"        pm.expect(playerSeasonStat1.cleanSheets).to.eq(playerSeasonStat2.cleanSheets);",
					"        pm.expect(playerSeasonStat1.yellowCards).to.eq(playerSeasonStat2.yellowCards);",
					"        pm.expect(playerSeasonStat1.redCards).to.eq(playerSeasonStat2.redCards);",
					"        pm.expect(playerSeasonStat1.substitutionsOn).to.eq(playerSeasonStat2.substitutionsOn);",
					"        pm.expect(playerSeasonStat1.substitutionsOff).to.eq(playerSeasonStat2.substitutionsOff);",
					"        pm.expect(playerSeasonStat1.manOfTheMatch).to.eq(playerSeasonStat2.manOfTheMatch);",
					"        pm.expect(playerSeasonStat1.sharedManOfTheMatch).to.eq(playerSeasonStat2.sharedManOfTheMatch);",
					"        pm.expect(playerSeasonStat1.rating).to.eq(playerSeasonStat2.rating);",
					"        pm.expect(playerSeasonStat1.gamesStarted).to.eq(playerSeasonStat2.gamesStarted);",
					"        pm.expect(playerSeasonStat1.gamesSubstitute).to.eq(playerSeasonStat2.gamesSubstitute);",
					"        pm.expect(playerSeasonStat1.gamesDidNotParticipate).to.eq(playerSeasonStat2.gamesDidNotParticipate);",
					"        pm.expect(playerSeasonStat1.minutesPlayed).to.eq(playerSeasonStat2.minutesPlayed);",
					"",
					"        pm.expect(playerSeasonStat1.formMatchPoints.length).to.eq(playerSeasonStat2.formMatchPoints.length);",
					"        for (let i = 0; i < playerSeasonStat1.formMatchPoints.length; ++i) {",
					"            pm.expect(playerSeasonStat1.formMatchPoints[i]).to.eq(playerSeasonStat2.formMatchPoints[i]);",
					"        }",
					"",
					"        expect.playerToEq(pm, playerSeasonStat1.player, playerSeasonStat2.player);  ",
					"        expect.teamToEq(pm, playerSeasonStat1.team, playerSeasonStat2.team);",
					"        expect.d11TeamToEq(pm, playerSeasonStat1.d11Team, playerSeasonStat2.d11Team);",
					"        expect.seasonToEq(pm, playerSeasonStat1.season, playerSeasonStat2.season);",
					"        expect.positionToEq(pm, playerSeasonStat1.position, playerSeasonStat2.position);",
					"    },",
					"    d11TeamSeasonStatToEq: function(pm, d11TeamSeasonStat1, d11TeamSeasonStat2) {",
					"        pm.expect(d11TeamSeasonStat1.id).to.eq(d11TeamSeasonStat2.id);",
					"",
					"        pm.expect(d11TeamSeasonStat1.winCount).to.eq(d11TeamSeasonStat2.winCount);",
					"        pm.expect(d11TeamSeasonStat1.matchesPlayed).to.eq(d11TeamSeasonStat2.matchesPlayed);",
					"        pm.expect(d11TeamSeasonStat1.matchesWon).to.eq(d11TeamSeasonStat2.matchesWon);",
					"        pm.expect(d11TeamSeasonStat1.matchesDrawn).to.eq(d11TeamSeasonStat2.matchesDrawn);",
					"        pm.expect(d11TeamSeasonStat1.matchesLost).to.eq(d11TeamSeasonStat2.matchesLost);",
					"        pm.expect(d11TeamSeasonStat1.goalsFor).to.eq(d11TeamSeasonStat2.goalsFor);",
					"        pm.expect(d11TeamSeasonStat1.goalsAgainst).to.eq(d11TeamSeasonStat2.goalsAgainst);",
					"        pm.expect(d11TeamSeasonStat1.goalDifference).to.eq(d11TeamSeasonStat2.goalDifference);",
					"        pm.expect(d11TeamSeasonStat1.points).to.eq(d11TeamSeasonStat2.points);",
					"        pm.expect(d11TeamSeasonStat1.formPoints).to.eq(d11TeamSeasonStat2.formPoints);        ",
					"        pm.expect(d11TeamSeasonStat1.ranking).to.eq(d11TeamSeasonStat2.ranking);",
					"        pm.expect(d11TeamSeasonStat1.previousRanking).to.eq(d11TeamSeasonStat2.previousRanking);",
					"",
					"        pm.expect(d11TeamSeasonStat1.formMatchPoints.length).to.eq(d11TeamSeasonStat2.formMatchPoints.length);",
					"        for (let i = 0; i < d11TeamSeasonStat1.formMatchPoints.length; ++i) {",
					"            pm.expect(d11TeamSeasonStat1.formMatchPoints[i]).to.eq(d11TeamSeasonStat2.formMatchPoints[i]);",
					"        }   ",
					"",
					"        expect.d11TeamToEq(pm, d11TeamSeasonStat1.d11Team, d11TeamSeasonStat2.d11Team);",
					"        expect.seasonToEq(pm, d11TeamSeasonStat1.season, d11TeamSeasonStat2.season);",
					"    },",
					"    transferWindowToEq: function(pm, transferWindow1, transferWindow2) {",
					"        pm.expect(transferWindow1.id).to.eq(transferWindow2.id);",
					"        pm.expect(transferWindow1.transferWindowNumber).to.eq(transferWindow2.transferWindowNumber);",
					"        pm.expect(transferWindow1.draft).to.eq(transferWindow2.draft);",
					"        pm.expect(transferWindow1.status).to.eq(transferWindow2.status);",
					"        //pm.expect(transferWindow1.datetime).to.eq(transferWindow2.datetime);",
					"    },",
					"    transferDayToEq: function(pm, transferDay1, transferDay2) {",
					"        pm.expect(transferDay1.id).to.eq(transferDay2.id);",
					"        pm.expect(transferDay1.transferDayNumber).to.eq(transferDay2.transferDayNumber);",
					"        pm.expect(transferDay1.status).to.eq(transferDay2.status);",
					"        //pm.expect(transferDay1.datetime).to.eq(transferDay2.datetime);",
					"    },",
					"    transferListingToEq: function(pm, transferListing1, transferListing2) {",
					"        pm.expect(transferListing1.id).to.eq(transferListing2.id);",
					"        pm.expect(transferListing1.ranking).to.eq(transferListing2.ranking);",
					"        pm.expect(transferListing1.points).to.eq(transferListing2.points);",
					"        pm.expect(transferListing1.formPoints).to.eq(transferListing2.formPoints);        ",
					"        pm.expect(transferListing1.pointsPerAppearance).to.eq(transferListing2.pointsPerAppearance);",
					"        pm.expect(transferListing1.goals).to.eq(transferListing2.goals);",
					"        pm.expect(transferListing1.goalAssists).to.eq(transferListing2.goalAssists);",
					"        pm.expect(transferListing1.ownGoals).to.eq(transferListing2.ownGoals);",
					"        pm.expect(transferListing1.goalsConceded).to.eq(transferListing2.goalsConceded);",
					"        pm.expect(transferListing1.cleanSheets).to.eq(transferListing2.cleanSheets);        ",
					"        pm.expect(transferListing1.yellowCards).to.eq(transferListing2.yellowCards);",
					"        pm.expect(transferListing1.redCards).to.eq(transferListing2.redCards);",
					"        pm.expect(transferListing1.substitutionsOn).to.eq(transferListing2.substitutionsOn);",
					"        pm.expect(transferListing1.substitutionsOff).to.eq(transferListing2.substitutionsOff);",
					"        pm.expect(transferListing1.manOfTheMatch).to.eq(transferListing2.manOfTheMatch);",
					"        pm.expect(transferListing1.sharedManOfTheMatch).to.eq(transferListing2.sharedManOfTheMatch);",
					"        pm.expect(transferListing1.rating).to.eq(transferListing2.rating);",
					"        pm.expect(transferListing1.gamesStarted).to.eq(transferListing2.gamesStarted);",
					"        pm.expect(transferListing1.gamesSubstitute).to.eq(transferListing2.gamesSubstitute);",
					"        pm.expect(transferListing1.gamesDidNotParticipate).to.eq(transferListing2.gamesDidNotParticipate);",
					"        pm.expect(transferListing1.minutesPlayed).to.eq(transferListing2.minutesPlayed);",
					"        pm.expect(transferListing1.newPlayer).to.eq(transferListing2.newPlayer);",
					"",
					"        pm.expect(transferListing1.formMatchPoints.length).to.eq(transferListing2.formMatchPoints.length);",
					"        for (let i = 0; i < transferListing1.formMatchPoints.length; ++i) {",
					"            pm.expect(transferListing1.formMatchPoints[i]).to.eq(transferListing2.formMatchPoints[i]);",
					"        }",
					"",
					"        expect.playerToEq(pm, transferListing1.player, transferListing2.player);",
					"        expect.teamToEq(pm, transferListing1.team, transferListing2.team);",
					"        expect.d11TeamToEq(pm, transferListing1.d11Team, transferListing2.d11Team);",
					"        expect.positionToEq(pm, transferListing1.position, transferListing2.position);",
					"    },",
					"    transferBidToEq: function(pm, transferBid1, transferBid2) {",
					"        pm.expect(transferBid1.id).to.eq(transferBid2.id);",
					"        pm.expect(transferBid1.playerRanking).to.eq(transferBid2.playerRanking);",
					"        pm.expect(transferBid1.d11TeamRanking).to.eq(transferBid2.d11TeamRanking);        ",
					"        pm.expect(transferBid1.fee).to.eq(transferBid2.fee);",
					"        pm.expect(transferBid1.activeFee).to.eq(transferBid2.activeFee);        ",
					"        pm.expect(transferBid1.successful).to.eq(transferBid2.successful);",
					"",
					"        expect.playerToEq(pm, transferBid1.player, transferBid2.player);",
					"        expect.d11TeamToEq(pm, transferBid1.d11Team, transferBid2.d11Team);",
					"    },",
					"    transferToEq: function(pm, transfer1, transfer2) {",
					"        pm.expect(transfer1.id).to.eq(transfer2.id);",
					"        pm.expect(transfer1.fee).to.eq(transfer2.fee);",
					"",
					"        expect.transferDayToEq(pm, transfer1.transferDay, transfer2.transferDay);",
					"        expect.playerToEq(pm, transfer1.player, transfer2.player);",
					"        expect.d11TeamToEq(pm, transfer1.d11Team, transfer2.d11Team);",
					"    }",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}